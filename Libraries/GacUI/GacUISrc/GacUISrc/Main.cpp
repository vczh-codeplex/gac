#if _DEBUG
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
#endif

#pragma comment(linker,"\"/manifestdependency:type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\"")

#include "..\..\Source\GacUI.h"
#include "..\..\..\Workflow\Source\Analyzer\WfAnalyzer.h"
#include "..\..\Source\Reflection\GuiInstanceLoader.h"
#include "..\..\Source\Reflection\TypeDescriptors\GuiReflectionControls.h"
#include "..\..\Source\Reflection\TypeDescriptors\GuiReflectionEvents.h"
#include "..\..\Source\Reflection\TypeDescriptors\GuiReflectionTemplates.h"
#include <Windows.h>

using namespace vl::collections;
using namespace vl::stream;
using namespace vl::reflection::description;
using namespace vl::parsing;
using namespace vl::workflow;
using namespace vl::workflow::analyzer;
using namespace vl::workflow::runtime;
using namespace vl::presentation::controls::list;
using namespace vl::presentation::templates;

#define GUI_GRAPHICS_RENDERER_DIRECT2D

int CALLBACK WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int CmdShow)
{
#ifdef GUI_GRAPHICS_RENDERER_GDI
	int result=SetupWindowsGDIRenderer();
#endif
#ifdef GUI_GRAPHICS_RENDERER_DIRECT2D
	int result = SetupWindowsDirect2DRenderer();
#endif

#if _DEBUG
	_CrtDumpMemoryLeaks();
#endif
	return result;
}

extern void UnitTestInGuiMain();

/*
Data Binding: IValueObservableList/ItemTemplate
	GuiSelectableListControl
	GuiVirtualTextList
	GuiVirtualListView
	GuiVirtualTreeView
	GuiVirtualDataGrid
	GuiTab
	GuiComboBoxListControl

Features:
	View Model				: View model interface declaration
	Data Binding			: Data structure declaration
	Control Template		: Interface methods to events, or prepare predefined classes
	Workflow as Code Behind
	Data Service and Query
*/

#ifndef VCZH_DEBUG_NO_REFLECTION

namespace demos
{
// -------- WILL BE GENERATED BY "Vczh GacUI Resource Code Generator" -------- //

	class ISeason : public virtual IDescriptable, public Description<ISeason>
	{
	public:
		virtual WString							GetSeason() = 0;
		virtual WString							GetDescription() = 0;
		virtual Ptr<IValueObservableList>		GetChildren() = 0;
	};

	class IViewModel : public virtual IDescriptable, public Description<IViewModel>
	{
	public:
		virtual Ptr<IValueObservableList>		GetSeasons() = 0;
		virtual Ptr<IValueObservableList>		GetComplexSeasons() = 0;
		virtual Ptr<ISeason>					GetTreeSeasons() = 0;

		virtual void							AddSeason() = 0;
		virtual void							AddComplexSeason() = 0;
		virtual void							AddTreeSeason() = 0;
	};

	class MainWindow;

	template<typename TImpl>
	class SeasonItemTemplate_ : public GuiListItemTemplate, public GuiInstancePartialClass<GuiListItemTemplate>, public Description<TImpl>
	{
	private:
		Ptr<demos::ISeason> ViewModel_;
	protected:
		void InitializeComponents(Ptr<demos::ISeason> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
			}
			else
			{
				ViewModel = 0;
			}
		}
	public:
		SeasonItemTemplate_()
			:GuiListItemTemplate()
			, GuiInstancePartialClass<GuiListItemTemplate>(L"demos::SeasonItemTemplate")
		{
		}

		Ptr<demos::ISeason> GetViewModel()
		{
			return ViewModel_;
		}
	};

	template<typename TImpl>
	class MainWindow_ : public GuiWindow, public GuiInstancePartialClass<GuiWindow>, public Description<TImpl>
	{
	private:
		Ptr<IViewModel> ViewModel_;
	protected:

		void InitializeComponents(Ptr<IViewModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
			}
			else
			{
				ViewModel = 0;
			}
		}
	public:
		MainWindow_()
			:GuiWindow(GetCurrentTheme()->CreateWindowStyle())
			,GuiInstancePartialClass<GuiWindow>(L"demos::MainWindow")
		{
		}

		Ptr<IViewModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

// -------- WILL BE GENERATED BY "Vczh GacUI Resource Code Generator" -------- //
}

namespace demos
{
	class MainWindow : public MainWindow_<MainWindow>
	{
	public:
		MainWindow(Ptr<IViewModel> ViewModel)
		{
			InitializeComponents(ViewModel);
		}
	};
	
	class SeasonItemTemplate : public SeasonItemTemplate_<SeasonItemTemplate>
	{
	public:
		SeasonItemTemplate(Ptr<demos::ISeason> ViewModel)
		{
			InitializeComponents(ViewModel);
		}
	};
}

namespace vl
{
	namespace reflection
	{
		namespace description
		{
// -------- WILL BE GENERATED BY "Vczh GacUI Resource Code Generator" -------- //

			DECL_TYPE_INFO(demos::IViewModel)
			IMPL_TYPE_INFO(demos::IViewModel)

			DECL_TYPE_INFO(demos::ISeason)
			IMPL_TYPE_INFO(demos::ISeason)

			DECL_TYPE_INFO(demos::SeasonItemTemplate)
			IMPL_TYPE_INFO(demos::SeasonItemTemplate)

			DECL_TYPE_INFO(demos::MainWindow)
			IMPL_TYPE_INFO(demos::MainWindow)

			BEGIN_CLASS_MEMBER(demos::IViewModel)
				CLASS_MEMBER_PROPERTY_READONLY_FAST(Seasons)
				CLASS_MEMBER_PROPERTY_READONLY_FAST(ComplexSeasons)
				CLASS_MEMBER_PROPERTY_READONLY_FAST(TreeSeasons)

				CLASS_MEMBER_METHOD(AddSeason, NO_PARAMETER)
				CLASS_MEMBER_METHOD(AddComplexSeason, NO_PARAMETER)
				CLASS_MEMBER_METHOD(AddTreeSeason, NO_PARAMETER)
			END_CLASS_MEMBER(demos::IViewModel)

			BEGIN_CLASS_MEMBER(demos::ISeason)
				CLASS_MEMBER_PROPERTY_READONLY_FAST(Season)
				CLASS_MEMBER_PROPERTY_READONLY_FAST(Description)
				CLASS_MEMBER_PROPERTY_READONLY_FAST(Children)
			END_CLASS_MEMBER(demos::ISeason)

			BEGIN_CLASS_MEMBER(demos::SeasonItemTemplate)
				CLASS_MEMBER_BASE(GuiListItemTemplate)
				CLASS_MEMBER_CONSTRUCTOR(demos::SeasonItemTemplate*(Ptr<demos::ISeason>), {L"ViewModel"})

				CLASS_MEMBER_PROPERTY_READONLY_FAST(ViewModel)
			END_CLASS_MEMBER(demos::SeasonItemTemplate)

			BEGIN_CLASS_MEMBER(demos::MainWindow)
				CLASS_MEMBER_BASE(GuiWindow)
				CLASS_MEMBER_CONSTRUCTOR(demos::MainWindow*(Ptr<demos::IViewModel>), {L"ViewModel"})

				CLASS_MEMBER_PROPERTY_READONLY_FAST(ViewModel)
			END_CLASS_MEMBER(demos::MainWindow)

			class DemoResourceLoader : public Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(demos::IViewModel)
					ADD_TYPE_INFO(demos::ISeason)
					ADD_TYPE_INFO(demos::SeasonItemTemplate)
					ADD_TYPE_INFO(demos::MainWindow)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};

			class DemoResourcePlugin : public Object, public IGuiPlugin
			{
			public:
				void Load()override
				{
					GetGlobalTypeManager()->AddTypeLoader(new DemoResourceLoader);
				}

				void AfterLoad()override
				{
				}

				void Unload()override
				{
				}
			};
			GUI_REGISTER_PLUGIN(DemoResourcePlugin)

// -------- WILL BE GENERATED BY "Vczh GacUI Resource Code Generator" -------- //
		}
	}
}

namespace demos
{
	class Season :public Object, public virtual ISeason
	{
	protected:
		WString								season;
		WString								description;
		list::ObservableList<Ptr<ISeason>>	children;

	public:
		Season(const WString& _season, const WString& _description)
			:season(_season)
			, description(_description)
		{
		}

		WString GetSeason()override
		{
			return season;
		}

		WString GetDescription()override
		{
			return description;
		}

		Ptr<IValueObservableList> GetChildren()override
		{
			return children.GetWrapper();
		}

		void Add(Ptr<Season> child)
		{
			children.Add(child);
		}
	};

	class ViewModel : public Object, public virtual IViewModel
	{
	protected:
		list::ObservableList<Ptr<ISeason>>				seasons;
		list::ObservableList<Ptr<ISeason>>				complexSeasons;
		Ptr<Season>										treeSeasons;

	public:
		ViewModel()
		{
			seasons.Add(new Season(L"Spring", L"Mar - May"));
			seasons.Add(new Season(L"Summer", L"Jun - Aug"));
			seasons.Add(new Season(L"Autumn", L"Sep - Nov"));
			seasons.Add(new Season(L"Winter", L"Dec - Feb"));

			complexSeasons.Add(new Season(L"Spring", L"Mar - May"));
			complexSeasons.Add(new Season(L"Summer", L"Jun - Aug"));
			complexSeasons.Add(new Season(L"Autumn", L"Sep - Nov"));
			complexSeasons.Add(new Season(L"Winter", L"Dec - Feb"));

			treeSeasons = new Season(L"", L"");
			treeSeasons->Add(new Season(L"Spring", L"Mar - May"));
			treeSeasons->Add(new Season(L"Summer", L"Jun - Aug"));
			treeSeasons->Add(new Season(L"Autumn", L"Sep - Nov"));
			treeSeasons->Add(new Season(L"Winter", L"Dec - Feb"));
		}

		Ptr<IValueObservableList> GetSeasons()override
		{
			return seasons.GetWrapper();
		}

		Ptr<IValueObservableList> GetComplexSeasons()override
		{
			return complexSeasons.GetWrapper();
		}

		Ptr<ISeason> GetTreeSeasons()override
		{
			return treeSeasons;
		}

		void AddSeason()override
		{
			seasons.Add(new Season(L"Unknown Season No." + itow(seasons.Count() + 1), L"N/A"));
		}

		void AddComplexSeason()override
		{
			complexSeasons.Add(new Season(L"Unknown Season No." + itow(complexSeasons.Count() + 1), L"N/A"));
		}

		void AddTreeSeason()override
		{
			auto first = UnboxValue<Ptr<ISeason>>(treeSeasons->GetChildren()->Get(0)).Cast<Season>();
			first->Add(new Season(L"Unknown Season No." + itow(first->GetChildren()->GetCount() + 1), L"N/A"));
		}
	};
}

#endif

void GuiMain()
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	UnitTestInGuiMain();
	{
		FileStream fileStream(L"Reflection.txt", FileStream::WriteOnly);
		BomEncoder encoder(BomEncoder::Utf16);
		EncoderStream encoderStream(fileStream, encoder);
		StreamWriter writer(encoderStream);
		LogTypeManager(writer);
	}
	{
		FileStream fileStream(L"Instance.txt", FileStream::WriteOnly);
		BomEncoder encoder(BomEncoder::Utf16);
		EncoderStream encoderStream(fileStream, encoder);
		StreamWriter writer(encoderStream);
		LogInstanceLoaderManager(writer);
	}

	List<WString> errors;
	auto resource = GuiResource::LoadFromXml(L"..\\GacUISrcCodepackedTest\\Resources\\XmlWindowResourceDataBinding.xml", errors);
	GetInstanceLoaderManager()->SetResource(L"Demo", resource);
	demos::MainWindow window(new demos::ViewModel);

	auto scope = window.GetScope().Obj();
	CopyFrom(errors, scope->errors, true);

	window.ForceCalculateSizeImmediately();
	window.MoveToScreenCenter();
	GetApplication()->Run(&window);
#endif
}