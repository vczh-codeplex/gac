/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
GacUI::Partial Classes

This file is generated by: Vczh GacUI Resource Code Generator
************************************************************************
DO NOT MODIFY
***********************************************************************/

#ifndef VCZH_GACUI_RESOURCE_CODE_GENERATOR_GacStudioUI_PARTIAL_CLASSES
#define VCZH_GACUI_RESOURCE_CODE_GENERATOR_GacStudioUI_PARTIAL_CLASSES

#include "..\..\..\Public\Source\GacUIReflection.h"

namespace vm
{
	class ISaveItemAction;
	class IAddFileItemAction;
	class IOpenInEditorItemAction;
	class IRenameItemAction;
	class IRemoveItemAction;
	class IMacroEnvironment;
	class ITextTemplate;
	class IEditorContentFactoryModel;
	class IEditorContentModel;
	class IEditorFileContentModel;
	class IEditorFactoryModel;
	class IEditorModel;
	class ISolutionItemModel;
	class IFileModel;
	class IFolderModel;
	class IProjectModel;
	class ISolutionModel;
	class IFileFactoryModel;
	class IProjectFactoryModel;
	class IStudioNewFileModel;
	class StudioFileReference;
	class IStudioAddExistingFilesModel;
	class IStudioModel;
}
namespace darkskin
{
	class BottomScrollButtonTemplate;
	class ButtonTemplate;
	class CheckBoxTemplate;
	class CheckItemBackgroundTemplate;
	class CheckTextListTemplate;
	class ComboBoxTemplate;
	class DatePickerTemplate;
	class DocumentLabelTemplate;
	class ExpandingDecoratorTemplate;
	class GroupBoxTemplate;
	class HScrollHandleTemplate;
	class HScrollTemplate;
	class HTrackerTemplate;
	class ItemBackgroundTemplate;
	class LabelTemplate;
	class LeftScrollButtonTemplate;
	class ListViewColumnHeaderTemplate;
	class ListViewTemplate;
	class MenuBarButtonTemplate;
	class MenuItemButtonTemplate;
	class MenuSplitterTemplate;
	class MultilineTextBoxTemplate;
	class ProgressBarTemplate;
	class RadioButtonTemplate;
	class RadioTextListTemplate;
	class RightScrollButtonTemplate;
	class ScrollViewTemplate;
	class SinglelineTextBoxTemplate;
	class TabDropdownTemplate;
	class TabHeaderTemplate;
	class TabTemplate;
	class TextListTemplate;
	class ToolstripButtonTemplate;
	class ToolstripDropdownButtonTemplate;
	class ToolstripMenuTemplate;
	class ToolstripSplitArrowTemplate;
	class ToolstripSplitButtonTemplate;
	class ToolstripSplitterTemplate;
	class ToolstripTemplate;
	class TooltipTemplate;
	class TopScrollButtonTemplate;
	class TreeViewTemplate;
	class VScrollHandleTemplate;
	class VScrollTemplate;
	class VTrackerTemplate;
	class WindowTemplate;
}
namespace ui
{
	class AboutWindow;
	class AddExistingFilesWindow;
	class FileReferenceFactoryColumnTemplate;
	class FileReferenceFactoryEditorTemplate;
	class FileReferenceFolderColumnTemplate;
	class FileReferenceNameColumnTemplate;
	class MainWindow;
	class NewFileWindow;
	class NewProjectWindow;
	class RenameFileWindow;

}
namespace vm
{
	class ISaveItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<ISaveItemAction>
	{
	public:

		virtual void Save() = 0;
	};

	class IAddFileItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IAddFileItemAction>
	{
	public:

		virtual bool HasFile(vl::WString fileName) = 0;
		virtual vl::collections::LazyList<vl::Ptr<vm::ISaveItemAction>> AddFile(vl::Ptr<vm::IFileModel> file) = 0;
	};

	class IOpenInEditorItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IOpenInEditorItemAction>
	{
	public:

		virtual vl::collections::LazyList<vl::Ptr<vm::IEditorContentModel>> GetSupportedContents() = 0;

		virtual vl::collections::LazyList<vl::Ptr<vm::IEditorFactoryModel>> GetSupportedEditors() = 0;

		virtual vm::IEditorModel* GetCurrentEditor() = 0;

		virtual vl::Ptr<vm::IEditorModel> OpenEditor(vl::Ptr<vm::IEditorFactoryModel> editorFactory) = 0;
		virtual void CloseEditor() = 0;
	};

	class IRenameItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IRenameItemAction>
	{
	public:

		virtual vl::WString GetRenameablePart() = 0;
		virtual vl::WString PreviewRename(vl::WString newName) = 0;
		virtual vl::collections::LazyList<vl::Ptr<vm::ISaveItemAction>> Rename(vl::WString newName) = 0;
	};

	class IRemoveItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IRemoveItemAction>
	{
	public:

		virtual vl::collections::LazyList<vl::Ptr<vm::ISaveItemAction>> Remove() = 0;
	};

	class IMacroEnvironment : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IMacroEnvironment>
	{
	public:

		virtual vm::IMacroEnvironment* GetParent() = 0;

		virtual bool HasMacro(vl::WString name, bool inherit) = 0;
		virtual vl::WString GetMacroValue(vl::WString name, bool inherit) = 0;
	};

	class ITextTemplate : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<ITextTemplate>
	{
	public:

		virtual vl::WString Generate(vl::Ptr<vm::IMacroEnvironment> macroEnvironment) = 0;
	};

	class IEditorContentFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IEditorContentFactoryModel>
	{
	public:

		virtual vl::WString GetName() = 0;

		virtual vl::WString GetId() = 0;

		virtual vm::IEditorContentFactoryModel* GetBaseContentFactory() = 0;

		virtual vl::Ptr<vm::IEditorContentModel> CreateContent(vl::Ptr<vm::IEditorContentModel> baseContent) = 0;
	};

	class IEditorContentModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IEditorContentModel>
	{
	public:

		virtual vl::Ptr<vm::IEditorContentFactoryModel> GetContentFactory() = 0;

		virtual vm::IEditorContentModel* GetBaseContent() = 0;

		virtual vm::IEditorContentModel* GetSubContent() = 0;

		virtual vl::reflection::description::Value GetPersistedContent() = 0;
		vl::Event<void()> PersistedContentChanged;

		virtual vl::reflection::description::Value GetEditingContent() = 0;

		virtual vm::IEditorModel* GetCurrentEditor() = 0;
		vl::Event<void()> CurrentEditorChanged;

		virtual void Persist(vl::reflection::description::Value content) = 0;
		virtual void BeginEdit(vm::IEditorModel* editor) = 0;
		virtual void EndEdit() = 0;
	};

	class IEditorFileContentModel : public virtual vm::IEditorContentModel, public vl::reflection::Description<IEditorFileContentModel>
	{
	public:

		virtual vl::WString GetFileName() = 0;

		virtual void LoadFile(vl::WString fileName) = 0;
		virtual void RenameFile(vl::WString fileName) = 0;
	};

	class IEditorFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IEditorFactoryModel>
	{
	public:

		virtual vl::WString GetName() = 0;

		virtual vl::WString GetId() = 0;

		virtual vl::Ptr<vm::IEditorContentFactoryModel> GetRequiredContentFactory() = 0;

		virtual vl::Ptr<vm::IEditorContentFactoryModel> GetEditingContentFactory() = 0;

		virtual vl::Ptr<vm::IEditorModel> CreateEditor() = 0;
	};

	class IEditorModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IEditorModel>
	{
	public:

		virtual vl::Ptr<vm::IEditorFactoryModel> GetEditorFactory() = 0;

		virtual vl::Ptr<vm::IOpenInEditorItemAction> GetEditorAction() = 0;

		virtual vl::presentation::controls::GuiControl* GetEditorControl() = 0;

		virtual vl::reflection::description::Value GetEditingContent() = 0;

		virtual void Open(vl::Ptr<vm::IEditorContentModel> content) = 0;
		virtual void Save() = 0;
		virtual void Close() = 0;
	};

	class ISolutionItemModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<ISolutionItemModel>
	{
	public:

		virtual vm::ISolutionItemModel* GetParent() = 0;

		virtual vl::Ptr<vl::presentation::GuiImageData> GetImage() = 0;
		vl::Event<void()> ImageChanged;

		virtual vl::WString GetName() = 0;
		vl::Event<void()> NameChanged;

		virtual vl::Ptr<vl::reflection::description::IValueObservableList> GetChildren() = 0;

		virtual vl::WString GetFilePath() = 0;
		vl::Event<void()> FilePathChanged;

		virtual vl::WString GetFileDirectory() = 0;
		vl::Event<void()> FileDirectoryChanged;

		virtual vl::vint32_t GetErrorCount() = 0;
		vl::Event<void()> ErrorCountChanged;

		virtual vl::WString GetErrorText(vl::vint32_t index) = 0;
	};

	class IFileModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<IFileModel>
	{
	public:

		virtual vl::Ptr<vm::IFileFactoryModel> GetFileFactory() = 0;

		virtual void InitializeFileAndSave() = 0;
	};

	class IFolderModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<IFolderModel>
	{
	public:
	};

	class IProjectModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<IProjectModel>
	{
	public:

		virtual vl::Ptr<vm::IProjectFactoryModel> GetProjectFactory() = 0;

		virtual void OpenProject() = 0;
		virtual void InitializeProjectAndSave() = 0;
	};

	class ISolutionModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<ISolutionModel>
	{
	public:

		virtual void OpenSolution() = 0;
		virtual void NewSolution() = 0;
		virtual void AddProject(vl::Ptr<vm::IProjectModel> project) = 0;
		virtual void RemoveProject(vl::Ptr<vm::IProjectModel> project) = 0;
	};

	class IFileFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IFileFactoryModel>
	{
	public:

		virtual vl::Ptr<vl::presentation::GuiImageData> GetImage() = 0;

		virtual vl::Ptr<vl::presentation::GuiImageData> GetSmallImage() = 0;

		virtual vl::WString GetName() = 0;

		virtual vl::WString GetCategory() = 0;

		virtual vl::WString GetDescription() = 0;

		virtual vl::WString GetId() = 0;

		virtual vl::WString GetDefaultFileExt() = 0;

		virtual vl::Ptr<vm::ITextTemplate> GetTextTemplate() = 0;

		virtual vl::Ptr<vm::IEditorContentFactoryModel> GetContentFactory() = 0;
	};

	class IProjectFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IProjectFactoryModel>
	{
	public:

		virtual vl::Ptr<vl::presentation::GuiImageData> GetImage() = 0;

		virtual vl::Ptr<vl::presentation::GuiImageData> GetSmallImage() = 0;

		virtual vl::WString GetName() = 0;

		virtual vl::WString GetDescription() = 0;

		virtual vl::WString GetId() = 0;

		virtual vl::collections::LazyList<vl::Ptr<vm::IProjectFactoryModel>> GetChildren() = 0;
	};

	class IStudioNewFileModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IStudioNewFileModel>
	{
	public:

		virtual vl::Ptr<vm::IProjectFactoryModel> GetFileFilters() = 0;

		virtual vl::Ptr<vm::IProjectFactoryModel> GetSelectedFileFilter() = 0;
		virtual void SetSelectedFileFilter(vl::Ptr<vm::IProjectFactoryModel> value) = 0;

		virtual vl::Ptr<vl::reflection::description::IValueObservableList> GetFilteredFileFactories() = 0;
	};

	class StudioFileReference : public vl::Object, public vl::reflection::Description<StudioFileReference>
	{
	public:
		vl::WString name;
		vl::WString folder;
		vl::Ptr<vm::IFileFactoryModel> fileFactory;
	};

	class IStudioAddExistingFilesModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IStudioAddExistingFilesModel>
	{
	public:

		virtual vl::Ptr<vl::reflection::description::IValueObservableList> GetSelectedFiles() = 0;

		virtual vl::WString GetCurrentFileName() = 0;
		virtual void SetCurrentFileName(vl::WString value) = 0;

		virtual vl::Ptr<vl::reflection::description::IValueObservableList> GetFilteredFileFactories() = 0;

		virtual void AddFiles(vl::collections::LazyList<vl::WString> fileNames) = 0;
		virtual void RemoveFiles(vl::collections::LazyList<vl::vint32_t> indices) = 0;
	};

	class IStudioModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IStudioModel>
	{
	public:

		virtual vl::collections::LazyList<vl::Ptr<vm::IProjectFactoryModel>> GetProjectFactories() = 0;

		virtual vl::collections::LazyList<vl::Ptr<vm::IFileFactoryModel>> GetFileFactories() = 0;

		virtual vl::collections::LazyList<vl::Ptr<vm::IEditorContentFactoryModel>> GetContentFactories() = 0;

		virtual vl::collections::LazyList<vl::Ptr<vm::IEditorFactoryModel>> GetEditorFactories() = 0;

		virtual vl::Ptr<vm::ISolutionItemModel> GetRootSolutionItem() = 0;

		virtual vl::Ptr<vm::ISolutionModel> GetOpenedSolution() = 0;
		vl::Event<void()> OpenedSolutionChanged;

		virtual vl::Ptr<vm::ISolutionItemModel> GetWorkingItem() = 0;
		vl::Event<void()> WorkingItemChanged;

		virtual vl::Ptr<vm::IProjectModel> GetWorkingProject() = 0;
		vl::Event<void()> WorkingProjectChanged;

		virtual vl::WString GetWorkingDirectory() = 0;
		vl::Event<void()> WorkingDirectoryChanged;

		virtual vl::Ptr<vm::IStudioNewFileModel> CreateNewFileModel() = 0;
		virtual vl::Ptr<vm::IStudioAddExistingFilesModel> CreateAddExistingFilesModel(vl::Ptr<vm::IAddFileItemAction> action) = 0;
		virtual void NotifySelectedSolutionItem(vl::Ptr<vm::ISolutionItemModel> solutionItem) = 0;
		virtual vl::Ptr<vm::IProjectFactoryModel> GetProjectFactory(vl::WString id) = 0;
		virtual vl::Ptr<vm::IFileFactoryModel> GetFileFactory(vl::WString id) = 0;
		virtual vl::Ptr<vm::IEditorFactoryModel> GetEditorFactory(vl::WString id) = 0;
		virtual vl::collections::LazyList<vl::Ptr<vm::IEditorFactoryModel>> GetAssociatedEditors(vl::Ptr<vm::IEditorContentFactoryModel> contentFactory) = 0;
		virtual void OpenSolution(vl::WString filePath) = 0;
		virtual void NewSolution(vl::WString filePath) = 0;
		virtual void CloseSolution() = 0;
		virtual vl::Ptr<vm::IProjectModel> AddNewProject(bool createNewSolution, vl::Ptr<vm::IProjectFactoryModel> projectFactory, vl::WString projectName, vl::WString solutionDirectory, vl::WString solutionName) = 0;
		virtual vl::Ptr<vm::IFileModel> AddNewFile(vl::Ptr<vm::IAddFileItemAction> action, vl::Ptr<vm::IFileFactoryModel> fileFactory, vl::WString fileDirectory, vl::WString fileName) = 0;
		virtual void AddExistingFiles(vl::Ptr<vm::IAddFileItemAction> action, vl::collections::LazyList<vl::Ptr<vm::StudioFileReference>> files) = 0;
		virtual void RenameFile(vl::Ptr<vm::IRenameItemAction> action, vl::Ptr<vm::ISolutionItemModel> solutionItem, vl::WString newName) = 0;
		virtual void RemoveFile(vl::Ptr<vm::IRemoveItemAction> action, vl::Ptr<vm::ISolutionItemModel> solutionItem) = 0;
		virtual void OpenBrowser(vl::WString url) = 0;
		virtual void PromptError(vl::WString message) = 0;
		virtual bool SafeExecute(vl::Func<void()> procedure) = 0;
		virtual void ExecuteSaveItems(vl::collections::LazyList<vl::Ptr<vm::ISaveItemAction>> saveItems) = 0;
	};

}
namespace darkskin
{
	template<typename TImpl>
	class BottomScrollButtonTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		BottomScrollButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::BottomScrollButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ButtonTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::ButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class CheckBoxTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		CheckBoxTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::CheckBoxTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class CheckItemBackgroundTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		CheckItemBackgroundTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::CheckItemBackgroundTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class CheckTextListTemplate_ : public vl::presentation::templates::GuiTextListTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTextListTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiTextListTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		CheckTextListTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTextListTemplate>(L"darkskin::CheckTextListTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ComboBoxTemplate_ : public vl::presentation::templates::GuiDateComboBoxTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiDateComboBoxTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiDateComboBoxTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ComboBoxTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiDateComboBoxTemplate>(L"darkskin::ComboBoxTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class DatePickerTemplate_ : public vl::presentation::templates::GuiDatePickerTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiDatePickerTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiDatePickerTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		DatePickerTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiDatePickerTemplate>(L"darkskin::DatePickerTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class DocumentLabelTemplate_ : public vl::presentation::templates::GuiControlTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiControlTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		DocumentLabelTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>(L"darkskin::DocumentLabelTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ExpandingDecoratorTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ExpandingDecoratorTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::ExpandingDecoratorTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class GroupBoxTemplate_ : public vl::presentation::templates::GuiControlTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiControlTemplate* self;
		vl::presentation::compositions::GuiBoundsComposition* titleBounds;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(titleBounds);
			}
			else
			{
			}
		}
	public:
		GroupBoxTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>(L"darkskin::GroupBoxTemplate")
			,container(0)
			,self(0)
			,titleBounds(0)
		{
		}
	};

	template<typename TImpl>
	class HScrollHandleTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		HScrollHandleTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::HScrollHandleTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class HScrollTemplate_ : public vl::presentation::templates::GuiScrollTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiPartialViewComposition* handle;
		vl::presentation::compositions::GuiBoundsComposition* handleContainer;
		vl::presentation::templates::GuiScrollTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(handle);
				GUI_INSTANCE_REFERENCE(handleContainer);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		HScrollTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>(L"darkskin::HScrollTemplate")
			,handle(0)
			,handleContainer(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class HTrackerTemplate_ : public vl::presentation::templates::GuiScrollTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* handle;
		vl::presentation::templates::GuiScrollTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(handle);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		HTrackerTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>(L"darkskin::HTrackerTemplate")
			,handle(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ItemBackgroundTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ItemBackgroundTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::ItemBackgroundTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class LabelTemplate_ : public vl::presentation::templates::GuiLabelTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiLabelTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiLabelTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		LabelTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiLabelTemplate>(L"darkskin::LabelTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class LeftScrollButtonTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		LeftScrollButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::LeftScrollButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ListViewColumnHeaderTemplate_ : public vl::presentation::templates::GuiListViewColumnHeaderTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiListViewColumnHeaderTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::controls::GuiSelectableButton* buttonArrow;
		vl::presentation::templates::GuiListViewColumnHeaderTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonArrow);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ListViewColumnHeaderTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiListViewColumnHeaderTemplate>(L"darkskin::ListViewColumnHeaderTemplate")
			,buttonArrow(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ListViewTemplate_ : public vl::presentation::templates::GuiListViewTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiListViewTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiListViewTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ListViewTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiListViewTemplate>(L"darkskin::ListViewTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class MenuBarButtonTemplate_ : public vl::presentation::templates::GuiToolstripButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiToolstripButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		MenuBarButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>(L"darkskin::MenuBarButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class MenuItemButtonTemplate_ : public vl::presentation::templates::GuiToolstripButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiToolstripButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		MenuItemButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>(L"darkskin::MenuItemButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class MenuSplitterTemplate_ : public vl::presentation::templates::GuiControlTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
			}
			else
			{
			}
		}
	public:
		MenuSplitterTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>(L"darkskin::MenuSplitterTemplate")
		{
		}
	};

	template<typename TImpl>
	class MultilineTextBoxTemplate_ : public vl::presentation::templates::GuiMultilineTextBoxTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiMultilineTextBoxTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiMultilineTextBoxTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		MultilineTextBoxTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiMultilineTextBoxTemplate>(L"darkskin::MultilineTextBoxTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ProgressBarTemplate_ : public vl::presentation::templates::GuiScrollTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiScrollTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ProgressBarTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>(L"darkskin::ProgressBarTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class RadioButtonTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		RadioButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::RadioButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class RadioTextListTemplate_ : public vl::presentation::templates::GuiTextListTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTextListTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiTextListTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		RadioTextListTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTextListTemplate>(L"darkskin::RadioTextListTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class RightScrollButtonTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		RightScrollButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::RightScrollButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ScrollViewTemplate_ : public vl::presentation::templates::GuiScrollViewTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollViewTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiScrollViewTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ScrollViewTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollViewTemplate>(L"darkskin::ScrollViewTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class SinglelineTextBoxTemplate_ : public vl::presentation::templates::GuiSinglelineTextBoxTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSinglelineTextBoxTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiSinglelineTextBoxTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		SinglelineTextBoxTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSinglelineTextBoxTemplate>(L"darkskin::SinglelineTextBoxTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class TabDropdownTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		TabDropdownTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::TabDropdownTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class TabHeaderTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		TabHeaderTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::TabHeaderTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class TabTemplate_ : public vl::presentation::templates::GuiTabTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTabTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::compositions::GuiBoundsComposition* header;
		vl::presentation::templates::GuiTabTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(header);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		TabTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTabTemplate>(L"darkskin::TabTemplate")
			,container(0)
			,header(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class TextListTemplate_ : public vl::presentation::templates::GuiTextListTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTextListTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiTextListTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		TextListTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTextListTemplate>(L"darkskin::TextListTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ToolstripButtonTemplate_ : public vl::presentation::templates::GuiToolstripButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiToolstripButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ToolstripButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>(L"darkskin::ToolstripButtonTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ToolstripDropdownButtonTemplate_ : public vl::presentation::templates::GuiToolstripButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiToolstripButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ToolstripDropdownButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>(L"darkskin::ToolstripDropdownButtonTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ToolstripMenuTemplate_ : public vl::presentation::templates::GuiMenuTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiMenuTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
			}
			else
			{
			}
		}
	public:
		ToolstripMenuTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiMenuTemplate>(L"darkskin::ToolstripMenuTemplate")
			,container(0)
		{
		}
	};

	template<typename TImpl>
	class ToolstripSplitArrowTemplate_ : public vl::presentation::templates::GuiSelectableButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiSelectableButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ToolstripSplitArrowTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiSelectableButtonTemplate>(L"darkskin::ToolstripSplitArrowTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ToolstripSplitButtonTemplate_ : public vl::presentation::templates::GuiToolstripButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::controls::GuiSelectableButton* buttonArrow;
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiToolstripButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonArrow);
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		ToolstripSplitButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiToolstripButtonTemplate>(L"darkskin::ToolstripSplitButtonTemplate")
			,buttonArrow(0)
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class ToolstripSplitterTemplate_ : public vl::presentation::templates::GuiControlTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
			}
			else
			{
			}
		}
	public:
		ToolstripSplitterTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>(L"darkskin::ToolstripSplitterTemplate")
		{
		}
	};

	template<typename TImpl>
	class ToolstripTemplate_ : public vl::presentation::templates::GuiControlTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
			}
			else
			{
			}
		}
	public:
		ToolstripTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiControlTemplate>(L"darkskin::ToolstripTemplate")
		{
		}
	};

	template<typename TImpl>
	class TooltipTemplate_ : public vl::presentation::templates::GuiWindowTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiWindowTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
			}
			else
			{
			}
		}
	public:
		TooltipTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiWindowTemplate>(L"darkskin::TooltipTemplate")
			,container(0)
		{
		}
	};

	template<typename TImpl>
	class TopScrollButtonTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		TopScrollButtonTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::TopScrollButtonTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class TreeViewTemplate_ : public vl::presentation::templates::GuiTreeViewTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTreeViewTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiTreeViewTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		TreeViewTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiTreeViewTemplate>(L"darkskin::TreeViewTemplate")
			,container(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class VScrollHandleTemplate_ : public vl::presentation::templates::GuiButtonTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiButtonTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		VScrollHandleTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiButtonTemplate>(L"darkskin::VScrollHandleTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class VScrollTemplate_ : public vl::presentation::templates::GuiScrollTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiPartialViewComposition* handle;
		vl::presentation::compositions::GuiBoundsComposition* handleContainer;
		vl::presentation::templates::GuiScrollTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(handle);
				GUI_INSTANCE_REFERENCE(handleContainer);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		VScrollTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>(L"darkskin::VScrollTemplate")
			,handle(0)
			,handleContainer(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class VTrackerTemplate_ : public vl::presentation::templates::GuiScrollTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* handle;
		vl::presentation::templates::GuiScrollTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(handle);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		VTrackerTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiScrollTemplate>(L"darkskin::VTrackerTemplate")
			,handle(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class WindowTemplate_ : public vl::presentation::templates::GuiWindowTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiWindowTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::compositions::GuiBoundsComposition* container;
		vl::presentation::templates::GuiWindowTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(container);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		WindowTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiWindowTemplate>(L"darkskin::WindowTemplate")
			,container(0)
			,self(0)
		{
		}
	};

}
namespace ui
{
	template<typename TImpl>
	class AboutWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioModel> ViewModel_;
	protected:
		vl::presentation::controls::GuiDocumentViewer* documentViewer;
		vl::presentation::controls::GuiWindow* self;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(documentViewer);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		AboutWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::AboutWindow")
			,vl::presentation::controls::GuiWindow([](){
vl::collections::List<vl::reflection::description::ITypeDescriptor*> types;
types.Add(vl::reflection::description::GetTypeDescriptor<darkskin::WindowTemplate>());
auto factory = vl::presentation::templates::GuiTemplate::IFactory::CreateTemplateFactory(types);
auto style = new vl::presentation::templates::GuiWindowTemplate_StyleProvider(factory);
return style;
}())
			,documentViewer(0)
			,self(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	template<typename TImpl>
	class AddExistingFilesWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioModel> ViewModel_;
		Ptr<vm::IStudioAddExistingFilesModel> OperationModel_;
		Ptr<vm::IAddFileItemAction> Action_;
	protected:
		vl::presentation::controls::GuiButton* buttonAdd;
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonOK;
		vl::presentation::controls::GuiButton* buttonRemove;
		vl::presentation::controls::GuiBindableDataGrid* dataGridFiles;
		vl::presentation::controls::GuiOpenFileDialog* dialogOpen;
		vl::presentation::controls::GuiWindow* self;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel, Ptr<vm::IStudioAddExistingFilesModel> OperationModel, Ptr<vm::IAddFileItemAction> Action)
		{
			ViewModel_ = ViewModel;
			OperationModel_ = OperationModel;
			Action_ = Action;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonAdd);
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonOK);
				GUI_INSTANCE_REFERENCE(buttonRemove);
				GUI_INSTANCE_REFERENCE(dataGridFiles);
				GUI_INSTANCE_REFERENCE(dialogOpen);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
				ViewModel_ = 0;
				OperationModel_ = 0;
				Action_ = 0;
			}
		}
	public:
		AddExistingFilesWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::AddExistingFilesWindow")
			,vl::presentation::controls::GuiWindow([](){
vl::collections::List<vl::reflection::description::ITypeDescriptor*> types;
types.Add(vl::reflection::description::GetTypeDescriptor<darkskin::WindowTemplate>());
auto factory = vl::presentation::templates::GuiTemplate::IFactory::CreateTemplateFactory(types);
auto style = new vl::presentation::templates::GuiWindowTemplate_StyleProvider(factory);
return style;
}())
			,buttonAdd(0)
			,buttonCancel(0)
			,buttonOK(0)
			,buttonRemove(0)
			,dataGridFiles(0)
			,dialogOpen(0)
			,self(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}

		Ptr<vm::IStudioAddExistingFilesModel> GetOperationModel()
		{
			return OperationModel_;
		}

		Ptr<vm::IAddFileItemAction> GetAction()
		{
			return Action_;
		}
	};

	template<typename TImpl>
	class FileReferenceFactoryColumnTemplate_ : public vl::presentation::templates::GuiGridVisualizerTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridVisualizerTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiGridVisualizerTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		FileReferenceFactoryColumnTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridVisualizerTemplate>(L"ui::FileReferenceFactoryColumnTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class FileReferenceFactoryEditorTemplate_ : public vl::presentation::templates::GuiGridEditorTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridEditorTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioAddExistingFilesModel> OperationModel_;
	protected:
		vl::presentation::controls::GuiComboBoxListControl* comboBoxFactory;
		vl::presentation::templates::GuiGridEditorTemplate* self;

		void InitializeComponents(Ptr<vm::IStudioAddExistingFilesModel> OperationModel)
		{
			OperationModel_ = OperationModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(comboBoxFactory);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
				OperationModel_ = 0;
			}
		}
	public:
		FileReferenceFactoryEditorTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridEditorTemplate>(L"ui::FileReferenceFactoryEditorTemplate")
			,comboBoxFactory(0)
			,self(0)
		{
		}

		Ptr<vm::IStudioAddExistingFilesModel> GetOperationModel()
		{
			return OperationModel_;
		}
	};

	template<typename TImpl>
	class FileReferenceFolderColumnTemplate_ : public vl::presentation::templates::GuiGridVisualizerTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridVisualizerTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiGridVisualizerTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		FileReferenceFolderColumnTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridVisualizerTemplate>(L"ui::FileReferenceFolderColumnTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class FileReferenceNameColumnTemplate_ : public vl::presentation::templates::GuiGridVisualizerTemplate, public vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridVisualizerTemplate>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		vl::presentation::templates::GuiGridVisualizerTemplate* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		FileReferenceNameColumnTemplate_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::templates::GuiGridVisualizerTemplate>(L"ui::FileReferenceNameColumnTemplate")
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class MainWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioModel> ViewModel_;
	protected:
		vl::presentation::compositions::GuiCellComposition* cellSplitter;
		vl::presentation::controls::GuiToolstripCommand* commandFileAddExistingFiles;
		vl::presentation::controls::GuiToolstripCommand* commandFileAddNewFile;
		vl::presentation::controls::GuiToolstripCommand* commandFileCloseSolution;
		vl::presentation::controls::GuiToolstripCommand* commandFileExit;
		vl::presentation::controls::GuiToolstripCommand* commandFileNewProject;
		vl::presentation::controls::GuiToolstripCommand* commandFileOpen;
		vl::presentation::controls::GuiToolstripCommand* commandFileOpenProject;
		vl::presentation::controls::GuiToolstripCommand* commandFileOpenWith;
		vl::presentation::controls::GuiToolstripCommand* commandFileRemove;
		vl::presentation::controls::GuiToolstripCommand* commandFileRename;
		vl::presentation::controls::GuiToolstripCommand* commandFileSave;
		vl::presentation::controls::GuiToolstripCommand* commandFileSaveAll;
		vl::presentation::controls::GuiToolstripCommand* commandHelpAbout;
		vl::presentation::compositions::GuiTableComposition* tableMain;
		vl::presentation::controls::GuiToolstripMenu* toolstripMenuSolutionItem;
		vl::presentation::controls::GuiBindableTreeView* treeViewSolutionItem;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(cellSplitter);
				GUI_INSTANCE_REFERENCE(commandFileAddExistingFiles);
				GUI_INSTANCE_REFERENCE(commandFileAddNewFile);
				GUI_INSTANCE_REFERENCE(commandFileCloseSolution);
				GUI_INSTANCE_REFERENCE(commandFileExit);
				GUI_INSTANCE_REFERENCE(commandFileNewProject);
				GUI_INSTANCE_REFERENCE(commandFileOpen);
				GUI_INSTANCE_REFERENCE(commandFileOpenProject);
				GUI_INSTANCE_REFERENCE(commandFileOpenWith);
				GUI_INSTANCE_REFERENCE(commandFileRemove);
				GUI_INSTANCE_REFERENCE(commandFileRename);
				GUI_INSTANCE_REFERENCE(commandFileSave);
				GUI_INSTANCE_REFERENCE(commandFileSaveAll);
				GUI_INSTANCE_REFERENCE(commandHelpAbout);
				GUI_INSTANCE_REFERENCE(tableMain);
				GUI_INSTANCE_REFERENCE(toolstripMenuSolutionItem);
				GUI_INSTANCE_REFERENCE(treeViewSolutionItem);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		MainWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::MainWindow")
			,vl::presentation::controls::GuiWindow([](){
vl::collections::List<vl::reflection::description::ITypeDescriptor*> types;
types.Add(vl::reflection::description::GetTypeDescriptor<darkskin::WindowTemplate>());
auto factory = vl::presentation::templates::GuiTemplate::IFactory::CreateTemplateFactory(types);
auto style = new vl::presentation::templates::GuiWindowTemplate_StyleProvider(factory);
return style;
}())
			,cellSplitter(0)
			,commandFileAddExistingFiles(0)
			,commandFileAddNewFile(0)
			,commandFileCloseSolution(0)
			,commandFileExit(0)
			,commandFileNewProject(0)
			,commandFileOpen(0)
			,commandFileOpenProject(0)
			,commandFileOpenWith(0)
			,commandFileRemove(0)
			,commandFileRename(0)
			,commandFileSave(0)
			,commandFileSaveAll(0)
			,commandHelpAbout(0)
			,tableMain(0)
			,toolstripMenuSolutionItem(0)
			,treeViewSolutionItem(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	template<typename TImpl>
	class NewFileWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioModel> ViewModel_;
		Ptr<vm::IStudioNewFileModel> OperationModel_;
		Ptr<vm::IAddFileItemAction> Action_;
	protected:
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonCreate;
		vl::presentation::controls::GuiBindableListView* listViewFileTemplate;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxFileName;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxLocation;
		vl::presentation::controls::GuiBindableTreeView* treeViewProjectTemplate;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel, Ptr<vm::IStudioNewFileModel> OperationModel, Ptr<vm::IAddFileItemAction> Action)
		{
			ViewModel_ = ViewModel;
			OperationModel_ = OperationModel;
			Action_ = Action;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonCreate);
				GUI_INSTANCE_REFERENCE(listViewFileTemplate);
				GUI_INSTANCE_REFERENCE(textBoxFileName);
				GUI_INSTANCE_REFERENCE(textBoxLocation);
				GUI_INSTANCE_REFERENCE(treeViewProjectTemplate);
			}
			else
			{
				ViewModel_ = 0;
				OperationModel_ = 0;
				Action_ = 0;
			}
		}
	public:
		NewFileWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::NewFileWindow")
			,vl::presentation::controls::GuiWindow([](){
vl::collections::List<vl::reflection::description::ITypeDescriptor*> types;
types.Add(vl::reflection::description::GetTypeDescriptor<darkskin::WindowTemplate>());
auto factory = vl::presentation::templates::GuiTemplate::IFactory::CreateTemplateFactory(types);
auto style = new vl::presentation::templates::GuiWindowTemplate_StyleProvider(factory);
return style;
}())
			,buttonCancel(0)
			,buttonCreate(0)
			,listViewFileTemplate(0)
			,textBoxFileName(0)
			,textBoxLocation(0)
			,treeViewProjectTemplate(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}

		Ptr<vm::IStudioNewFileModel> GetOperationModel()
		{
			return OperationModel_;
		}

		Ptr<vm::IAddFileItemAction> GetAction()
		{
			return Action_;
		}
	};

	template<typename TImpl>
	class NewProjectWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioModel> ViewModel_;
	protected:
		vl::presentation::controls::GuiButton* buttonBrowse;
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonCreate;
		vl::presentation::controls::GuiComboBoxListControl* comboSolution;
		vl::presentation::controls::GuiBindableListView* listViewProjectTemplate;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxLocation;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxProjectName;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxSolutionName;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonBrowse);
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonCreate);
				GUI_INSTANCE_REFERENCE(comboSolution);
				GUI_INSTANCE_REFERENCE(listViewProjectTemplate);
				GUI_INSTANCE_REFERENCE(textBoxLocation);
				GUI_INSTANCE_REFERENCE(textBoxProjectName);
				GUI_INSTANCE_REFERENCE(textBoxSolutionName);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		NewProjectWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::NewProjectWindow")
			,vl::presentation::controls::GuiWindow([](){
vl::collections::List<vl::reflection::description::ITypeDescriptor*> types;
types.Add(vl::reflection::description::GetTypeDescriptor<darkskin::WindowTemplate>());
auto factory = vl::presentation::templates::GuiTemplate::IFactory::CreateTemplateFactory(types);
auto style = new vl::presentation::templates::GuiWindowTemplate_StyleProvider(factory);
return style;
}())
			,buttonBrowse(0)
			,buttonCancel(0)
			,buttonCreate(0)
			,comboSolution(0)
			,listViewProjectTemplate(0)
			,textBoxLocation(0)
			,textBoxProjectName(0)
			,textBoxSolutionName(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	template<typename TImpl>
	class RenameFileWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<vm::IStudioModel> ViewModel_;
		Ptr<vm::ISolutionItemModel> SolutionItem_;
		Ptr<vm::IRenameItemAction> Action_;
	protected:
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonRename;
		vl::presentation::controls::GuiWindow* self;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxName;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxNew;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxOriginal;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel, Ptr<vm::ISolutionItemModel> SolutionItem, Ptr<vm::IRenameItemAction> Action)
		{
			ViewModel_ = ViewModel;
			SolutionItem_ = SolutionItem;
			Action_ = Action;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonRename);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(textBoxName);
				GUI_INSTANCE_REFERENCE(textBoxNew);
				GUI_INSTANCE_REFERENCE(textBoxOriginal);
			}
			else
			{
				ViewModel_ = 0;
				SolutionItem_ = 0;
				Action_ = 0;
			}
		}
	public:
		RenameFileWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::RenameFileWindow")
			,vl::presentation::controls::GuiWindow([](){
vl::collections::List<vl::reflection::description::ITypeDescriptor*> types;
types.Add(vl::reflection::description::GetTypeDescriptor<darkskin::WindowTemplate>());
auto factory = vl::presentation::templates::GuiTemplate::IFactory::CreateTemplateFactory(types);
auto style = new vl::presentation::templates::GuiWindowTemplate_StyleProvider(factory);
return style;
}())
			,buttonCancel(0)
			,buttonRename(0)
			,self(0)
			,textBoxName(0)
			,textBoxNew(0)
			,textBoxOriginal(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}

		Ptr<vm::ISolutionItemModel> GetSolutionItem()
		{
			return SolutionItem_;
		}

		Ptr<vm::IRenameItemAction> GetAction()
		{
			return Action_;
		}
	};

}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
			DECL_TYPE_INFO(vm::IAddFileItemAction)
			DECL_TYPE_INFO(vm::IEditorContentFactoryModel)
			DECL_TYPE_INFO(vm::IEditorContentModel)
			DECL_TYPE_INFO(vm::IEditorFactoryModel)
			DECL_TYPE_INFO(vm::IEditorFileContentModel)
			DECL_TYPE_INFO(vm::IEditorModel)
			DECL_TYPE_INFO(vm::IFileFactoryModel)
			DECL_TYPE_INFO(vm::IFileModel)
			DECL_TYPE_INFO(vm::IFolderModel)
			DECL_TYPE_INFO(vm::IMacroEnvironment)
			DECL_TYPE_INFO(vm::IOpenInEditorItemAction)
			DECL_TYPE_INFO(vm::IProjectFactoryModel)
			DECL_TYPE_INFO(vm::IProjectModel)
			DECL_TYPE_INFO(vm::IRemoveItemAction)
			DECL_TYPE_INFO(vm::IRenameItemAction)
			DECL_TYPE_INFO(vm::ISaveItemAction)
			DECL_TYPE_INFO(vm::ISolutionItemModel)
			DECL_TYPE_INFO(vm::ISolutionModel)
			DECL_TYPE_INFO(vm::IStudioAddExistingFilesModel)
			DECL_TYPE_INFO(vm::IStudioModel)
			DECL_TYPE_INFO(vm::IStudioNewFileModel)
			DECL_TYPE_INFO(vm::ITextTemplate)
			DECL_TYPE_INFO(vm::StudioFileReference)
			DECL_TYPE_INFO(darkskin::BottomScrollButtonTemplate)
			DECL_TYPE_INFO(darkskin::ButtonTemplate)
			DECL_TYPE_INFO(darkskin::CheckBoxTemplate)
			DECL_TYPE_INFO(darkskin::CheckItemBackgroundTemplate)
			DECL_TYPE_INFO(darkskin::CheckTextListTemplate)
			DECL_TYPE_INFO(darkskin::ComboBoxTemplate)
			DECL_TYPE_INFO(darkskin::DatePickerTemplate)
			DECL_TYPE_INFO(darkskin::DocumentLabelTemplate)
			DECL_TYPE_INFO(darkskin::ExpandingDecoratorTemplate)
			DECL_TYPE_INFO(darkskin::GroupBoxTemplate)
			DECL_TYPE_INFO(darkskin::HScrollHandleTemplate)
			DECL_TYPE_INFO(darkskin::HScrollTemplate)
			DECL_TYPE_INFO(darkskin::HTrackerTemplate)
			DECL_TYPE_INFO(darkskin::ItemBackgroundTemplate)
			DECL_TYPE_INFO(darkskin::LabelTemplate)
			DECL_TYPE_INFO(darkskin::LeftScrollButtonTemplate)
			DECL_TYPE_INFO(darkskin::ListViewColumnHeaderTemplate)
			DECL_TYPE_INFO(darkskin::ListViewTemplate)
			DECL_TYPE_INFO(darkskin::MenuBarButtonTemplate)
			DECL_TYPE_INFO(darkskin::MenuItemButtonTemplate)
			DECL_TYPE_INFO(darkskin::MenuSplitterTemplate)
			DECL_TYPE_INFO(darkskin::MultilineTextBoxTemplate)
			DECL_TYPE_INFO(darkskin::ProgressBarTemplate)
			DECL_TYPE_INFO(darkskin::RadioButtonTemplate)
			DECL_TYPE_INFO(darkskin::RadioTextListTemplate)
			DECL_TYPE_INFO(darkskin::RightScrollButtonTemplate)
			DECL_TYPE_INFO(darkskin::ScrollViewTemplate)
			DECL_TYPE_INFO(darkskin::SinglelineTextBoxTemplate)
			DECL_TYPE_INFO(darkskin::TabDropdownTemplate)
			DECL_TYPE_INFO(darkskin::TabHeaderTemplate)
			DECL_TYPE_INFO(darkskin::TabTemplate)
			DECL_TYPE_INFO(darkskin::TextListTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripButtonTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripDropdownButtonTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripMenuTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripSplitArrowTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripSplitButtonTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripSplitterTemplate)
			DECL_TYPE_INFO(darkskin::ToolstripTemplate)
			DECL_TYPE_INFO(darkskin::TooltipTemplate)
			DECL_TYPE_INFO(darkskin::TopScrollButtonTemplate)
			DECL_TYPE_INFO(darkskin::TreeViewTemplate)
			DECL_TYPE_INFO(darkskin::VScrollHandleTemplate)
			DECL_TYPE_INFO(darkskin::VScrollTemplate)
			DECL_TYPE_INFO(darkskin::VTrackerTemplate)
			DECL_TYPE_INFO(darkskin::WindowTemplate)
			DECL_TYPE_INFO(ui::AboutWindow)
			DECL_TYPE_INFO(ui::AddExistingFilesWindow)
			DECL_TYPE_INFO(ui::FileReferenceFactoryColumnTemplate)
			DECL_TYPE_INFO(ui::FileReferenceFactoryEditorTemplate)
			DECL_TYPE_INFO(ui::FileReferenceFolderColumnTemplate)
			DECL_TYPE_INFO(ui::FileReferenceNameColumnTemplate)
			DECL_TYPE_INFO(ui::MainWindow)
			DECL_TYPE_INFO(ui::NewFileWindow)
			DECL_TYPE_INFO(ui::NewProjectWindow)
			DECL_TYPE_INFO(ui::RenameFileWindow)

		}
	}
}
namespace darkskin
{
	class BottomScrollButtonTemplate : public darkskin::BottomScrollButtonTemplate_<darkskin::BottomScrollButtonTemplate>
	{
		friend class darkskin::BottomScrollButtonTemplate_<darkskin::BottomScrollButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::BottomScrollButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		BottomScrollButtonTemplate();
	};
}


namespace darkskin
{
	class ButtonTemplate : public darkskin::ButtonTemplate_<darkskin::ButtonTemplate>
	{
		friend class darkskin::ButtonTemplate_<darkskin::ButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ButtonTemplate();
	};
}


namespace darkskin
{
	class CheckBoxTemplate : public darkskin::CheckBoxTemplate_<darkskin::CheckBoxTemplate>
	{
		friend class darkskin::CheckBoxTemplate_<darkskin::CheckBoxTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::CheckBoxTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		CheckBoxTemplate();
	};
}


namespace darkskin
{
	class CheckItemBackgroundTemplate : public darkskin::CheckItemBackgroundTemplate_<darkskin::CheckItemBackgroundTemplate>
	{
		friend class darkskin::CheckItemBackgroundTemplate_<darkskin::CheckItemBackgroundTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::CheckItemBackgroundTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		CheckItemBackgroundTemplate();
	};
}


namespace darkskin
{
	class CheckTextListTemplate : public darkskin::CheckTextListTemplate_<darkskin::CheckTextListTemplate>
	{
		friend class darkskin::CheckTextListTemplate_<darkskin::CheckTextListTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::CheckTextListTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		CheckTextListTemplate();
	};
}


namespace darkskin
{
	class ComboBoxTemplate : public darkskin::ComboBoxTemplate_<darkskin::ComboBoxTemplate>
	{
		friend class darkskin::ComboBoxTemplate_<darkskin::ComboBoxTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ComboBoxTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ComboBoxTemplate();
	};
}


namespace darkskin
{
	class DatePickerTemplate : public darkskin::DatePickerTemplate_<darkskin::DatePickerTemplate>
	{
		friend class darkskin::DatePickerTemplate_<darkskin::DatePickerTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::DatePickerTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		DatePickerTemplate();
	};
}


namespace darkskin
{
	class DocumentLabelTemplate : public darkskin::DocumentLabelTemplate_<darkskin::DocumentLabelTemplate>
	{
		friend class darkskin::DocumentLabelTemplate_<darkskin::DocumentLabelTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::DocumentLabelTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		DocumentLabelTemplate();
	};
}


namespace darkskin
{
	class ExpandingDecoratorTemplate : public darkskin::ExpandingDecoratorTemplate_<darkskin::ExpandingDecoratorTemplate>
	{
		friend class darkskin::ExpandingDecoratorTemplate_<darkskin::ExpandingDecoratorTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ExpandingDecoratorTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ExpandingDecoratorTemplate();
	};
}


namespace darkskin
{
	class GroupBoxTemplate : public darkskin::GroupBoxTemplate_<darkskin::GroupBoxTemplate>
	{
		friend class darkskin::GroupBoxTemplate_<darkskin::GroupBoxTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::GroupBoxTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		GroupBoxTemplate();
	};
}


namespace darkskin
{
	class HScrollHandleTemplate : public darkskin::HScrollHandleTemplate_<darkskin::HScrollHandleTemplate>
	{
		friend class darkskin::HScrollHandleTemplate_<darkskin::HScrollHandleTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::HScrollHandleTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		HScrollHandleTemplate();
	};
}


namespace darkskin
{
	class ItemBackgroundTemplate : public darkskin::ItemBackgroundTemplate_<darkskin::ItemBackgroundTemplate>
	{
		friend class darkskin::ItemBackgroundTemplate_<darkskin::ItemBackgroundTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ItemBackgroundTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ItemBackgroundTemplate();
	};
}


namespace darkskin
{
	class LabelTemplate : public darkskin::LabelTemplate_<darkskin::LabelTemplate>
	{
		friend class darkskin::LabelTemplate_<darkskin::LabelTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::LabelTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		LabelTemplate();
	};
}


namespace darkskin
{
	class LeftScrollButtonTemplate : public darkskin::LeftScrollButtonTemplate_<darkskin::LeftScrollButtonTemplate>
	{
		friend class darkskin::LeftScrollButtonTemplate_<darkskin::LeftScrollButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::LeftScrollButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		LeftScrollButtonTemplate();
	};
}


namespace darkskin
{
	class ListViewColumnHeaderTemplate : public darkskin::ListViewColumnHeaderTemplate_<darkskin::ListViewColumnHeaderTemplate>
	{
		friend class darkskin::ListViewColumnHeaderTemplate_<darkskin::ListViewColumnHeaderTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ListViewColumnHeaderTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ListViewColumnHeaderTemplate();
	};
}


namespace darkskin
{
	class ListViewTemplate : public darkskin::ListViewTemplate_<darkskin::ListViewTemplate>
	{
		friend class darkskin::ListViewTemplate_<darkskin::ListViewTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ListViewTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ListViewTemplate();
	};
}


namespace darkskin
{
	class MenuBarButtonTemplate : public darkskin::MenuBarButtonTemplate_<darkskin::MenuBarButtonTemplate>
	{
		friend class darkskin::MenuBarButtonTemplate_<darkskin::MenuBarButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::MenuBarButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		MenuBarButtonTemplate();
	};
}


namespace darkskin
{
	class MenuItemButtonTemplate : public darkskin::MenuItemButtonTemplate_<darkskin::MenuItemButtonTemplate>
	{
		friend class darkskin::MenuItemButtonTemplate_<darkskin::MenuItemButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::MenuItemButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		MenuItemButtonTemplate();
	};
}


namespace darkskin
{
	class MenuSplitterTemplate : public darkskin::MenuSplitterTemplate_<darkskin::MenuSplitterTemplate>
	{
		friend class darkskin::MenuSplitterTemplate_<darkskin::MenuSplitterTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::MenuSplitterTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		MenuSplitterTemplate();
	};
}


namespace darkskin
{
	class MultilineTextBoxTemplate : public darkskin::MultilineTextBoxTemplate_<darkskin::MultilineTextBoxTemplate>
	{
		friend class darkskin::MultilineTextBoxTemplate_<darkskin::MultilineTextBoxTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::MultilineTextBoxTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		MultilineTextBoxTemplate();
	};
}


namespace darkskin
{
	class ProgressBarTemplate : public darkskin::ProgressBarTemplate_<darkskin::ProgressBarTemplate>
	{
		friend class darkskin::ProgressBarTemplate_<darkskin::ProgressBarTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ProgressBarTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ProgressBarTemplate();
	};
}


namespace darkskin
{
	class RadioButtonTemplate : public darkskin::RadioButtonTemplate_<darkskin::RadioButtonTemplate>
	{
		friend class darkskin::RadioButtonTemplate_<darkskin::RadioButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::RadioButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		RadioButtonTemplate();
	};
}


namespace darkskin
{
	class RadioTextListTemplate : public darkskin::RadioTextListTemplate_<darkskin::RadioTextListTemplate>
	{
		friend class darkskin::RadioTextListTemplate_<darkskin::RadioTextListTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::RadioTextListTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		RadioTextListTemplate();
	};
}


namespace darkskin
{
	class RightScrollButtonTemplate : public darkskin::RightScrollButtonTemplate_<darkskin::RightScrollButtonTemplate>
	{
		friend class darkskin::RightScrollButtonTemplate_<darkskin::RightScrollButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::RightScrollButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		RightScrollButtonTemplate();
	};
}


namespace darkskin
{
	class ScrollViewTemplate : public darkskin::ScrollViewTemplate_<darkskin::ScrollViewTemplate>
	{
		friend class darkskin::ScrollViewTemplate_<darkskin::ScrollViewTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ScrollViewTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ScrollViewTemplate();
	};
}


namespace darkskin
{
	class SinglelineTextBoxTemplate : public darkskin::SinglelineTextBoxTemplate_<darkskin::SinglelineTextBoxTemplate>
	{
		friend class darkskin::SinglelineTextBoxTemplate_<darkskin::SinglelineTextBoxTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::SinglelineTextBoxTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		SinglelineTextBoxTemplate();
	};
}


namespace darkskin
{
	class TabDropdownTemplate : public darkskin::TabDropdownTemplate_<darkskin::TabDropdownTemplate>
	{
		friend class darkskin::TabDropdownTemplate_<darkskin::TabDropdownTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TabDropdownTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TabDropdownTemplate();
	};
}


namespace darkskin
{
	class TabHeaderTemplate : public darkskin::TabHeaderTemplate_<darkskin::TabHeaderTemplate>
	{
		friend class darkskin::TabHeaderTemplate_<darkskin::TabHeaderTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TabHeaderTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TabHeaderTemplate();
	};
}


namespace darkskin
{
	class TabTemplate : public darkskin::TabTemplate_<darkskin::TabTemplate>
	{
		friend class darkskin::TabTemplate_<darkskin::TabTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TabTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TabTemplate();
	};
}


namespace darkskin
{
	class TextListTemplate : public darkskin::TextListTemplate_<darkskin::TextListTemplate>
	{
		friend class darkskin::TextListTemplate_<darkskin::TextListTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TextListTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TextListTemplate();
	};
}


namespace darkskin
{
	class ToolstripButtonTemplate : public darkskin::ToolstripButtonTemplate_<darkskin::ToolstripButtonTemplate>
	{
		friend class darkskin::ToolstripButtonTemplate_<darkskin::ToolstripButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripButtonTemplate();
	};
}


namespace darkskin
{
	class ToolstripDropdownButtonTemplate : public darkskin::ToolstripDropdownButtonTemplate_<darkskin::ToolstripDropdownButtonTemplate>
	{
		friend class darkskin::ToolstripDropdownButtonTemplate_<darkskin::ToolstripDropdownButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripDropdownButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripDropdownButtonTemplate();
	};
}


namespace darkskin
{
	class ToolstripMenuTemplate : public darkskin::ToolstripMenuTemplate_<darkskin::ToolstripMenuTemplate>
	{
		friend class darkskin::ToolstripMenuTemplate_<darkskin::ToolstripMenuTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripMenuTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripMenuTemplate();
	};
}


namespace darkskin
{
	class ToolstripSplitArrowTemplate : public darkskin::ToolstripSplitArrowTemplate_<darkskin::ToolstripSplitArrowTemplate>
	{
		friend class darkskin::ToolstripSplitArrowTemplate_<darkskin::ToolstripSplitArrowTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripSplitArrowTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripSplitArrowTemplate();
	};
}


namespace darkskin
{
	class ToolstripSplitButtonTemplate : public darkskin::ToolstripSplitButtonTemplate_<darkskin::ToolstripSplitButtonTemplate>
	{
		friend class darkskin::ToolstripSplitButtonTemplate_<darkskin::ToolstripSplitButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripSplitButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripSplitButtonTemplate();
	};
}


namespace darkskin
{
	class ToolstripSplitterTemplate : public darkskin::ToolstripSplitterTemplate_<darkskin::ToolstripSplitterTemplate>
	{
		friend class darkskin::ToolstripSplitterTemplate_<darkskin::ToolstripSplitterTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripSplitterTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripSplitterTemplate();
	};
}


namespace darkskin
{
	class ToolstripTemplate : public darkskin::ToolstripTemplate_<darkskin::ToolstripTemplate>
	{
		friend class darkskin::ToolstripTemplate_<darkskin::ToolstripTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::ToolstripTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		ToolstripTemplate();
	};
}


namespace darkskin
{
	class TooltipTemplate : public darkskin::TooltipTemplate_<darkskin::TooltipTemplate>
	{
		friend class darkskin::TooltipTemplate_<darkskin::TooltipTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TooltipTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TooltipTemplate();
	};
}


namespace darkskin
{
	class TopScrollButtonTemplate : public darkskin::TopScrollButtonTemplate_<darkskin::TopScrollButtonTemplate>
	{
		friend class darkskin::TopScrollButtonTemplate_<darkskin::TopScrollButtonTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TopScrollButtonTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TopScrollButtonTemplate();
	};
}


namespace darkskin
{
	class TreeViewTemplate : public darkskin::TreeViewTemplate_<darkskin::TreeViewTemplate>
	{
		friend class darkskin::TreeViewTemplate_<darkskin::TreeViewTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::TreeViewTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		TreeViewTemplate();
	};
}


namespace darkskin
{
	class VScrollHandleTemplate : public darkskin::VScrollHandleTemplate_<darkskin::VScrollHandleTemplate>
	{
		friend class darkskin::VScrollHandleTemplate_<darkskin::VScrollHandleTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::VScrollHandleTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		VScrollHandleTemplate();
	};
}


namespace darkskin
{
	class WindowTemplate : public darkskin::WindowTemplate_<darkskin::WindowTemplate>
	{
		friend class darkskin::WindowTemplate_<darkskin::WindowTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<darkskin::WindowTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		WindowTemplate();
	};
}


namespace ui
{
	class AboutWindow : public ui::AboutWindow_<ui::AboutWindow>
	{
		friend class ui::AboutWindow_<ui::AboutWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::AboutWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		AboutWindow(Ptr<vm::IStudioModel> ViewModel);
	};
}


namespace ui
{
	class FileReferenceFactoryColumnTemplate : public ui::FileReferenceFactoryColumnTemplate_<ui::FileReferenceFactoryColumnTemplate>
	{
		friend class ui::FileReferenceFactoryColumnTemplate_<ui::FileReferenceFactoryColumnTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::FileReferenceFactoryColumnTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		FileReferenceFactoryColumnTemplate();
	};
}


namespace ui
{
	class FileReferenceFactoryEditorTemplate : public ui::FileReferenceFactoryEditorTemplate_<ui::FileReferenceFactoryEditorTemplate>
	{
		friend class ui::FileReferenceFactoryEditorTemplate_<ui::FileReferenceFactoryEditorTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::FileReferenceFactoryEditorTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		FileReferenceFactoryEditorTemplate(Ptr<vm::IStudioAddExistingFilesModel> OperationModel);
	};
}


namespace ui
{
	class FileReferenceFolderColumnTemplate : public ui::FileReferenceFolderColumnTemplate_<ui::FileReferenceFolderColumnTemplate>
	{
		friend class ui::FileReferenceFolderColumnTemplate_<ui::FileReferenceFolderColumnTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::FileReferenceFolderColumnTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		FileReferenceFolderColumnTemplate();
	};
}


namespace ui
{
	class FileReferenceNameColumnTemplate : public ui::FileReferenceNameColumnTemplate_<ui::FileReferenceNameColumnTemplate>
	{
		friend class ui::FileReferenceNameColumnTemplate_<ui::FileReferenceNameColumnTemplate>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::FileReferenceNameColumnTemplate>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		FileReferenceNameColumnTemplate();
	};
}



#endif
