/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
GacUI::Partial Classes

This file is generated by: Vczh GacUI Resource Code Generator
************************************************************************
DO NOT MODIFY
***********************************************************************/

#ifndef VCZH_GACUI_RESOURCE_CODE_GENERATOR_GacStudioUI_PARTIAL_CLASSES
#define VCZH_GACUI_RESOURCE_CODE_GENERATOR_GacStudioUI_PARTIAL_CLASSES

#include "..\..\..\Public\Source\GacUIReflection.h"

namespace vm
{
	class ISolutionItemModel;
}
namespace vm
{
	class IMacroEnvironment;
}
namespace vm
{
	class ITextTemplate;
}
namespace vm
{
	class IEditorFactoryModel;
}
namespace vm
{
	class IFileFactoryModel;
}
namespace vm
{
	class IProjectFactoryModel;
}
namespace vm
{
	class IFileModel;
}
namespace vm
{
	class IFolderModel;
}
namespace vm
{
	class IProjectModel;
}
namespace vm
{
	class ISolutionModel;
}
namespace vm
{
	class IAddFileItemAction;
}
namespace vm
{
	class IOpenInEditorItemAction;
}
namespace vm
{
	class IRenameItemAction;
}
namespace vm
{
	class IRemoveItemAction;
}
namespace vm
{
	class IStudioModel;
}

namespace vm
{
	class ISolutionItemModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<ISolutionItemModel>
	{
	public:

		virtual vm::ISolutionItemModel* GetParent() = 0;

		virtual Ptr<presentation::GuiImageData> GetImage() = 0;
		vl::Event<void()> ImageChanged;

		virtual WString GetName() = 0;
		vl::Event<void()> NameChanged;

		virtual Ptr<description::IValueObservableList> GetChildren() = 0;

		virtual WString GetFilePath() = 0;
		vl::Event<void()> FilePathChanged;

		virtual WString GetFileDirectory() = 0;
		vl::Event<void()> FileDirectoryChanged;

		virtual vint GetErrorCount() = 0;
		vl::Event<void()> ErrorCountChanged;

		virtual WString GetErrorText(vint index) = 0;
	};
}

namespace vm
{
	class IMacroEnvironment : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IMacroEnvironment>
	{
	public:

		virtual vm::IMacroEnvironment* GetParent() = 0;

		virtual bool HasMacro(WString name, bool inherit) = 0;
		virtual WString GetMacroValue(WString name, bool inherit) = 0;
	};
}

namespace vm
{
	class ITextTemplate : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<ITextTemplate>
	{
	public:

		virtual WString Generate(Ptr<vm::IMacroEnvironment> macroEnvironment) = 0;
	};
}

namespace vm
{
	class IEditorFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IEditorFactoryModel>
	{
	public:

		virtual WString GetName() = 0;

		virtual WString GetId() = 0;
	};
}

namespace vm
{
	class IFileFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IFileFactoryModel>
	{
	public:

		virtual Ptr<presentation::GuiImageData> GetImage() = 0;

		virtual Ptr<presentation::GuiImageData> GetSmallImage() = 0;

		virtual WString GetName() = 0;

		virtual WString GetCategory() = 0;

		virtual WString GetDescription() = 0;

		virtual WString GetId() = 0;

		virtual WString GetDefaultFileExt() = 0;

		virtual Ptr<vm::ITextTemplate> GetTextTemplate() = 0;
	};
}

namespace vm
{
	class IProjectFactoryModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IProjectFactoryModel>
	{
	public:

		virtual Ptr<presentation::GuiImageData> GetImage() = 0;

		virtual Ptr<presentation::GuiImageData> GetSmallImage() = 0;

		virtual WString GetName() = 0;

		virtual WString GetDescription() = 0;

		virtual WString GetId() = 0;

		virtual collections::LazyList<Ptr<vm::IProjectFactoryModel>> GetChildren() = 0;
	};
}

namespace vm
{
	class IFileModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<IFileModel>
	{
	public:

		virtual Ptr<vm::IFileFactoryModel> GetFileFactory() = 0;

		virtual bool OpenFile() = 0;
		virtual bool SaveFile() = 0;
		virtual bool NewFileAndSave() = 0;
	};
}

namespace vm
{
	class IFolderModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<IFolderModel>
	{
	public:
	};
}

namespace vm
{
	class IProjectModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<IProjectModel>
	{
	public:

		virtual Ptr<vm::IProjectFactoryModel> GetProjectFactory() = 0;

		virtual bool OpenProject() = 0;
		virtual bool SaveProject(bool saveContainingFiles) = 0;
		virtual bool NewProjectAndSave() = 0;
	};
}

namespace vm
{
	class ISolutionModel : public virtual vm::ISolutionItemModel, public vl::reflection::Description<ISolutionModel>
	{
	public:

		virtual bool OpenSolution() = 0;
		virtual bool SaveSolution(bool saveContainingProjects) = 0;
		virtual bool NewSolution() = 0;
		virtual bool AddProject(Ptr<vm::IProjectModel> project) = 0;
		virtual bool RemoveProject(Ptr<vm::IProjectModel> project) = 0;
	};
}

namespace vm
{
	class IAddFileItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IAddFileItemAction>
	{
	public:

		virtual bool AddFile(Ptr<vm::IFileModel> file) = 0;
	};
}

namespace vm
{
	class IOpenInEditorItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IOpenInEditorItemAction>
	{
	public:
	};
}

namespace vm
{
	class IRenameItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IRenameItemAction>
	{
	public:

		virtual WString GetRenameablePart() = 0;
		virtual WString PreviewRename(WString newName) = 0;
		virtual bool Rename(WString newName) = 0;
	};
}

namespace vm
{
	class IRemoveItemAction : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IRemoveItemAction>
	{
	public:

		virtual bool Remove() = 0;
	};
}

namespace vm
{
	class IStudioModel : public virtual vl::reflection::IDescriptable, public vl::reflection::Description<IStudioModel>
	{
	public:

		virtual collections::LazyList<Ptr<vm::IProjectFactoryModel>> GetProjectFactories() = 0;

		virtual collections::LazyList<Ptr<vm::IFileFactoryModel>> GetFileFactories() = 0;

		virtual collections::LazyList<Ptr<vm::IEditorFactoryModel>> GetEditorFactories() = 0;

		virtual Ptr<vm::IProjectFactoryModel> GetFileFilters() = 0;

		virtual Ptr<IProjectFactoryModel> GetSelectedFileFilter() = 0;
		virtual void SetSelectedFileFilter(Ptr<IProjectFactoryModel> value) = 0;

		virtual Ptr<presentation::description::IValueObservableList> GetFilteredFileFactories() = 0;

		virtual Ptr<ISolutionItemModel> GetRootSolutionItem() = 0;

		virtual Ptr<vm::ISolutionModel> GetOpenedSolution() = 0;
		vl::Event<void()> OpenedSolutionChanged;

		virtual Ptr<vm::ISolutionItemModel> GetWorkingItem() = 0;
		vl::Event<void()> WorkingItemChanged;

		virtual Ptr<vm::IProjectModel> GetWorkingProject() = 0;
		vl::Event<void()> WorkingProjectChanged;

		virtual WString GetWorkingDirectory() = 0;
		vl::Event<void()> WorkingDirectoryChanged;

		virtual void NotifySelectedSolutionItem(Ptr<vm::ISolutionItemModel> solutionItem) = 0;
		virtual Ptr<vm::IProjectFactoryModel> GetProjectFactory(WString id) = 0;
		virtual Ptr<vm::IFileFactoryModel> GetFileFactory(WString id) = 0;
		virtual Ptr<vm::IEditorFactoryModel> GetEditorFactory(WString id) = 0;
		virtual bool OpenSolution(WString filePath) = 0;
		virtual bool SaveSolution() = 0;
		virtual bool NewSolution(WString filePath) = 0;
		virtual bool CloseSolution() = 0;
		virtual Ptr<vm::IProjectModel> CreateProjectModel(Ptr<vm::IProjectFactoryModel> projectFactory, WString filePath) = 0;
		virtual Ptr<vm::IFileModel> CreateFileModel(Ptr<vm::IProjectModel> project, Ptr<vm::IFileFactoryModel> fileFactory, WString filePath) = 0;
		virtual void OpenBrowser(WString url) = 0;
		virtual void PromptError(WString message) = 0;
	};
}

namespace ui
{
	template<typename TImpl>
	class AboutWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
	private:
		Ptr<vm::IStudioModel> ViewModel_;
	protected:
		vl::presentation::controls::GuiDocumentViewer* documentViewer;
		vl::presentation::controls::GuiWindow* self;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(documentViewer);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		AboutWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::AboutWindow")
			,vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,documentViewer(0)
			,self(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	class AboutWindow;
}

namespace ui
{
	template<typename TImpl>
	class MainWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
	private:
		Ptr<vm::IStudioModel> ViewModel_;
	protected:
		vl::presentation::compositions::GuiCellComposition* cellSplitter;
		vl::presentation::controls::GuiToolstripCommand* commandFileAddExistingFiles;
		vl::presentation::controls::GuiToolstripCommand* commandFileAddNewFile;
		vl::presentation::controls::GuiToolstripCommand* commandFileCloseSolution;
		vl::presentation::controls::GuiToolstripCommand* commandFileExit;
		vl::presentation::controls::GuiToolstripCommand* commandFileNewProject;
		vl::presentation::controls::GuiToolstripCommand* commandFileOpen;
		vl::presentation::controls::GuiToolstripCommand* commandFileOpenProject;
		vl::presentation::controls::GuiToolstripCommand* commandFileOpenWith;
		vl::presentation::controls::GuiToolstripCommand* commandFileRemove;
		vl::presentation::controls::GuiToolstripCommand* commandFileRename;
		vl::presentation::controls::GuiToolstripCommand* commandFileSave;
		vl::presentation::controls::GuiToolstripCommand* commandFileSaveAll;
		vl::presentation::controls::GuiToolstripCommand* commandHelpAbout;
		vl::presentation::compositions::GuiTableComposition* tableMain;
		vl::presentation::controls::GuiToolstripMenu* toolstripMenuSolutionItem;
		vl::presentation::controls::GuiBindableTreeView* treeViewSolutionItem;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(cellSplitter);
				GUI_INSTANCE_REFERENCE(commandFileAddExistingFiles);
				GUI_INSTANCE_REFERENCE(commandFileAddNewFile);
				GUI_INSTANCE_REFERENCE(commandFileCloseSolution);
				GUI_INSTANCE_REFERENCE(commandFileExit);
				GUI_INSTANCE_REFERENCE(commandFileNewProject);
				GUI_INSTANCE_REFERENCE(commandFileOpen);
				GUI_INSTANCE_REFERENCE(commandFileOpenProject);
				GUI_INSTANCE_REFERENCE(commandFileOpenWith);
				GUI_INSTANCE_REFERENCE(commandFileRemove);
				GUI_INSTANCE_REFERENCE(commandFileRename);
				GUI_INSTANCE_REFERENCE(commandFileSave);
				GUI_INSTANCE_REFERENCE(commandFileSaveAll);
				GUI_INSTANCE_REFERENCE(commandHelpAbout);
				GUI_INSTANCE_REFERENCE(tableMain);
				GUI_INSTANCE_REFERENCE(toolstripMenuSolutionItem);
				GUI_INSTANCE_REFERENCE(treeViewSolutionItem);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		MainWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::MainWindow")
			,vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,cellSplitter(0)
			,commandFileAddExistingFiles(0)
			,commandFileAddNewFile(0)
			,commandFileCloseSolution(0)
			,commandFileExit(0)
			,commandFileNewProject(0)
			,commandFileOpen(0)
			,commandFileOpenProject(0)
			,commandFileOpenWith(0)
			,commandFileRemove(0)
			,commandFileRename(0)
			,commandFileSave(0)
			,commandFileSaveAll(0)
			,commandHelpAbout(0)
			,tableMain(0)
			,toolstripMenuSolutionItem(0)
			,treeViewSolutionItem(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	class MainWindow;
}

namespace ui
{
	template<typename TImpl>
	class NewFileWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
	private:
		Ptr<vm::IStudioModel> ViewModel_;
		Ptr<vm::IAddFileItemAction> Action_;
	protected:
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonCreate;
		vl::presentation::controls::GuiBindableListView* listViewFileTemplate;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxFileName;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxLocation;
		vl::presentation::controls::GuiBindableTreeView* treeViewProjectTemplate;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel, Ptr<vm::IAddFileItemAction> Action)
		{
			ViewModel_ = ViewModel;
			Action_ = Action;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonCreate);
				GUI_INSTANCE_REFERENCE(listViewFileTemplate);
				GUI_INSTANCE_REFERENCE(textBoxFileName);
				GUI_INSTANCE_REFERENCE(textBoxLocation);
				GUI_INSTANCE_REFERENCE(treeViewProjectTemplate);
			}
			else
			{
				ViewModel_ = 0;
				Action_ = 0;
			}
		}
	public:
		NewFileWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::NewFileWindow")
			,vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,buttonCancel(0)
			,buttonCreate(0)
			,listViewFileTemplate(0)
			,textBoxFileName(0)
			,textBoxLocation(0)
			,treeViewProjectTemplate(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}

		Ptr<vm::IAddFileItemAction> GetAction()
		{
			return Action_;
		}
	};

	class NewFileWindow;
}

namespace ui
{
	template<typename TImpl>
	class NewProjectWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
	private:
		Ptr<vm::IStudioModel> ViewModel_;
	protected:
		vl::presentation::controls::GuiButton* buttonBrowse;
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonCreate;
		vl::presentation::controls::GuiComboBoxListControl* comboSolution;
		vl::presentation::controls::GuiBindableListView* listViewProjectTemplate;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxLocation;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxProjectName;
		vl::presentation::controls::GuiSinglelineTextBox* textBoxSolutionName;

		void InitializeComponents(Ptr<vm::IStudioModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonBrowse);
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonCreate);
				GUI_INSTANCE_REFERENCE(comboSolution);
				GUI_INSTANCE_REFERENCE(listViewProjectTemplate);
				GUI_INSTANCE_REFERENCE(textBoxLocation);
				GUI_INSTANCE_REFERENCE(textBoxProjectName);
				GUI_INSTANCE_REFERENCE(textBoxSolutionName);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		NewProjectWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::NewProjectWindow")
			,vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,buttonBrowse(0)
			,buttonCancel(0)
			,buttonCreate(0)
			,comboSolution(0)
			,listViewProjectTemplate(0)
			,textBoxLocation(0)
			,textBoxProjectName(0)
			,textBoxSolutionName(0)
		{
		}

		Ptr<vm::IStudioModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	class NewProjectWindow;
}

namespace ui
{
	template<typename TImpl>
	class RenameFileWindow_ : public vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
	private:
		Ptr<vm::ISolutionItemModel> SolutionItem_;
		Ptr<vm::IRenameItemAction> Action_;
	protected:
		vl::presentation::controls::GuiButton* buttonCancel;
		vl::presentation::controls::GuiButton* buttonRename;
		vl::presentation::controls::GuiWindow* self;
		vl::presentation::controls::GuiSinglelineTextBox* textName;
		vl::presentation::controls::GuiSinglelineTextBox* textNew;
		vl::presentation::controls::GuiSinglelineTextBox* textOriginal;

		void InitializeComponents(Ptr<vm::ISolutionItemModel> SolutionItem, Ptr<vm::IRenameItemAction> Action)
		{
			SolutionItem_ = SolutionItem;
			Action_ = Action;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(buttonCancel);
				GUI_INSTANCE_REFERENCE(buttonRename);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(textName);
				GUI_INSTANCE_REFERENCE(textNew);
				GUI_INSTANCE_REFERENCE(textOriginal);
			}
			else
			{
				SolutionItem_ = 0;
				Action_ = 0;
			}
		}
	public:
		RenameFileWindow_()
			:vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>(L"ui::RenameFileWindow")
			,vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,buttonCancel(0)
			,buttonRename(0)
			,self(0)
			,textName(0)
			,textNew(0)
			,textOriginal(0)
		{
		}

		Ptr<vm::ISolutionItemModel> GetSolutionItem()
		{
			return SolutionItem_;
		}

		Ptr<vm::IRenameItemAction> GetAction()
		{
			return Action_;
		}
	};

	class RenameFileWindow;
}

namespace vl
{
	namespace reflection
	{
		namespace description
		{
			DECL_TYPE_INFO(vm::IAddFileItemAction)
			DECL_TYPE_INFO(vm::IEditorFactoryModel)
			DECL_TYPE_INFO(vm::IFileFactoryModel)
			DECL_TYPE_INFO(vm::IFileModel)
			DECL_TYPE_INFO(vm::IFolderModel)
			DECL_TYPE_INFO(vm::IMacroEnvironment)
			DECL_TYPE_INFO(vm::IOpenInEditorItemAction)
			DECL_TYPE_INFO(vm::IProjectFactoryModel)
			DECL_TYPE_INFO(vm::IProjectModel)
			DECL_TYPE_INFO(vm::IRemoveItemAction)
			DECL_TYPE_INFO(vm::IRenameItemAction)
			DECL_TYPE_INFO(vm::ISolutionItemModel)
			DECL_TYPE_INFO(vm::ISolutionModel)
			DECL_TYPE_INFO(vm::IStudioModel)
			DECL_TYPE_INFO(vm::ITextTemplate)
			DECL_TYPE_INFO(ui::AboutWindow)
			DECL_TYPE_INFO(ui::MainWindow)
			DECL_TYPE_INFO(ui::NewFileWindow)
			DECL_TYPE_INFO(ui::NewProjectWindow)
			DECL_TYPE_INFO(ui::RenameFileWindow)
		}
	}
}

/*
GsAboutWindow.h :
namespace ui
{
	class AboutWindow : public ui::AboutWindow_<ui::AboutWindow>
	{
		friend class ui::AboutWindow_<ui::AboutWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::AboutWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		AboutWindow(Ptr<vm::IStudioModel> ViewModel);
	};
}


GsAboutWindow.cpp :
namespace ui
{
	// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)

	// #endregion CLASS_MEMBER_GUIEVENT_HANDLER

	AboutWindow::AboutWindow(Ptr<vm::IStudioModel> ViewModel)
	{
		InitializeComponents(ViewModel);
	}
}


GsMainWindow.h :
namespace ui
{
	class MainWindow : public ui::MainWindow_<ui::MainWindow>
	{
		friend class ui::MainWindow_<ui::MainWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::MainWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void cellSplitter_leftButtonDown(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiMouseEventArgs& arguments);
		void cellSplitter_leftButtonUp(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiMouseEventArgs& arguments);
		void cellSplitter_mouseMove(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiMouseEventArgs& arguments);
		void commandFileAddExistingFiles_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileAddNewFile_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileCloseSolution_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileExit_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileNewProject_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileOpenProject_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileOpenWith_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileOpen_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileRemove_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileRename_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileSaveAll_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandFileSave_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void commandHelpAbout_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void treeViewSolutionItem_NodeRightButtonUp(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiNodeMouseEventArgs& arguments);
		void treeViewSolutionItem_SelectionChanged(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		MainWindow(Ptr<vm::IStudioModel> ViewModel);
	};
}


GsMainWindow.cpp :
namespace ui
{
	// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)

	void MainWindow::cellSplitter_leftButtonDown(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiMouseEventArgs& arguments)
	{
	}

	void MainWindow::cellSplitter_leftButtonUp(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiMouseEventArgs& arguments)
	{
	}

	void MainWindow::cellSplitter_mouseMove(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiMouseEventArgs& arguments)
	{
	}

	void MainWindow::commandFileAddExistingFiles_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileAddNewFile_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileCloseSolution_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileExit_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileNewProject_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileOpenProject_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileOpenWith_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileOpen_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileRemove_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileRename_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileSaveAll_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandFileSave_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandHelpAbout_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::treeViewSolutionItem_NodeRightButtonUp(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiNodeMouseEventArgs& arguments)
	{
	}

	void MainWindow::treeViewSolutionItem_SelectionChanged(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	// #endregion CLASS_MEMBER_GUIEVENT_HANDLER

	MainWindow::MainWindow(Ptr<vm::IStudioModel> ViewModel)
	{
		InitializeComponents(ViewModel);
	}
}


GsNewFileWindow.h :
namespace ui
{
	class NewFileWindow : public ui::NewFileWindow_<ui::NewFileWindow>
	{
		friend class ui::NewFileWindow_<ui::NewFileWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::NewFileWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void buttonCancel_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void buttonCreate_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		NewFileWindow(Ptr<vm::IStudioModel> ViewModel, Ptr<vm::IAddFileItemAction> Action);
	};
}


GsNewFileWindow.cpp :
namespace ui
{
	// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)

	void NewFileWindow::buttonCancel_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void NewFileWindow::buttonCreate_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	// #endregion CLASS_MEMBER_GUIEVENT_HANDLER

	NewFileWindow::NewFileWindow(Ptr<vm::IStudioModel> ViewModel, Ptr<vm::IAddFileItemAction> Action)
	{
		InitializeComponents(ViewModel, Action);
	}
}


GsNewProjectWindow.h :
namespace ui
{
	class NewProjectWindow : public ui::NewProjectWindow_<ui::NewProjectWindow>
	{
		friend class ui::NewProjectWindow_<ui::NewProjectWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::NewProjectWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void buttonBrowse_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void buttonCancel_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void buttonCreate_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		NewProjectWindow(Ptr<vm::IStudioModel> ViewModel);
	};
}


GsNewProjectWindow.cpp :
namespace ui
{
	// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)

	void NewProjectWindow::buttonBrowse_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void NewProjectWindow::buttonCancel_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void NewProjectWindow::buttonCreate_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	// #endregion CLASS_MEMBER_GUIEVENT_HANDLER

	NewProjectWindow::NewProjectWindow(Ptr<vm::IStudioModel> ViewModel)
	{
		InitializeComponents(ViewModel);
	}
}


GsRenameFileWindow.h :
namespace ui
{
	class RenameFileWindow : public ui::RenameFileWindow_<ui::RenameFileWindow>
	{
		friend class ui::RenameFileWindow_<ui::RenameFileWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<ui::RenameFileWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void buttonCancel_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		void buttonCreate_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments);
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		RenameFileWindow(Ptr<vm::ISolutionItemModel> SolutionItem, Ptr<vm::IRenameItemAction> Action);
	};
}


GsRenameFileWindow.cpp :
namespace ui
{
	// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)

	void RenameFileWindow::buttonCancel_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void RenameFileWindow::buttonCreate_Clicked(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	// #endregion CLASS_MEMBER_GUIEVENT_HANDLER

	RenameFileWindow::RenameFileWindow(Ptr<vm::ISolutionItemModel> SolutionItem, Ptr<vm::IRenameItemAction> Action)
	{
		InitializeComponents(SolutionItem, Action);
	}
}


*/

#endif
