include:"../../../../../Common/Source/Parsing/Parsing.h"
include:"../../../../../Common/Source/Parsing/ParsingDefinitions.h"
include:"../../../../../Common/Source/Parsing/ParsingAutomaton.h"
namespace:vl.presentation
reflection:presentation
classPrefix:GuiIq
guard:VCZH_PRESENTATION_REFLECTION_INSTANCEQUERY_GUIINSTANCEQUERY_PARSER
serialization:enabled
parser:Parse(QueryRoot)
grammar:

class Query
{
}

enum NameOption
{
	Specified,
	Any,
}

enum ChildOption
{
	Direct,
	Indirect,
}

class PrimaryQuery : Query
{
	ChildOption		childOption;
	NameOption		attributeNameOption;
	token			attributeName;
	NameOption		typeNameOption;
	token			typeName;
	token			referenceName;
}

class CascadeQuery : Query
{
	Query			parent;
	Query			child;
}

enum BinaryOperator
{
	ExclusiveOr,
	Intersect,
	Union,
	Substract,
}

class SetQuery : Query
{
	Query			first;
	Query			second;
	BinaryOperator	op;
}

token INDIRECT = "////";
token DIRECT = "//";
token NAME = "[a-zA-Z_][a-zA-Z0-9]*";
token WILDCARD = "/*";
token OPEN = "/(";
token CLOSE = "/)";
token XOR = "/^";
token INTERSECT = "/*";
token UNION = "/+";
token SUBSTRACT = "-";
token ATTRIBUTE = "@";
token COLON = ":";
token DOT = ".";

discardtoken SPACE = "/s+";

rule PrimaryQuery QPrimaryFragment
	=	(
			(NAME : typeName with {typeNameOption="Specified"})
			| ("*" with {typeNameOption="Any"})
		)
		["." NAME : referenceName] as PrimaryQuery
	;

rule PrimaryQuery QPrimaryAttributed
	= !QPrimaryFragment with {attributeNameOption="Any"}
	= "@" [NAME : attributeName] ":" !QPrimaryFragment with {attributeNameOption="Specified"}
	;

rule PrimaryQuery QPrimary
	= ("/" with {childOption="Direct"}) !QPrimaryAttributed
	= ("//" with {childOption="Indirect"}) !QPrimaryAttributed
	= "(" !QueryRoot ")"
	;

rule Query Query0
	= !QPrimary
	= Query0 : parent QPrimary : child as CascadeQuery;

rule Query Query1
	= !Query0
	= Query1 : first "^" Query0 : second as SetQuery with {op="ExclusiveOr"}
	= Query1 : first "*" Query0 : second as SetQuery with {op="Intersect"}
	;
	
rule Query Query2
	= !Query1
	= Query2 : first "+" Query1 : second as SetQuery with {op="Union"}
	= Query2 : first "-" Query1 : second as SetQuery with {op="Substract"}
	;

rule Query QueryRoot
	= !Query2
	;