#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n"L""
L"\r\n"L"class Query"
L"\r\n"L"{"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"enum NameOption"
L"\r\n"L"{"
L"\r\n"L"\tSpecified,"
L"\r\n"L"\tAny,"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"enum ChildOption"
L"\r\n"L"{"
L"\r\n"L"\tDirect,"
L"\r\n"L"\tIndirect,"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class PrimaryQuery : Query"
L"\r\n"L"{"
L"\r\n"L"\tChildOption\t\tchildOption;"
L"\r\n"L"\tNameOption\t\tattributeNameOption;"
L"\r\n"L"\ttoken\t\t\tattributeName;"
L"\r\n"L"\tNameOption\t\ttypeNameOption;"
L"\r\n"L"\ttoken\t\t\ttypeName;"
L"\r\n"L"\ttoken\t\t\treferenceName;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class CascadeQuery : Query"
L"\r\n"L"{"
L"\r\n"L"\tQuery\t\t\tparent;"
L"\r\n"L"\tQuery\t\t\tchild;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"enum BinaryOperator"
L"\r\n"L"{"
L"\r\n"L"\tExclusiveOr,"
L"\r\n"L"\tIntersect,"
L"\r\n"L"\tUnion,"
L"\r\n"L"\tSubstract,"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class SetQuery : Query"
L"\r\n"L"{"
L"\r\n"L"\tQuery\t\t\tfirst;"
L"\r\n"L"\tQuery\t\t\tsecond;"
L"\r\n"L"\tBinaryOperator\top;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"token INDIRECT = \"////\";"
L"\r\n"L"token DIRECT = \"//\";"
L"\r\n"L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n"L"token WILDCARD = \"/*\";"
L"\r\n"L"token OPEN = \"/(\";"
L"\r\n"L"token CLOSE = \"/)\";"
L"\r\n"L"token XOR = \"/^\";"
L"\r\n"L"token INTERSECT = \"/*\";"
L"\r\n"L"token UNION = \"/+\";"
L"\r\n"L"token SUBSTRACT = \"-\";"
L"\r\n"L"token ATTRIBUTE = \"@\";"
L"\r\n"L"token COLON = \":\";"
L"\r\n"L"token DOT = \".\";"
L"\r\n"L""
L"\r\n"L"discardtoken SPACE = \"/s+\";"
L"\r\n"L""
L"\r\n"L"rule PrimaryQuery QPrimaryFragment"
L"\r\n"L"\t=\t("
L"\r\n"L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n"L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n"L"\t\t)"
L"\r\n"L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n"L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n"L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule PrimaryQuery QPrimary"
L"\r\n"L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n"L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n"L"\t= \"(\" !QueryRoot \")\""
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Query Query0"
L"\r\n"L"\t= !QPrimary"
L"\r\n"L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n"L""
L"\r\n"L"rule Query Query1"
L"\r\n"L"\t= !Query0"
L"\r\n"L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n"L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n"L"\t;"
L"\r\n"L"\t"
L"\r\n"L"rule Query Query2"
L"\r\n"L"\t= !Query1"
L"\r\n"L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n"L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Query QueryRoot"
L"\r\n"L"\t= !Query2"
L"\r\n"L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 6341; // 25801 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 197;
const vint parserBufferRows = 7;
const char* parserBuffer[] = {
"\x00\x00\x80\x84\x01\x8C\x01\x83\x20\x00\x61\x00\x33\x20\x03\x30\x84\x00\x32\x00\x65\x00\x11\x20\x05\x39\x88\x00\x72\x00\x39\x20\x0F\x7D\x8F\x7F\x82\x00\xD0\x18\x80\x09\x30\x01\x36\x87\x19\x9B\x94\x96\x82\x89\x94\x8E\x8F\x05\x01\xAB\x97\x8E\x96\x8F\x7E\x04\x01\xD3\x17\x94\x33\x8D\x88\x9A\x8D\x2F\x9D\x8B\x04\x86\x86\x87\x85\x86\x09\x90\x92\x93\x9D\x90\xA1\x98\x80\x0D\xE8\x24\x80\x0C\x37\x85\xA1\x8F\x45\x89\x87\xAE\x8A\xA5\x9C\x97\x91\x1B\x86\x01\x90\x38\x97\x8A\x36\x00\x3C\xB6\xA0\x80\x02\x91\x8D\x93\x93\x09\xAE\x8C\xA0\xB0\x05\x05\x81\x84\x3C\xBC\xAE\xA0\x02\x36\x9C\x9E\x89\x4E\x0E\xA7\x92\x8A\xB1\x81\xB7\xA9\x70\xF4\xB3\xAE\x93\x0F\xB8\xB5\xC7\x7B\xFD\x96\x9F\xB0\x01\xC1\x85\xC1\x00\x4F\x00\x04\xBC\x9D\x93\x36\x00\x67\x85\xE1\x83\x9F\xB5\xB2\x94\x9F\x4D\x9B\x83\xB0\xA0\x02\xA9\x93\xAA\x10\x9A\xDC\xD3\xAF\xC9\xD2\x8F\xB5\x87\xA5\xF1\xA0\xAB\xC0\xA2\xBA\x80\x19\x92\xA6\x3F\x92\x8F\xB1\x86\xC0\x82\x97\xA2\xCC\xB4\xD6\x92\xD2\xAF\x3F\x9B\xB8\x80\x8C\x9B\x8C\xB2\xE4\x97\xCA\xF7\xC6\xCD\xE1\xC6\xB8\xD4\x74\x8E\x01\x95\xEB\xCF\x8A\xCA\xE7\x12\xB2\xCF\xDE\xC0\xD7\xAB\xE8\x00\x3A\x92\xBC\x9D\xDB\x8F\xA4\x01\xE1\x25\x99\x8B\x89\xBE\x8F\xF5\xF9\xC7\xF4\x40\x02\x01\x40\x9F\x64\x56\x4E\x7F\x3B\x50\x79\x68\x00\x62\x40\x4B\x42\x44\x0D\x75\x66\x56\x4D\x11\x01\x4F\x09\x40\x15\x81\x4A\x85\x40\x36\x76\x4B\x84\x87\x1D\x9D\x4F\x84\x40\x21\xA2\x83\x89\x89\x37\x41\x49\x11\x65\x00\x04\x10\x03\x8A\x52\x00\x05\x10\x00\x07\x54\x10\x03\x40\x00\x57\x8A\x8C\x00\x17\x9A\x86\x4D\x83\x2D\xAF\x80\x01\x8C\x33\xB5\x82\x82\x85\x3C\x80\x01\x00\x88\x1D\x78\x8C\x89\x10\x00\x0D\x12\x8C\x00\x15\x01\x4B\x16\x43\x2D\x00\x0A\x1C\x00\x50\x99\x9A\x14\x00\x5F\x00\x0D\x14\x00\x57\x89\x49\x97\x96\x5D\x80\x0F\x94\x0C\x00\x19\x99\x0E\x98\x00\x2A\x07\x90\x89\xFD\x41\x47\x16\x90\x4C\x01\x97\x40\x94\x31\xAE\x83\x81\x8E\x71\x80\x03\x00\x93\xFF\x0E\x9A\x66\x48\x33\x81\x6F\x9D\x92\x28\x37\x84\xA2\x7D\x07\x79\x9A\x66\x4E\x33\x8B\xA7\x85\x0A\x00\x36\x76\x4F\xA0\x00\x58\x19\x67\x90\x73\x89\x9E\x14\x83\x84\x89\x0A\x88\x8B\x36\xB3\x81\x8C\xA5\x34\x80\x06\x8E\xA5\x81\x87\x0F\xA1\x40\x55\x2C\x8B\x8A\x66\x8A\x88\x9B\x08\x00\xEF\x76\x46\xA8\x40\x3A\x75\xA2\x10\x7C\xAE\xA0\xA0\x96\x91\x4B\x80\x49\x97\xAF\x57\x4C\xB0\x96\x8D\x36\xB1\x8B\x8B\xB0\xB5\xA9\xAA\x91\x40\x40\x00\x0A\x03\xAC\x00\x47\x4A\x66\xA4\x2C\x89\xB0\x02\x0E\x00\x2B\x67\x54\xA7\x41\x9A\x66\x8E\xB8\x2E\x00\x0B\x5A\x4D\xE2\xB6\x7A\x4E\x48\xC7\x93\x98\xBB\x85\x0B\x7B\xAF\x6F\x55\x3D\xA4\xA0\x41\x80\x6C\x90\x02\x4C\x78\x2E\x6C\x9D\xB9\x8C\x9F\x5F\x6C\x4E\x4E\x3C\x7B\x6C\x4E\xB9\xCF\x25\x00\x08\x00\x24\x00\x0C\x0E\x82\x74\x6C\x9E\x0E\xBF\x18\xC5\xCE\xBB\xC0\x5F\x5E\xCD\xB8\xC3\x65\x7C\x4B\xB4\x40\xB7\x00\x03\xC7\xC5\x00\xC0\x0B\xC7\x7B\x14\x79\x6E\x73\x6E\x1B\x67\xCD\x4E\xCC\xDE\x40\x5D\xB9\x0C\x00\x15\x21\x40\xCB\xCC\x7B\x59\xCF\x46\x1B\xE4\xB3\xC5\xA3\x13\xE2\x09\x93\x85\x4A\xD1\xC3\xC7\x1D\x53\x7C\x42\x57\xC4\x7B\x2A\xCC\x41\x6B\x53\x70\x6F\xA7\x6C\xEC\x67\x53\xC5\x0F\x56\xCA\xDB\x8B\x59\x10\x79\x77\x45\x43\x3C\x4A\xD3\xC5\x1F\x56\xD8\xA3\xC5\x08\x37\xDD\x7F\x70\x94\x79\x4D\x72\x67\x63\x12\x50\x46\x5F\xB6\x40\xF8\xCF\x71\xD1\x56\xC8\xD0\x02\xD2\x4C\xC0\x0E\xD0\x00\x50\xE5\x42\xD6\xD5\x55\xD3\xC1\x55\xD6\x56\x6A\x7D\x64\x00\x12\x9F\xD1\xD9\x90\x66\xD0\x8F\x62\xDA\x00\x2C\xD3\xC6\xDB\x00\x30\xD1\xCE\xDC\x34\xDC\x9F\x62\x5E\x53\x77\xD4\x64\x44\x30\xC1\xD8\x63\x73\x36\xE3\xE2\xD3\x73\xED\xB2\x00\x03\x07\x3F\xF1\xD3\xED\xE9\x80\xC9\xD0\x01\xA3\x4D\xD2\xC1\xE9\xC7\x40\x48\xC4\xE7\x63\xBE\xD8\xAA\xD2\xC0\xFF\xAE\xEA\x6C\x5D\x46\x23\x49\x43\x19\xE8\x6D\x7C\x4E\x04\x03\xFE\xD5\xE9\xF4\x19\x53\xF5\xF7\x59\x3C\x7B\xC0\x01\x2A\xB9\xF2\xEF\xEB\xF6\xD2\xC0\x04\xF4\x66\xE0\xEE\xC3\xB9\xE0\xF0\xD3\xC1\x60\x94\x52\xB3\x83\xC6\xD1\x8F\x56\x76\x79\x72\x12\x4F\xD1\xD4\xD6\x54\x76\x68\x79\x57\x3C\x45\xEC\x29\x3D\x3C\x93\x75\x70\x00\x60\x6E\x76\x9D\x04\x85\x21\x25\x38\x3F\x45\x10\x2C\x72\xCF\x40\x00\x74\x7C\x11\x7F\xE0\x01\x5C\x73\xC4\x4F\x33\x6A\x00\x0D\x71\xFE\x65\x38\x3B\xEA\x52\x74\x36\xED\x36\x72\xEF\x50\x47\x2D\x8D\x15\x85\x6D\x30\x87\x73\x95\x3E\x7D\x5C\xCE\x73\x79\x4A\x53\x57\x7E\xD5\x41\x37\x3E\xE2\x2D\x3F\x38\x05\x95\x7B\xC4\x63\x43\x62",
"\xAD\x16\x6A\x7B\x8A\x24\x60\x50\x4C\x7A\x77\xF3\x50\x79\x7D\xEB\x66\x2F\x63\x58\x7D\x78\x24\xAE\x24\x7B\x0E\x31\x89\x71\x0F\x35\x77\xF1\x65\x7E\x79\x33\x6F\x89\xF7\x6A\x7F\x7B\xC7\x3D\x77\x77\x1A\x97\x85\xFD\x56\x68\x7F\x01\xBB\x7E\x80\x56\x7E\x83\xE2\x01\x83\x62\x37\xA5\x80\x33\x27\x9D\x6A\xD5\x0C\x8B\x82\x07\xA7\x6B\x2A\x12\x99\x6F\x06\xEB\x60\x87\x89\x59\x87\x68\x97\x72\x4D\x07\xFF\x70\x84\x11\xB6\x89\x88\x78\x88\x80\x0A\xDE\x6B\x81\xCB\x6C\x80\x28\x2F\x9F\x71\x0C\xC2\x73\x87\x0D\xB5\x86\x6A\x6A\x99\x87\xFB\x13\x6C\x87\xE1\x0D\x2B\x8B\x40\x87\x3C\x66\x43\x86\x6A\x23\x93\x66\x8A\xBC\x2A\x8B\x46\x54\x8D\x89\xE7\x6E\x24\x6E\x90\x29\x76\x5F\x13\x80\x00\x0A\x19\x7C\x74\x74\x38\x94\xEA\x25\x2A\x74\x5E\xA2\x7C\x27\x00\x3D\x6C\x30\xB7\x97\x74\xBB\x7B\x92\x90\x67\x8A\x69\xB6\x41\x73\x63\x4E\xA1\x96\x7E\xA3\x8E\x21\xDD\x11\x3F\x98\x48\x97\x24\x95\xBE\x64\x5C\xE7\x22\x70\x8D\xA1\x40\x00\x8B\xDE\x6C\x7C\xF2\x08\x7C\x90\xC6\x6D\x95\x99\xDC\x93\x33\x1B\xA6\x82\x92\x3D\xAA\x85\x8F\x24\x97\x69\x04\xD3\x22\x91\x17\x8C\x8E\x7C\xB6\x80\x28\x3A\xE4\x8A\x9D\xEB\x7F\x93\x77\x62\x99\x89\x19\xE1\x70\x01\x19\x1E\x89\x99\xB5\x81\x8F\x15\xD0\x8B\xA0\xF7\x78\x7A\x70\x82\x77\x98\x1B\x82\x80\x28\x02\xAA\x97\x9B\xEC\x8A\x70\x00\xA1\x8C\xA2\xFD\x77\x8F\x22\x79\x87\x78\x25\xFC\x8A\x68\x3F\x9A\x73\x9F\x25\x3D\x9E\xD5\x16\x88\x82\x0D\x8A\x6A\x91\x71\x8D\x9C\x1D\xA3\x8E\xA2\xFE\x5B\x6B\x3D\x2A\xBB\x8E\x25\xED\x3E\x85\x99\x85\x97\x82\x56\x7D\x92\xD2\x1F\x97\x70\x8D\xBA\x84\x94\x17\x26\x97\x48\x28\x93\x9F\x55\xB0\x4D\x88\x0A\x27\x8B\x32\xB1\x91\x64\xA0\x34\x90\xA0\x12\xA0\x2A\x30\xCE\x92\x9E\x41\xBE\x95\x8A\x5B\xBB\x23\x58\xF1\x98\x6E\xAB\x2D\x5C\x06\x00\x03\x1B\x17\xB0\x9A\xAC\x78\xBA\x95\xAC\x56\x31\x98\x00\x53\x99\xA8\x50\xA6\x73\x8D\x4F\xBA\x99\x2E\xC4\x9D\x9B\x8F\xBD\x7F\xAA\x1B\x82\x9E\xD5\x64\x94\xAF\x73\x94\xA5\xA0\x86\x62\x7A\x1C\xA3\xA2\x84\xBC\x03\xB4\x2F\x85\xBE\xA5\x4A\x8A\x8C\xA4\x62\x4F\x80\x90\xFC\x96\x2B\x0B\xFB\x66\x63\x88\xA6\x9B\xAD\x77\xAD\xAC\x44\x67\x8C\xB1\xB4\x8E\xB3\x8C\x5A\x96\x79\x64\xFE\x72\xA5\x46\xAF\x9B\x9B\xA9\xB4\x32\x61\xBF\xA9\x81\x14\x95\x93\x85\x44\xA3\x91\xE7\x00\x0F\x9F\x72\x8F\x3B\xA0\xB1\xAD\x7C\x06\x07\xAE\x89\x89\xB0\xB5\xA2\x07\x67\x7A\xC2\x53\x44\x6C\x2A\x41\x25\x62\xCA\x88\xA2\x73\x8A\xA0\xB3\x8D\x53\x61\x62\x5F\xA6\xB9\xE9\x28\xB4\xB0\xBC\x90\x27\xAC\xA6\xB3\x6E\x5D\xE5\xBA\xB4\x00\x1D\x88\x99\xA5\xA0\xAF\x69\xEB\xB8\xB2\xF3\x96\xA7\x72\x7C\xB5\x9A\x5F\xF4\x72\x94\xFC\x56\xB3\x98\xF5\xAD\xAF\x6E\xAC\x97\x70\xA5\x4A\xB7\x6D\xE9\xA8\x7F\x73\x90\xB4\xB7\x0F\xAE\x98\xAB\xB8\xAC\xBE\x6E\x9A\xB5\x9F\xA0\xB7\x9D\xA5\xF9\x90\x81\x0F\xB1\xA2\xB4\xA3\xA1\xBD\xB1\xE4\xA1\xC3\xEA\x3D\x9C\xB9\x80\xB5\xA9\xC2\x22\xC6\x99\x43\x8F\x30\xA2\xF9\xAA\xB8\xC5\xC5\x90\x99\x36\xD2\x92\xB8\x6B\xBF\xAD\xBF\xB7\xB7\xB1\x8C\xDE\x97\xB0\x22\x89\xB3\x83\x87\x6D\xB6\x76\x82\xAF\xB0\x29\xBC\x25\xC1\x73\x84\xA4\x84\xBA\xC9\xB2\x38\x9B\xB6\xB7\x9D\xAE\xA6\x3E\x9B\xCC\x96\x7F\xA5\xC1\xAC\x1B\x28\xB9\x45\x9F\xCE\xB4\x2D\xD0\xB5\x5D\x35\x0F\xA1\x7C\xE2\xB9\xA1\x74\x86\xCF\xBE\x88\x89\xCF\x93\x38\x88\x9B\x36\x9D\xA5\xAA\x20\xB3\xB2\x6D\xF5\x8F\xCD\x93\x87\x84\x6B\x16\xDF\xB4\x3E\x9F\xB0\xA7\x2A\xC6\xAA\x93\x86\x96\xA4\x07\xB9\xA5\xB7\x07\xFC\xA0\xCE\x77\xC0\xA8\x67\xC3\xAD\x84\xE1\xB4\xA7\xA8\x4A\xAE\xBE\x70\xCE\xA9\x9B\x52\xBE\x86\x38\x88\xD6\x6A\x8F\xAE\x94\xCD\xEF\x1D\xAB\x23\xE0\xB7\xCB\x7C\xB0\xCD\x9A\x88\x1A\x02\xD4\x2F\xCC\xCA\x7D\xD1\xB9\x61\xC7\x33\x45\xBA\x17\x17\xBB\x98\xA0\xC4\xBF\x1D\xEB\xB6\x6A\x11\x6D\x75\x63\xB1\x7D\xD2\x9D\x6B\xC6\x16\x73\xAE\xB7\x19\x82\x74\x70\xE1\xB2\xCE\xD0\x8F\x6F\x35\xE4\x15\xCB\xD0\xDF\x6E\x41\x73\x57\x69\x6F\x9F\xC8\xA8\xC0\x17\xE3\xBD\xD6\xA5\xD1\xB0\x69\xD9\xBD\xB8\xA0\x03\xDF\x72\x3B\x4B\x91\xA1\xBB\xA9\xD8\xAA\x0B\xD8\xCF\xCD\xDB\x83\xD8\x56\x20\xDA\xB4\x4E\xD7\xA8\x42\xDD\xDB\x89\xAA\xDD\xBD\x88\x5B\xD9\xC1\x74\x3A\xAC\xF0\x0B\xB4\x79\x8D\x06\x7B\xBA\xC9\x60\xC9\x09\x40\x4D\x65\xD6\x5F\xD0\x00\x06\x6B\xC4\x45\x2D\xC2\x96\x84\xE8\xCD\xDF\x0E\xE1\xB0\x59\x3B\x3B\x8B\x23\xF8\xDE\x25\x81\xA5\xDE\xD6\x58\xAB\x21\x89\x47\x26\x88\x48\x36\x2B\x52\x0D\xE6\xDE\x6D\x63\xCF\xE0\x1A\x79\x99\xBC\xA6\xC1\xB2\x82",
"\xCD\xE4\x4D\x06\xF1\x3A\xC3\xDD\x8B\x07\x2F\xA8\xE7\xE1\x2D\x72\xE1\x59\x15\xE6\x6A\x6B\xF4\x29\xE3\x58\x6A\xD8\x44\x1C\xE6\x6B\x8F\xD9\xA9\xE4\x5D\x21\x41\xAE\xA8\xD5\x75\xE2\x8D\xB4\xD5\xC7\x7C\x27\xAB\xD6\x2B\x5E\xEC\x97\xE6\xDB\xB8\xC3\xE0\xC8\x32\xE0\xE7\xAD\xCB\x41\xE1\x3C\x75\xE4\xC3\xB7\xE7\x8D\x9C\xD9\x9B\xE2\x53\xB2\xB7\xE1\x3E\xE8\xE3\x6C\x9A\xE6\x2A\x44\xFE\xE2\x51\x57\x69\x29\x8B\x01\x46\xE5\x37\xE2\x3D\xF3\x37\xE0\xEB\xE9\x93\xE8\x22\xE6\x56\xE9\xCB\x5E\xBD\xE4\xAF\xF4\x2C\x67\x31\xEB\x40\xCF\x6F\xA0\x00\x5F\x36\xE2\xE6\x3C\x65\xED\xC3\xBC\x61\xB0\x09\xBA\x3B\x9D\x4A\x63\x54\xE7\x66\xE8\x7F\x07\x57\x6A\x42\x43\xF3\xEF\xC4\x7F\x33\x3F\x86\xC8\xCC\xB2\x56\x65\x42\x50\xBE\x73\x46\x3C\x17\x6D\x2A\x16\x2B\x21\x49\x76\x08\xA5\x91\x2F\x85\xE4\x7C\x70\xE1\xE4\xAA\xE0\xE2\x36\x78\xF7\xE4\x90\xF8\xE7\xE4\x9B\xA3\x62\xCB\xD9\xAE\xE2\x37\xA2\xB8\xE7\xD6\x6E\xF3\x08\x6D\x39\xF4\x9C\xC4\xF4\xC4\xA7\xF3\xCF\xE3\x64\x2F\xC2\x42\x4D\x7D\x53\x4D\xFB\x72\xA3\x91\x60\xEF\xC1\xE9\xF3\xE1\x92\xDE\xA0\x55\x0F\xF2\xF1\xC2\xE7\xE0\xE5\xD9\x96\xF9\xFD\x17\x72\xF3\x3D\xEF\xE4\xF1\xD9\xAA\x72\xD0\xEF\x9D\xE3\xC4\x52\x3C\xC4\x87\x77\xD9\x9D\xAA\xF0\xFB\xAD\x7F\x7A\x3E\x12\x7B\x00\x04\x7B\x07\x49\x11\xA3\x56\x72\x40\x3A\x7E\xE9\x71\x7C\x95\x73\x15\x97\x78\x7C\x83\x63\x31\xCB\x73\x31\xDC\x76\x7F\x71\x79\x7F\x00\x24\x72\x92\x5A\x53\x4A\x66\x7D\xAB\x7A\x6E\xB2\x5B\x7D\x7F\x42\x6D\x84\x40\x7E\xE8\x72\x7E\x2E\x1B\x78\x00\x0C\x33\xE6\x73\x76\xC1\x72\x79\x0C\x8F\x80\x66\x3E\x7E\x05\x63\x81\xBD\x73\x7F\x17\x8F\x7C\xF7\x76\x35\xD2\x71\x20\xD4\x76\x68\xFF\x7A\x67\x62\x33\x82\x23\x1C\x7D\x26\x83\x5C\xF7\x61\x20\xBB\x78\x3F\x4C\x83\x7F\xED\x7F\x18\x37\x80\x7F\x14\x82\x7F\x81\x5B\x83\xD5\x59\x81\x3F\x86\x7A\x21\x5E\x60\xFE\x75\x1E\x00\x80\x00\xAE\x7D\x10\xB0\x79\x55\xB3\x75\x7B\x08\x86\x54\x28\x83\x7E\x7A\x7A\x7B\x92\x6F\x6F\xAE\x6C\x83\x81\x70\x7C\xE8\x74\x78\xDF\x76\x78\x2E\x16\x3B\x2A\x80\x14\xB6\x32\x3E\xB8\x07\x7E\x74\x16\x3B\xAC\x5E\x86\xBF\x7B\x80\x32\x72\x88\xD9\x41\x20\xB6\x34\x83\x47\x88\x79\x6D\x2A\x7C\xC3\x77\x85\x7F\x48\x81\xA2\x7A\x81\xA5\x77\x70\x41\x8F\x85\xD7\x74\x84\xC4\x26\x11\x7D\x1E\x7E\x63\x4E\x6E\xB7\x75\x02\x4B\x8D\x70\x88\x8E\x84\xA6\x80\x85\x10\x87\x7C\x97\x3B\x2B\x9B\x71\x89\xD9\x48\x85\x70\x75\x89\x5B\x88\x89\x5D\x89\x64\x22\x43\x84\x9D\x55\x2B\x67\x1A\x47\xA3\x8B\x86\x79\x8C\x2B\x78\x8C\x87\x92\x60\x57\xA4\x00\x88\xC1\x82\x83\x87\x8A\x8A\x35\x8E\x88\x59\x2F\x8A\x33\x81\x8B\x93\x8C\x83\x5A\x89\x20\x4A\x7D\x81\xE3\x6F\x81\xBA\x87\x39\x3A\x1E\x89\xAC\x81\x8A\xDD\x74\x48\xA5\x87\x70\xA7\x81\x7F\xE4\x8C\x8C\x8D\x82\x81\xAE\x86\x8E\x0E\x82\x8D\xF5\x74\x8D\xB4\x86\x8D\x1C\x89\x89\xDA\x80\x86\x9C\x8C\x8B\x93\x4F\x6E\xC0\x80\x14\x88\x73\x8C\x1B\x1C\x82\xB6\x3F\x82\x74\x83\x7E\xCA\x88\x7E\x8C\x81\x81\xEF\x72\x70\x55\x87\x73\x92\x8F\x8E\x59\x81\x8F\xFA\x70\x84\xB7\x88\x7A\x13\x3B\x8D\xAC\x72\x86\x02\x81\x7B\x53\x16\x80\x9F\x29\x86\xE2\x8A\x80\x6E\x85\x90\xE3\x77\x90\xAC\x8E\x3B\x38\x5B\x76\x56\x8E\x8E\x9F\x70\x8F\xD1\x72\x8F\xB6\x8D\x7F\xF5\x8B\x89\x9D\x5B\x6E\x94\x17\x79\x9A\x39\x84\x6C\x3C\x2C\x01\x20\x87\x0F\x3E\x8F\xA0\x2D\x6A\x0C\x5C\x33\x55\x20\x83\x0B\x2C\x93\x0F\x74\x4E\xE7\x87\x87\x7B\x7B\x8C\x7B\x8B\x11\x7D\x80\x00\xB6\x37\x8C\x44\x91\x88\x0D\x8B\x20\x8B\x8C\x7E\xAB\x86\x83\xC2\x3A\x34\xEB\x8B\x90\xED\x8D\x79\xD3\x8F\x90\x2D\x91\x91\x5C\x80\x93\xB9\x86\x8F\xBB\x8D\x1E\xBE\x86\x54\xE3\x8B\x8C\x22\x91\x8C\x24\x9A\x95\xBE\x3F\x8C\xEC\x86\x90\x2A\x9E\x7C\x62\x99\x55\xA3\x7E\x92\x32\x74\x8F\x67\x92\x93\xDC\x8E\x13\x9F\x89\x4B\x09\x12\x8A\x6A\x8E\x93\xB6\x3D\x86\x8A\x8F\x86\xD2\x51\x87\xD5\x53\x87\x86\x86\x95\xEE\x3F\x5D\x25\x0A\x93\x0D\x76\x94\x19\x20\x71\x46\x9D\x77\x8E\x96\x15\x6D\x82\x78\x97\x9D\x98\x3C\x16\x87\x25\x0A\x6B\xAE\x5C\x6B\x4F\x70\x00\x70\x58\x3B\x0C\x7D\x58\xFA\x62\x5C\x48\x92\x73\x46\x97\x83\xCA\x3C\x31\x8B\x9D\x94\x50\x94\x7E\x00\x02\x95\x03\x99\x8C\x89\x89\x8A\x71\x9E\x88\xEB\x88\x92\xD1\x80\x96\x0E\x93\x8B\x63\x9B\x81\x2F\x9E\x81\x7F\x91\x82\x4A\x38\x8F\x6B\x9F\x91\xB9\x7B\x98\x6F\x94\x8C\xC1\x92\x81\x74\x94\x9C\x5F\x9C\x7C\x61\x98\x9C\x7A\x96\x89\xD3\x73\x91\xD5\x76\x91\xF8\x4E\x8D\xA0\x8E\x10\x86\x94\x48",
"\x5C\x63\x64\xF3\x60\x60\xB6\x60\x00\x1C\x0C\x74\xC1\x48\x6D\xAB\x6F\x93\x51\x74\x2C\x0D\x33\x12\x3C\x11\x6B\x00\x17\x38\xA0\x94\x6B\xA4\x66\x5F\x1B\x3B\x9E\xF2\x66\x3A\x01\xAD\x5E\xCB\x58\x56\xEC\x96\xA0\xF4\x63\x62\x23\x3F\x18\x0E\x30\x00\x16\x01\x10\x29\x3B\x32\x57\x7D\x9E\x64\x5D\x5E\x1B\x36\x99\x07\x76\x94\x8D\x1B\x94\x45\x92\x9A\x8C\x90\x94\xF8\x95\x32\x00\x0D\x86\xFE\x9D\x9B\xC5\x32\xA2\x1B\xAE\x93\x46\x9F\x00\x2E\xA2\xA2\x0F\xA9\x9F\x19\x1C\x13\xFB\x25\xA1\x2A\xAE\x6F\x2C\xA2\x8C\x0A\xA5\xA0\x04\xAC\x72\x9C\x9B\x30\x10\xAA\x9F\x75\x11\x10\x29\xAC\x6D\x2C\x7F\x32\xF2\x9E\x12\x8A\x9D\x6B\x1B\x13\xA3\x26\xAB\x16\x38\xA8\xA4\x58\x6E\x3E\xFB\x8F\x8F\xC4\x5E\x93\x2C\x86\x94\x24\x31\xA1\x10\x32\x3C\xA0\x9C\x80\x1B\x37\xA5\x2D\x8F\x31\x20\xA3\x7E\x50\xA1\xA1\x36\x33\xA5\x21\x99\xA5\x3D\xAC\x72\x5E\x67\x66\xA7\x6F\xA6\x55\xA1\xA7\x3C\x71\xA4\x25\xA1\xA1\x43\x93\x5B\x14\x33\x6B\x5D\x65\x64\x3C\x7B\x31\x4E\x7F\xA7\x0B\x67\x66\x13\xA4\xA7\xE6\x46\xA7\xB2\x59\xA6\x44\xA8\x5E\x6C\xAC\x76\x44\x65\xA8\x81\xA6\x9B\xA9\x85\x5C\xE7\x88\xA7\x5D\xA4\xA4\x5F\xA3\x31\x61\xAE\x96\x94\xA7\x8E\x6B\x1B\x98\x8C\xA5\xA3\x26\x78\x32\x56\x31\x99\x54\x93\xA0\x4B\xA2\x56\xF4\x9D\x5E\xE8\x50\xA9\x18\xAC\x56\x0E\xA0\x00\x61\x62\x57\xAD\x9E\x5A\x21\x6F\x9E\x7A\x59\x5F\x64\x2B\x5F\x6C\x63\x7F\xFF\x59\xA1\x13\x60\x47\xE0\x4F\x63\xE3\x47\xA1\xAF\x5C\x5D\x67\x6E\x97\x39\x6E\x9E\x4D\x64\x4F\xE8\x60\x65\x81\x9C\x67\x54\x62\x53\x84\x45\x88\xC8\xA9\xAB\xD9\x63\x88\xB0\xA9\xAC\x66\x6C\x73\xCC\xAB\x64\xCE\xA8\x57\xBB\x5F\x64\x2B\x5C\x68\x98\x4E\x7D\x25\x03\xA8\x0B\xAA\xA8\xED\x3F\xA3\x75\xA0\xA8\x8B\xAA\x9A\x62\x64\xA5\x89\xA2\xAF\xED\x3F\x6D\x6A\x64\x69\x6E\x66\x52\x3C\x64\x68\x5E\x8F\x81\x8F\x45\xAE\xCC\x62\xAD\x0D\x49\x61\xA0\x5C\x61\x14\x43\x6D\x35\x5A\x66\xC9\x72\x6E\x01\xBE\x48\x75\x6F\xAF\xE6\xAE\x9C\xA6\x3D\x68\x99\x44\x6D\x1A\xB1\x69\x9F\x42\x3F\x37\x6D\x66\x3B\x41\x55\x97\x67\x35\x76\x6A\x69\x3D\x8F\x4A\xAE\x57\x8D\xB2\x20\x10\x64\xAC\x26\xF6\x11\x20\x23\x27\x15\xF0\xA3\x6A\x0D\xAC\x4B\xB8\x19\xB2\x0D\x7A\x21\x70\x34\x27\x1D\x1C\xA1\xB2\x92\xA2\x2F\xB9\xB3\x01\x13\x02\x84\x26\x9A\x0B\xA7\xB3\x0B\xA0\xB3\x01\x15\x02\x84\x24\xA6\x3C\x31\xB4\x07\x7A\x21\x27\x04\x28\xEC\xA5\xA0\xEE\xAF\x18\x48\xB5\xA0\x4A\xB0\x10\x98\x2C\xB3\xFF\x04\xA6\xB6\x30\xB5\x32\x7A\x21\xBB\x2E\xB5\x1F\x0C\x29\xFF\x02\x2E\xFF\x0A\x21\xE2\x21\xB3\x6E\xBF\xB6\x1B\x29\xB6\x1C\x2E\x24\x8B\x21\xB3\x8B\x26\x1F\x6D\xB3\x22\x2D\xBE\x28\x1F\x26\x2E\x6F\x71\x1B\x05\xB7\x16\xEF\x1B\x6E\x65\x39\x76\xEE\x66\xB4\x05\xA2\xB7\x24\x26\x1F\x75\xB3\x22\x77\xB1\x10\x79\xBF\x21\x7B\xBE\x24\x1A\x2E\xB7\x41\x76\x6E\x80\xB1\xAD\x67\x10\x24\xCF\x66\xB8\x8F\x18\xB8\x2C\x74\x22\x6A\xBF\x1E\xE8\x21\xB3\xF1\x20\xB9\x70\xBB\xB7\x70\xBC\x21\x6A\xB0\x24\x94\xB3\x22\xE8\x2C\xB8\x70\xB0\xBA\x55\xA6\x1F\x4A\x3F\xB6\x33\xB9\x6A\xE3\xAD\x5E\x91\xBC\xA3\x87\x65\xB2\x1A\x25\xB5\x70\xA8\xAF\x8F\x1A\xB8\x1C\x1B\xB2\x99\x20\xB7\x8F\xB0\x10\x8D\xBF\x21\xB4\xB6\x4E\xB6\xB0\xB7\xB9\xB7\x6D\x07\xA3\x62\x1F\x26\xBC\xFF\x0D\x86\x40\x26\xBA\x01\x12\xBB\x6F\xBF\xBC\xCF\x17\xBD\x6A\xB4\xB7\xA9\xBD\xBD\x01\x15\xBA\x23\x20\xBE\xA5\x36\x1F\x15\x3F\xB6\x3E\xB1\xA2\x24\xA6\x1F\x2C\x05\xBE\x67\xA1\x8C\xF6\x1D\x28\x6F\xBE\xB4\xC9\xB0\x10\xBD\xBA\x21\x93\xB3\x22\x96\xBE\x1A\x98\xBC\x5B\xF9\x83\xB8\x3C\x8D\x6E\x9F\xBB\xAA\x1B\x18\xBD\xDE\xBE\xB6\x40\x26\x1F\xE8\xBE\xBC\x0A\xCB\xBF\x7D\xAE\xBE\x31\xA1\xBF\x01\x13\xBF\xF9\xB8\x98\x14\xC8\xBF\x0E\xCA\xA5\x14\xCD\xBF\x01\x1F\xBF\x7D\xB1\x10\x7F\xB4\xC0\x7A\x4C\xB9\xAB\x87\x93\xBE\xBD\xAD\xA2\xBC\x21\xA4\xB0\xB7\xF6\x10\xC1\xB3\xB3\xC1\xEC\xB0\xB7\xEF\xB4\x17\x46\x92\xBF\xF4\xB0\x71\x61\xB1\x10\x1E\xC1\xB3\xFA\xB8\xB7\x3D\xCD\x32\x6E\xB8\xBD\xE2\x2C\x2C\x76\xB0\xB7\x59\xBC\x72\x5B\xBE\xA6\xC8\xA7\xB5\x3C\x1F\xBA\x00\x1D\x86\x03\xB4\x61\x9A\xB0\x00\xCC\x22\x65\x1A\x61\x48\x56\x12\xBC\xF1\xA2\xA9\xB2\x5F\x0F\x8B\x24\xC6\x01\x1F\x1E\xCC\x26\xBC\xCC\x2D\x86\xC6\xBB\x16\x13\x3F\xC2\x00\x1B\x2F\x6F\xCC\x11\xE2\x22\x2E\x1D\x0C\xBA\x01\x18\xBC\x73\xA4\xC7\x01\x16\x33\x7B\xC6\xBC\xE4\xB0\xC7\x14\xC5\xC6\xE2\x21\xC3\xFC\xB1\x10\xB7\xB4\xC1\x31\xBD\xC4\x55\xAF\xC4\x60\xC7\xAF\x62\xCD\x3E\x54\xC7\xA2\xE3",
"\x13\xB1\x04\xB9\xC5\x5B\xC8\xB0\x7D\x62\x48\x8F\xC7\x5C\xC4\xBC\x13\x40\x29\xC8\x31\xBD\xC9\x0A\x6A\xAC\x3C\x71\xC1\x6E\xB3\xBD\xF3\x95\xBD\xBC\x43\xC9\x1F\xA2\x58\xBB\xB3\xAC\xD0\xAA\x68\xED\x18\x2E\x97\x43\x4B\x13\xCA\xAD\xF6\x56\xC6\x00\x18\xC6\x78\xC7\xC8\x71\xCF\xCB\x5A\xC1\x10\x6C\xC2\x2E\x6E\xC2\xCC\x7A\xC2\xCC\x7E\xC2\xCC\x72\xC2\xCC\x0D\xC6\xBC\x86\xCC\xC7\x02\x11\x10\x8B\x22\x2E\xE6\x26\x1F\x8B\xCC\x1D\x49\xB2\xB4\x00\x14\xCA\x65\x64\x50\x67\x63\xC9\x56\xC6\xC9\x58\xC4\xCB\x67\x19\xC9\xD4\xAE\xC5\x10\x1E\xCD\xDB\x5F\xAD\xB2\x50\x24\xE6\x23\xCA\x13\xC2\xC5\x82\x2B\xBA\x01\x1A\xCA\xCC\x4C\xCA\x82\x4E\xCA\x8E\x1A\xCF\x14\xB1\xB8\xC3\xC0\x2C\x9A\xC5\xAD\x56\x18\xCF\xAC\xAE\xCF\x10\x16\xCF\xD8\xBC\x44\xC8\xBA\xB6\xE2\x20\x24\x6B\x1C\xB6\x01\x12\xCE\x95\xCE\xAF\x97\xC6\xCE\x01\xDE\x59\x7F\x4B\xC9\x5F\xC3\xCF\x9F\xC2\xC8\x6A\xCA\xBC\x4C\xCA\xCD\x5A\xBC\xCD\x50\xCD\xAD\xF4\xC4\xD1\xD4\x14\xCE\x4E\x60\xD0\xB6\xC1\x5C\xEC\xC1\xA9\xA6\xC3\xC6\x65\xCB\x28\xBE\xC2\xC8\xE2\x2C\x9F\xD2\xC9\xD1\xC5\xC1\x10\xCD\xC2\xC8\xC7\xC2\xC8\xC9\xC2\xC8\xCB\xC2\xC8\x81\xCB\xD3\xCF\xC5\xC8\xE7\xB8\xBA\x00\x19\xC8\xD8\xC3\x22\x8C\xC6\x4E\x8E\xCE\xD1\x91\xCF\x18\x2A\xDF\xBB\xFF\xC9\xC5\x2F\xDD\x68\x31\xD9\x65\x1F\xD1\xCA\x70\xBD\xD5\xDE\xA0\xCE\xA7\xC6\xCF\x00\x16\xD0\xB1\xA9\x5B\xAD\xC3\x22\xAF\xC1\xAC\xB2\xA9\x69\x15\xBB\xD5\x5E\x59\xCB\xAD\xA3\x62\xBC\xCE\xBB\x69\xC5\xC7\x01\x1E\x01\xC2\xCB\xC6\xC2\xC1\xD4\x3B\xDF\xD3\x3B\xD3\xD4\x3B\xD5\xD4\x3B\xD7\xD4\xC6\xB9\xD4\x67\xCB\xD4\xC0\xC5\x2E\xE6\xBF\xB6\x51\xDF\x1C\x53\xD8\xA8\x9E\xC5\xD5\x53\xC3\x22\xE3\xC6\xD1\xE5\xCD\x5B\x67\x12\xD7\x1B\x12\xD6\xF4\xC0\xCF\x61\xD4\xD5\x33\xDD\x3E\xA8\xC1\xB3\x68\xDC\xA0\xB1\xCB\xD6\x1F\x2D\xD6\x75\xD0\xD7\x00\xD8\xCE\x1B\xD4\xD0\x10\x19\xDA\xBA\xCD\x5E\x0A\xDA\xB6\x0C\xDC\xD4\x3B\xD0\xD1\x23\x22\x2E\x57\xD7\xC5\x2D\xDA\xD5\x01\x17\xCB\x27\xDE\xA4\x63\xD9\x5C\x2C\x61\xB7\xAD\xBD\xC7\x70\xBA\xD7\x1F\x2B\x2F\x6E\xDA\xD6\xC0\xB7\xCF\x74\xD8\xD0\x47\xCA\xB6\x30\xA0\x10\xF1\xC6\xD6\x3E\x2D\xDC\x00\x11\xD1\xBF\xDC\xDB\x1A\x2B\x2F\x96\x67\x4A\x3F\x49\x69\xC1\xB4\xDA\xEE\xCD\x3E\x70\xB8\xC4\x3E\xDE\xDD\xD8\xBB\x28\x6D\x82\xD1\xCC\xB4\xCD\x23\xC8\xDF\xB8\xB7\xDD\x35\xB2\x48\xA7\xD9\xBE\x13\xCE\xDD\x02\xE2\xDF\xDA\xD1\x10\xDD\xD3\xE0\xD8\xBE\xBA\x22\xD0\x10\xF6\x17\xE0\x1B\x26\xDB\xAF\xD2\x48\xBD\xBF\x1E\xC2\xD5\x3D\xEB\xD4\xD9\xA5\xCD\xDE\xC5\xBA\xB6\xC8\xBF\xD4\x1F\x27\xBA\xDC\xD2\xBD\xFC\xDB\xDA\x82\x4F\xB6\xF0\xD0\x10\x4A\xC3\xDE\x90\xD4\xD2\x4E\xC6\xD2\xA0\xDF\xD1\x77\xD7\xD7\xEF\x16\xDF\x1B\x43\xCD\x2B\xE3\x1A\xDB\xC1\xB5\x01\x1F\xE2\x96\xDC\x31\xA2\xC3\x22\x3C\xE5\xDA\x8F\x1F\xDF\x1F\x20\xE1\xD8\xDC\xCF\x00\x13\xDD\x12\x60\xDB\xC4\xD0\x10\xC6\xD6\xE4\xFD\xD3\x21\x36\xDA\xE2\x8E\xD6\xE3\x6E\xB1\xD9\xA5\x33\xD9\x51\xCF\xD5\x06\xE3\xDA\x18\xEF\xCD\xCA\xDC\x13\x44\xEF\xE0\x23\xE2\xAC\xAC\xDB\x21\xAE\xDE\xCF\x17\xDC\xD9\x19\xDC\xC5\x09\xBC\x4B\x50\xE4\xE2\x56\x13\xE0\x04\xE2\xCC\x99\x9B\xBA\x31\xEB\x28\x4C\x44\xE3\xB4\x4B\x28\x40\x24\x4B\x31\xBA\xBE\x74\x1D\xBB\xF6\x17\xC2\xFE\xBE\x93\x6C\x27\xD7\xDB\xDB\x21\xD0\xD1\x2A\x40\x22\xC2\xBD\xC3\xC1\x63\xE7\xE8\xF5\xB0\x14\x6C\x25\xE7\x82\xCF\xCA\x78\xE5\xD3\x01\x18\x5E\x40\x26\xBC\x39\xDD\xD7\xC4\xCF\xD7\x01\x13\xC7\xC6\xB2\xD8\xC6\xB4\xD8\xC6\xB6\xD8\xE2\x2E\xC1\x7E\xE0\xC4\x45\xC2\x7F\x93\xE9\xDF\x95\xE8\xA5\x77\xDB\xA7\x9F\xED\xE8\x3A\xD1\xD2\x55\xC4\xEA\x00\x16\xEA\xE2\x28\xEA\xE2\x2A\xEA\xE2\x2C\xEA\x01\x1B\xC7\xAF\xE0\x10\x7B\xC2\xC4\x88\xE7\x2D\x92\xB1\x10\xB2\x89\xD0\xB4\xEE\x86\xD8\xB8\x2E\xB4\x48\x2E\x89\xDA\xDF\x3B\xD1\xCD\x80\xCA\xED\x1A\x2B\x28\x0D\xD1\xEB\x37\x7D\xBB\x40\x28\x76\x3C\x4E\xDE\xD3\xE6\xC4\xB9\xD2\xCC\x9A\xE4\xE5\xD9\xCD\x2D\x73\x78\x74\x76\x76\xD2\x7B\xB9\xE7\x9D\xE3\xED\xA0\xE1\x10\x77\xC2\xC8\x7E\xD0\xD4\xA5\xEC\xCC\xFF\xE2\xD4\xC7\xEA\xCC\x03\xFD\xD8\x1E\xC3\xE6\x6B\x16\x74\x5B\x15\x77\x23\x7A\xE3\x2C\xBD\xEC\x40\x21\xC4\x7A\xBD\xEC\xB3\xEF\xF0\xB5\xE5\xA6\xB7\xE8\xEF\xBA\xE2\xEA\xBD\xEE\xEF\xBF\xE0\xF0\x1F\xF2\xF0\xCA\xE4\xF0\x23\xFD\xD8\x7B\xC8\xF0\x59\x17\x74\x5C\x13\xEF\x0E\xFF\xA9\x5C\x7C\x31\xCB\xE3\xF1\x17\xFC\x26\xE4\xE0\xED\xDD\x92\xED\x16\xF4\xED\x6A\xB6\xED\x8C\xD7\xD8\xDA\xE9",
"\xED\xF7\xD2\xC8\xD1\xCA\x21\x28\xF0\xEF\x20\x7B\xF2\x0D\xF3\xB6\xE9\xE2\x7F\xE1\xEB\xC1\x33\xFE\xEC\x1B\x25\xEE\x3B\x72\x5B\x94\xE9\x83\x74\xE2\xE0\xD8\xB7\xD4\x4B\xCC\xE0\xD6\xDE\xF4\x39\x83\xC9\x01\xC0\x39\x99\xB8\xD1\x06\xC5\x5D\x08\xCC\x13\x82\xE5\x13\x6A\xBD\xC0\x5B\xF4\xC1\x80\xE2\xF3\x5F\xF0\xC0\x26\xC7\xB9\x5A\x35\xB1\x2A\xC7\xF6\x2D\xC8\xDC\x20\xD3\xF4\x54\xE6\x1F\x6F\xFF\xEC\x4F\xF7\xF5\x27\x2E\xD0\x01\x1A\xD3\x9B\xEC\x21\x8B\x29\xA0\x7C\xBB\xD3\x76\xCC\xF1\x94\xCE\xF1\x56\x32\xC8\x82\xD2\x2E\x1A\xCE\xE8\x19\xC2\xEE\xC1\x75\xF1\x2E\xF2\x99\x77\xD9\x01\x13\xD2\xCC\x8D\xFC\xEF\xA3\xE0\xF9\xC0\xE1\xDF\x21\xF0\xF5\x73\xC9\xEC\x91\xFF\xC1\x17\xFC\x33\x35\xFE\x20\x37\xF1\xF5\x1C\xC5\xED\x01\x17\xA8\xA1\x29\xEA\x05\xF5\xD8\xB9\xFF\xED\x79\xC0\xEB\x5E\xFF\x84\x84\xE1\x10\x51\x80\x5F\x39\xFF\x84\x66\xD7\xE2\x00\x06\xF8\xEF\xDC\xE9\x00\x1A\xF8\x4E\x29\xEF\x00\x1B\xEF\x3B\xDD\xEF\x3B\xD0\xD8\xA7\xE1\xF0\x50\xF5\xF9\xAA\xF5\xF9\xCC\xED\xFA\xF5\xC6\xD6\x60\xBC\x11\x8B\x2E\xF9\x56\xE0\xFD\x00\x0C\xD7\xA2\xFD\xF1\xD5\xF8\xFD\xD7\xF7\xFA\xE2\x29\xFA\xD3\xE3\xC7\xDD\xFE\x86\xAF\xF4\x7F\x2B\x95\x5D\x55\xFB\x98\xB4\xF0\x10\xB6\xF4\xC8\xBD\xF5\xF2\xBA\x78\x00\xBC\x7C\x80\x08\xBC\x12\x78\xE0\x74\x7F\x23\x16\x3E\x03\x7E\xD9\x7E\xFD\x02\x7C\xF6\x44\x6C\x6D\x79\xD0\x79\x08\xBE\x4B\x20\x79\x7F\xF0\x33\x64\x8B\x12\xF5\x0C\x16\x9A\x4F\x13\x48\x43\xE6\x63\x3F\x20\x6E\xB0\x51\x80\x00\x72\xD0\x64\x49\xCB\x7A\x5F\x18\x84\x40\x25\x0E\x73\x11\x80\x64\x43\x00\x5B\x48\x68\x47\x03\xAB\x40\xC1\x7C\xDC\x42\x66\xF4\x78\x73\x6A\x5B\x51\x1B\x01\x9F\x7D\xE8\x68\x7F\xF4\x63\x7D\x50\x7D\x7D\x56\x7C\x80\x02\x04\xF3\x7F\x62\x5A\x7C\x39\x66\x25\x06\x4B\xFD\x70\x9F\x3C\x80\x51\x07\x7D\xED\x7B\xF5\x43\x80\x00\x08\xBC\x5C\x7C\xDC\x6B\x4C\xC1\x78\x20\x0B\x80\x0B\x87\x8E\x47\x7C\xE1\x71\x7E\x98\x72\xFC\x41\x09\x1D\x81\xF4\x0C\x7F\x5E\x6E\x7C\x6D\x42\x5C\x02\x82\xD5\x75\x04\xD7\x81\x2A\x48\x82\x17\x67\x3E\x4C\x83\xF8\x45\x06\xED\x60\xFB\x61\x76\xD8\x7B\x0A\x95\x82\xCC\x72\x99\x59\x80\x95\x28\x48\x5C\x83\x19\x48\x71\xF1\x5E\xED\x30\x5F\x63\x60\x00\x31\x7F\x00\x8F\x42\x22\x6F\xFB\x72\x3C\xD8\x73\x7B\x02\x65\xEE\x40\x69\xB2\x7C\x6E\x1E\x5C\xDA\x73\x60\x0C\x65\x10\x9F\x11\xD8\x5B\xFB\x6E\x80\x03\x4C\x84\xAC\x79\xEE\x65\x60\xD6\x01\x09\xE7\x34\x46\x77\x7B\x96\x81\xEF\x4D\x2D\xBD\x7D\xF3\x6D\x7A\x7D\x09\x84\x0C\x86\x0D\x60\x84\x23\x82\x7F\x59\x6E\x30\x7E\x81\x38\x80\xF1\x41\x08\xD6\x4C\xE8\x3D\x7A\xEA\x63\x73\x49\x83\x45\x64\x50\xCD\x79\xF6\x40\x08\x0D\x95\x81\x24\x10\xB0\x63\x80\x09\x65\x02\xCA\x4E\xD2\x65\x7E\xA9\x41\x05\x80\x08\xD5\x36\x1F\x50\x4D\x50\x21\x7F\xD8\x5A\xB0\x4B\x87\x0D\x18\x20\x26\x83\x33\x92\x81\xC4\x42\x1A\xA0\x41\x4C\x66\x9E\x04\x4D\xB4\x20\x87\x4E\x4F\x18\xAA\x86\x90\x64\xFD\x6A\x85\xD6\x7A\x84\x1B\x16\x49\x36\x0E\xF9\x7E\x09\xCB\x47\xFD\x5C\x83\xE3\x3B\x16\xB5\x87\xAF\x3B\xF8\x15\x5C\x24\x82\x7B\x28\x61\xA8\x14\x85\xC2\x5C\x43\x07\x5C\x26\x8B\x7B\xF0\x82\x43\x32\x87\x3C\x8B\x0F\xD4\x4B\x3D\x8D\x84\x9F\x84\xBC\x4D\x88\x8F\x1F\x08\xA4\x84\x40\x96\x7B\x01\x0D\x73\x45\x89\x04\x6F\xE5\x2E\x08\x2B\x80\x08\x63\x74\x13\xA7\x7C\x5A\x87\x8E\x0F\x89\x28\x8B\x84\x12\x8A\x11\xB5\x85\xC1\x7C\x21\x1A\x13\x8F\x6B\x87\x31\x59\xC1\x5F\x7D\xB7\x5B\xBC\x35\x71\x2A\x65\x73\x6F\x6A\xC2\x64\x80\xAC\x6B\x5B\x17\x73\x96\x7D\x71\x0F\x87\x10\x9C\x5E\xAE\x7D\xD4\x22\x71\x47\x87\x68\x51\x70\xE7\x42\x67\xEC\x53\xED\x5E\x81\x4B\x92\x35\x30\x8E\x16\xA4\x10\xAD\x79\x00\x87\x85\x1B\x9F\x10\xC1\x82\x47\x58\x60\x80\x06\x05\xAA\x89\x49\x9E\x7D\x27\x8B\xF8\x3A\x86\xAF\x8F\xF2\x15\x8B\xD5\x05\x85\x63\x7C\xCD\x43\x89\x15\x67\x0E\xC5\x87\x02\x68\x88\x65\x81\x66\x73\x60\xA8\x8E\xB6\x59\x8A\x7D\x53\x2E\x3C\x60\x22\xB6\x86\xB0\x84\x12\xC1\x3F\x58\x91\x85\x2D\x1E\x2C\xA7\x60\x8C\x80\x10\x1A\x89\x09\x4A\x85\xAE\x2F\x23\x9F\x7E\xB7\x5B\x10\xC4\x80\x0E\x71\x83\x78\x8F\xF2\x7A\x8A\xC9\x46\x12\xFD\x88\xFA\x3F\x8B\x81\x84\x1F\xB1\x88\xB5\x5A\x21\x26\x01\x54\x92\x8A\x1C\x0C\x2A\x9F\x71\x99\x8B\x21\x61\x7A\xD0\x21\x88\x12\x13\x2D\xB8\x7A\xB7\x8B\xD3\x7F\x04\xDB\x74\x72\x82\x8C\xEE\x66\x84\x36\x78\x0A\x9B\x8B\x25\x87\x8A\x1B\x0A\x31\x9A\x7D\xCD\x8F\x14\x80\x0A\x01\x9F\x8C\x20\x6A\x34\x9B\x10\x91\x88",
"\x46\x13\x8D\x3E\x89\x89\x80\x8E\x11\xB2\x7A\x8B\x87\x1A\x95\x5A\x6A\x89\x85\xAC\x89\x13\xB1\x8A\x43\x84\x14\xC5\x8D\x58\x91\x88\x8D\x6E\x32\x99\x19\x7E\x8D\xE5\x4C\x8F\x00\x64\x8C\x98\x18\x3A\x81\x71\xD6\x8C\xF7\x1F\x11\x4D\x9F\x8D\x99\x8F\x38\x99\x8F\x89\x86\xE9\x20\x8F\xDA\x41\x08\x72\x10\x38\xBC\x8C\x12\x1A\xE0\x6F\x59\xA3\x7A\x10\x14\x74\xA5\x56\x71\x1D\x7C\xDE\x64\x6B\x18\x7C\x70\x42\x8E\x01\x9C\x8C\xC9\x82\x1F\xDF\x6F\xDC\x49\x88\xA4\x89\x2F\x97\x8F\xBD\x8E\x1B\xF8\x87\x0C\x98\x8C\x4B\x7F\xE6\x31\x8C\xB4\x88\x1A\xED\x0F\x73\x96\x8D\x88\x8B\x41\x52\x8F\x50\x11\xB3\x0D\x8C\x00\x1D\x8A\xC9\x8F\x2B\x8D\x90\xE3\x8F\x20\xC8\x8D\x7A\x94\x88\xCB\x8F\x2C\x97\x88\x80\x65\x1B\x87\x8C\x6B\x9A\x8D\x70\x5C\x38\xA0\x91\x13\x94\x8C\x15\x8C\x7B\x98\x52\x10\x90\x1A\xB7\x39\x02\x9B\xBA\x00",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

			IMPL_TYPE_INFO_RENAME(GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_attributeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->attributeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_attributeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->attributeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_typeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->typeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_typeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->typeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_referenceName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->referenceName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_referenceName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->referenceName.value = value; })

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				CLASS_MEMBER_PROPERTY(attributeName, get_attributeName, set_attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				CLASS_MEMBER_PROPERTY(typeName, get_typeName, set_typeName)
				CLASS_MEMBER_PROPERTY(referenceName, get_referenceName, set_referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_CLASS_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_BASE(vl::reflection::IDescriptable)
				CLASS_MEMBER_EXTERNALCTOR(Ptr<GuiIqQuery::IVisitor>(Ptr<IValueInterfaceProxy>), {L"proxy"}, &interface_proxy::GuiIqQuery_IVisitor::Create)

				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_CLASS_MEMBER(GuiIqQuery)

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
