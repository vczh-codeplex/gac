#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n"L""
L"\r\n"L"class Query"
L"\r\n"L"{"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"enum NameOption"
L"\r\n"L"{"
L"\r\n"L"\tSpecified,"
L"\r\n"L"\tAny,"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"enum ChildOption"
L"\r\n"L"{"
L"\r\n"L"\tDirect,"
L"\r\n"L"\tIndirect,"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class PrimaryQuery : Query"
L"\r\n"L"{"
L"\r\n"L"\tChildOption\t\tchildOption;"
L"\r\n"L"\tNameOption\t\tattributeNameOption;"
L"\r\n"L"\ttoken\t\t\tattributeName;"
L"\r\n"L"\tNameOption\t\ttypeNameOption;"
L"\r\n"L"\ttoken\t\t\ttypeName;"
L"\r\n"L"\ttoken\t\t\treferenceName;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class CascadeQuery : Query"
L"\r\n"L"{"
L"\r\n"L"\tQuery\t\t\tparent;"
L"\r\n"L"\tQuery\t\t\tchild;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"enum BinaryOperator"
L"\r\n"L"{"
L"\r\n"L"\tExclusiveOr,"
L"\r\n"L"\tIntersect,"
L"\r\n"L"\tUnion,"
L"\r\n"L"\tSubstract,"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class SetQuery : Query"
L"\r\n"L"{"
L"\r\n"L"\tQuery\t\t\tfirst;"
L"\r\n"L"\tQuery\t\t\tsecond;"
L"\r\n"L"\tBinaryOperator\top;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"token INDIRECT = \"////\";"
L"\r\n"L"token DIRECT = \"//\";"
L"\r\n"L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n"L"token WILDCARD = \"/*\";"
L"\r\n"L"token OPEN = \"/(\";"
L"\r\n"L"token CLOSE = \"/)\";"
L"\r\n"L"token XOR = \"/^\";"
L"\r\n"L"token INTERSECT = \"/*\";"
L"\r\n"L"token UNION = \"/+\";"
L"\r\n"L"token SUBSTRACT = \"-\";"
L"\r\n"L"token ATTRIBUTE = \"@\";"
L"\r\n"L"token COLON = \":\";"
L"\r\n"L"token DOT = \".\";"
L"\r\n"L""
L"\r\n"L"discardtoken SPACE = \"/s+\";"
L"\r\n"L""
L"\r\n"L"rule PrimaryQuery QPrimaryFragment"
L"\r\n"L"\t=\t("
L"\r\n"L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n"L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n"L"\t\t)"
L"\r\n"L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n"L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n"L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule PrimaryQuery QPrimary"
L"\r\n"L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n"L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n"L"\t= \"(\" !QueryRoot \")\""
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Query Query0"
L"\r\n"L"\t= !QPrimary"
L"\r\n"L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n"L""
L"\r\n"L"rule Query Query1"
L"\r\n"L"\t= !Query0"
L"\r\n"L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n"L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n"L"\t;"
L"\r\n"L"\t"
L"\r\n"L"rule Query Query2"
L"\r\n"L"\t= !Query1"
L"\r\n"L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n"L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Query QueryRoot"
L"\r\n"L"\t= !Query2"
L"\r\n"L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 6347; // 25801 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 203;
const vint parserBufferRows = 7;
const char* parserBuffer[] = {
"\x00\x00\x80\x84\x01\x8C\x01\x83\x20\x00\x61\x00\x33\x20\x03\x30\x84\x00\x32\x00\x65\x00\x11\x20\x05\x39\x88\x00\x72\x00\x39\x20\x0F\x7D\x8F\x7F\x82\x00\xD0\x18\x80\x09\x30\x01\x36\x87\x19\x9B\x94\x96\x82\x89\x94\x8E\x8F\x05\x01\xAB\x97\x8E\x96\x8F\x7E\x04\x01\xD3\x17\x94\x33\x8D\x88\x9A\x8D\x2F\x9D\x8B\x04\x86\x86\x87\x85\x86\x09\x90\x92\x93\x9D\x90\xA1\x98\x80\x0D\xE8\x24\x80\x0C\x37\x85\xA1\x8F\x45\x89\x87\xAE\x8A\xA5\x9C\x97\x91\x1B\x86\x01\x90\x38\x97\x8A\x36\x00\x3C\xB6\xA0\x80\x02\x91\x8D\x93\x93\x09\xAE\x8C\xA0\xB0\x05\x05\x81\x84\x3C\xBC\xAE\xA0\x02\x36\x9C\x9E\x89\x4E\x0E\xA7\x92\x8A\xB1\x81\xB7\xA9\x70\xF4\xB3\xAE\x93\x0F\xB8\xB5\xC7\x7B\xFD\x96\x9F\xB0\x01\xC1\x85\xC1\x00\x4F\x00\x04\xBC\x9D\x93\x36\x00\x67\x85\xE1\x83\x9F\xB5\xB2\x94\x9F\x4D\x9B\x83\xB0\xA0\x02\xA9\x93\xAA\x10\x9A\xDC\xD3\xAF\xC9\xD2\x8F\xB5\x87\xA5\xF1\xA0\xAB\xC0\xA2\xBA\x80\x19\x92\xA6\x3F\x92\x8F\xB1\x86\xC0\x82\x97\xA2\xCC\xB4\xD6\x92\xD2\xAF\x3F\x9B\xB8\x80\x8C\x9B\x8C\xB2\xE4\x97\xCA\xF7\xC6\xCD\xE1\xC6\xB8\xD4\x74\x8E\x01\x95\xEB\xCF\x8A\xCA\xE7\x12\xB2\xCF\xDE\xC0\xD7\xAB\xE8\x00\x3A\x92\xBC\x9D\xDB\x8F\xA4\x01\xE1\x25\x99\x8B\x89\xBE\x8F\xF5\xF9\xC7\xF4\x40\x02\x01\x40\x9F\x64\x56\x4E\x7F\x3B\x50\x79\x68\x00\x62\x40\x4B\x42\x44\x0D\x75\x66\x56\x4D\x11\x01\x4F\x09\x40\x15\x81\x4A\x85\x40\x36\x76\x4B\x84\x87\x1D\x9D\x4F\x84\x40\x21\xA2\x83\x89\x89\x37\x41\x49\x11\x65\x00\x04\x10\x03\x8A\x52\x00\x05\x10\x00\x07\x54\x10\x03\x40\x00\x57\x8A\x8C\x00\x17\x9A\x86\x4D\x83\x2D\xAF\x80\x01\x8C\x33\xB5\x82\x82\x85\x3C\x80\x01\x00\x88\x1D\x78\x8C\x89\x10\x00\x0D\x12\x8C\x00\x15\x01\x4B\x16\x43\x2D\x00\x0A\x1C\x00\x50\x99\x9A\x14\x00\x5F\x00\x0D\x14\x00\x57\x89\x49\x97\x96\x5D\x80\x0F\x94\x0C\x00\x19\x99\x0E\x98\x00\x2A\x07\x90\x89\xFD\x41\x47\x16\x90\x4C\x01\x97\x40\x94\x31\xAE\x83\x81\x8E\x71\x80\x03\x00\x93\xFF\x0E\x9A\x66\x48\x33\x81\x6F\x9D\x92\x28\x37\x84\xA2\x7D\x07\x79\x9A\x66\x4E\x33\x8B\xA7\x85\x0A\x00\x36\x76\x4F\xA0\x00\x58\x19\x67\x90\x73\x89\x9E\x14\x83\x84\x89\x0A\x88\x8B\x36\xB3\x81\x8C\xA5\x34\x80\x06\x8E\xA5\x81\x87\x0F\xA1\x40\x55\x2C\x8B\x8A\x66\x8A\x88\x9B\x08\x00\xEF\x76\x46\xA8\x40\x3A\x75\xA2\x10\x7C\xAE\xA0\xA0\x96\x91\x4B\x80\x49\x97\xAF\x57\x4C\xB0\x96\x8D\x36\xB1\x8B\x8B\xB0\xB5\xA9\xAA\x91\x40\x40\x00\x0A\x03\xAC\x00\x47\x4A\x66\xA4\x2C\x89\xB0\x02\x0E\x00\x2B\x67\x54\xA7\x41\x9A\x66\x8E\xB8\x2E\x00\x0B\x5A\x4D\xE2\xB6\x7A\x4E\x48\xC7\x93\x98\xBB\x85\x0B\x7B\xAF\x6F\x55\x3D\x80\x02\x06\x4C\xCC\x7B\x5E\x74\x50\x50\xB9\x5D\x72\x64\x8F\x52\x40\x44\x07\x00\xF9\x6E\x73\x6E\x1B\x45\xC0\x67\x54\x08\xD4\x60\x45\xBB\x31\x9F\x6F\x64\x4F\x3A\x7C\x4B\x6C\x4F\x17\x01\x4F\x31\x09\x20\x00\x04\x08\x00\x3C\x3D\x4E\xC3\xC0\x11\xCF\x6A\x5C\xC5\x7E\x57\x40\x46\x0F\xFE\x8D\xCD\x77\x73\x12\xEF\xC5\x49\xC5\x32\xC0\x08\x06\xCD\x02\xF8\xCE\xCB\xC1\x31\xCA\xC0\x01\xBB\x1D\xE5\x5C\x4E\x05\x01\x77\x20\x01\xC9\x29\xD4\x4B\xCA\xD0\x06\xD1\x65\xD2\x55\x34\xFF\xB0\x42\xD4\x37\xD0\xCC\x97\xD0\x56\xD3\x6D\xCC\x05\x40\xC8\x64\xD7\xC4\x3B\xD7\xD7\xC4\x00\x31\x0F\x60\x41\xD4\x01\xE6\xDE\xD5\xCE\x44\xE2\xD6\xD0\xCD\xE4\xA5\xC2\x08\x00\xD9\xBB\xD3\xC9\xC9\x57\xA5\xC1\x60\x94\x52\xB3\x85\xC9\xDE\x0E\x55\xD0\xCE\xDD\x2C\x99\x72\x45\xC9\x63\xBA\xD3\xB8\x00\x7B\xE5\xC1\x0A\xCA\x5D\xF4\x56\x13\x48\x09\x67\x18\x79\x7B\x3C\x65\xC7\x1F\x54\x3C\x52\x55\xCB\x1E\x4F\xC9\xE8\xD8\x5F\x57\xE7\x78\x66\x7A\x9D\x40\x02\x85\xC9\x3D\x29\xEB\xDE\x4E\xD7\x4C\x43\x54\x7E\x3D\xD5\xE0\x01\x1F\x00\x10\x05\xDA\x6E\x9A\xDC\xE0\x02\xE7\x98\x67\x5C\x4E\xD6\x98\xC1\xDE\xD7\xE6\x19\x5D\xEF\xE6\xF2\x47\xEC\xD0\x01\x2A\x01\x70\xD3\xD7\xF3\xC6\xC8\xF6\x5B\x63\x78\xE9\xED\xA1\xC9\xE3\xCF\x91\x97\x94\x87\xE9\xE4\x79\xEE\xAE\xD7\x42\xE8\xE9\xAD\x69\xE8\xE9\xC9\xEB\xE6\x79\x71\x7A\xE5\x71\xE3\xEC\x00\xB5\xD2\xE8\xEF\x45\x0D\x25\x24\xEF\x46\x6E\x76\xE0\x65\x60\x53\x25\x7C\x0E\xF8\x36\x71\x50\xDF\x63\x75\x24\xA5\x72\x7E\xFA\x40\x2C\x7D\xFB\x5F\x53\x36\xEC\x27\x2C\xED\x0C\x80\x4B\xB3\x1B\x25\x80\xA9\x68\x80\x00\x18\x5F\x6E\x32\x4C\x85\x5D\xBE\x63\x73\xF9\x06\x73\x73\x92\x41\x3F\x3E\xC4\x2D\x3F\x71\x0D\x7F\x72\xC8\x69\x72\x2B\xA9\x7B\x7A\x62\x60\x3E\x24\xE1\x5B\x69\x6E\xC4\x6E\x24\xF4\x0E\x2E\x7B",
"\xE2\x0F\x34\x79\x5C\x6E\x79\xF1\x51\x77\x79\xE9\x4F\x35\x5D\x32\x17\x79\xF6\x4D\x72\x6F\x25\x84\x8E\x89\x3C\x21\x7C\xF9\x0B\x82\x71\xAF\x45\x71\x75\x88\x75\x7C\x76\x35\x80\x01\x07\x8F\x36\x74\x00\x13\x7F\x63\x56\x36\x7E\xC7\x57\x83\x3D\xB2\x6D\x3F\x06\xFE\x75\x3C\x08\x7B\x73\x2A\x04\x89\x76\x01\xA3\x89\x74\x05\x9B\x8A\x72\x72\x4E\x80\xFC\x68\x8A\x8C\x31\xB4\x87\x75\xF9\x74\x36\x1C\xFC\x7C\x83\xF6\x1F\x82\x8F\x21\x91\x91\x09\x81\x74\x73\xEA\x69\x86\x8B\xE8\x6D\x87\x48\x42\x31\x86\xE3\x2D\x8C\x8C\x91\x66\x29\x0E\x99\x7F\x3B\xAF\x2E\x20\x89\x40\x8F\x60\x5D\x74\x61\x6D\x84\x56\x2C\x6C\x3F\x9A\x86\x4B\x2C\x9B\x70\x57\xAB\x6C\x06\x6E\x68\x64\x15\xC1\x84\x60\xB0\x75\x96\x62\x00\x1A\x89\x25\xFD\x69\x74\x4A\xAA\x87\x8B\xE9\x65\x64\x5E\x2B\x7C\x67\x31\x98\x36\x86\x92\x64\x5E\xDF\x24\x60\x01\xCB\x49\x8D\x8A\x42\x9D\x78\x16\xA9\x76\x8D\x08\xA7\x77\x86\xBE\x89\x6C\xE3\x6D\x78\x7E\x0C\xB1\x8A\x83\x8C\x94\x8D\xEE\x01\x80\x87\x92\x39\x8D\x64\xC0\x68\x96\x2C\xBD\x9A\x70\x71\xB6\x90\x00\xB0\x9B\x96\x2A\xB3\x91\x9C\xD6\x4C\x73\x6D\x33\x19\x96\xF6\x24\x94\x9E\x66\xAA\x69\x98\x9A\x9B\x6C\x31\x80\x79\x75\x63\x99\x90\x71\xCB\x9A\x66\x3F\xAE\x94\x9D\xD4\x63\x4D\x84\x7B\x72\x99\xEA\x56\x99\x94\x96\x40\x03\x88\xD2\x69\x7B\x63\x6F\x70\x83\xF8\x5F\x9A\x99\xFD\x8D\x9B\x21\x97\x20\x76\x45\xA8\x9D\x7F\x95\x9F\x7E\x1D\x82\x88\x8E\xAB\x20\x86\x87\xFA\x9E\xA0\x48\xCD\x82\xA5\xE5\x43\x7B\x9F\x40\x3B\xA5\x11\xA0\x75\x7B\x80\x98\x7F\x6D\x39\xAF\x3A\x50\xDB\x92\x99\xF2\x65\x7E\xA1\x2C\x81\x8C\x05\x9F\x9F\x99\x32\x83\x92\x82\xF4\x73\xAA\x33\xAC\xA9\x91\x0C\xA9\x70\xA6\xB7\x75\x8E\xEE\x34\xAE\x9C\x9B\x90\x97\x80\x7D\x9C\x89\x25\x81\x9C\x9B\xAB\xA7\xA3\x8D\x62\xB5\xA1\x4B\xDE\xA3\x8F\x4A\x9D\x80\x28\x20\x88\xAE\x5E\xA6\x82\x72\x14\x80\x05\x84\x50\xA0\x8D\xEA\x2F\x83\x39\xA6\x06\x8B\x86\x15\xB0\x9A\x28\xA5\x63\x9F\xD3\x26\x90\x28\xF2\x84\xA1\xCB\x75\x93\xA2\x60\xB9\x9F\x9A\xBC\x93\xB2\x41\xFF\x95\x7B\x1A\x00\x03\x18\x53\x98\xB0\x50\x9A\xB2\xA2\x95\xB3\x61\xA1\x7C\x75\x90\x43\xDD\x84\x71\x87\xA0\x9C\xB2\x2A\xA9\xB0\x9C\x51\x9A\xB5\x6A\x89\xAC\x7B\x4C\x83\xA8\xF5\x25\x8D\x9A\x93\xA9\x8F\xB5\x9B\xB4\xA2\x05\xF3\xA7\x9D\xAF\x8C\x82\xA6\x63\xAD\x9D\xEF\x10\x96\x2F\x6D\x43\xA2\x89\xFC\x90\xB7\x41\xC2\x9C\xA3\xC6\x9F\xA2\x9B\x3D\xBF\xAC\x35\xBD\xB4\x90\xE0\xA5\xB5\x75\xC3\xBD\xA9\x71\xF5\xAB\x6F\xBB\x8F\x90\x9E\xC1\x7F\xA6\x4E\xD8\xBF\x7A\x9E\x3F\x61\x96\x92\xB7\xB9\x6E\xDB\x98\x63\x38\x9B\x63\x4A\x67\x30\x21\x95\x00\x27\x65\xE7\x98\x99\xA8\xEC\xA6\x89\x16\xA9\x73\x64\x9C\xA2\xB3\xBD\xF3\xB9\xB9\x64\xD0\xB0\xC1\x04\xED\xBD\xB3\x52\x88\xAB\x81\xCA\xA1\xC0\xA2\x8D\xAA\xAD\x81\xA9\x98\x5C\x95\x8E\x8C\x92\xA7\x88\xAB\x1B\xD4\xA8\x57\xE6\x9B\x7E\xB0\x84\x5B\x9D\x77\x85\xAC\x44\x79\xAC\x8F\x04\xAA\xAB\x6F\x6C\xBE\xC2\x37\xBF\xB9\xAA\x36\x9B\xAD\x9C\x70\x85\xC5\x23\x9E\x85\xB7\x3D\xA2\x82\x84\x94\x9B\x6E\x5F\xAC\xBB\x84\xC1\xAE\x87\x22\x85\xBB\x92\x0C\xA2\xCF\x71\xD9\x8B\xB5\xA3\xCF\x21\x43\xC8\x0B\xCF\xBE\xD2\xB5\x6F\x9E\x1A\x0A\xBF\xD9\x5F\xBC\xB3\xFA\x9A\x67\x31\x33\x59\xBC\x00\x21\x6C\xBE\x5D\x93\xC3\x6E\x29\xB3\xB8\x81\xA5\x0F\x3D\x33\xF4\x2B\x5B\xF0\xAC\xC3\x46\x6D\x51\xA0\x5B\x21\xB0\xCA\x5E\x77\xC2\xE4\x3B\x42\x91\x92\x9D\xBD\x64\x51\x33\x28\x6C\x6F\x8A\x7F\x45\xA6\xC3\x45\x62\xD9\x3C\x00\x8F\x3C\xC4\x11\x95\xB9\xBE\xB4\x96\x9C\x30\xA3\x6D\xB8\x33\xF8\xCC\x2E\x7A\xD5\x93\x85\x7D\xCF\xC3\xB7\x81\xD7\x35\x56\x24\xBA\x8E\x92\x7E\x44\x45\xF6\x8C\x27\x8D\xDB\xA3\x6D\xAB\x99\xCC\xCE\x94\xD2\x5B\x96\xD6\xBA\x30\xFB\x6D\x50\xDF\x5C\xA7\xB1\x1B\x39\x61\x1C\xA1\x75\x92\x4C\x53\x98\x48\x01\x4C\x4D\x9B\xBC\x80\x28\x36\x6D\x5D\x6D\x14\x32\xC0\xB1\x9B\x2C\x4C\xEA\xAB\xD6\x25\xAF\xCE\xBA\x82\x74\x2D\xD8\x4D\x81\xDE\xC8\xE5\x3B\x36\x80\xA9\x7E\xCC\x97\x1A\xC7\xD3\x54\x36\x28\x4A\x8B\x25\x65\x83\x38\x80\x29\x56\x2B\x2B\xB2\xDA\xB0\xD9\x75\xC2\xD8\x60\xB8\xC0\x02\xB1\x80\x01\xA1\x1D\x37\xC9\xDE\xD5\xC8\x73\xB5\x9A\xC4\x2C\x6D\xC4\xAD\x64\xDD\xC0\x2B\xB7\xF1\x70\xD4\x88\x23\xD9\x75\xE6\xCA\x22\xEE\x49\x27\x22\x29\xEC\xCA\xCB\x5E\x66\xC3\xA5\xAE\x2E\xCB\x5D\xF8\xBE\x2A\xFB\x5D\xBF\xB3\xC0\x24\x67\x92\x63\x65\xDD\xF8\xDC\x54\xBC\xD1\x32\xDF\xEA\x51\x8E\xDE\xCA\xC1\xE6\x30\xFB\xDA\x93\x7E",
"\xCA\xCB\xB7\xD4\x81\xE3\x46\x03\xEE\x35\x70\xC6\xE7\xC9\x09\xFB\x28\xC3\xEA\xD1\xDE\x90\xE4\xE4\x4D\xE2\x3F\x85\xC8\x95\xE7\xBF\x30\xD6\x2E\x5C\x1A\xF7\xD9\xC7\xEC\xD3\xE5\x05\x6D\x6B\xD8\xF1\xCD\x6F\xB1\x80\x0E\x17\x7B\xE4\xE5\x6D\xCE\xD7\xD9\xB4\x96\xD1\xEA\x84\xBA\xDB\xDD\x6D\x7A\xC0\xEF\x7A\x33\xA5\x4A\xA3\x56\x77\x2C\xE8\x73\x83\x3A\x72\x43\x9B\xF8\x85\x64\xFF\x33\x3F\xBA\xB2\xCE\xB6\x35\x85\x46\xB8\x92\x73\x44\x1E\x3A\x75\x2A\x8B\x0B\x25\x24\x76\x1C\xA9\x46\x20\x8B\xEA\xB8\x5D\xEB\xE5\x60\xF8\xDB\xD8\x8A\xEC\xD6\x18\xF5\xB1\xED\xA9\x6B\xED\x84\x6D\x3E\xEC\x85\xF0\xE9\x41\x01\x54\xEF\x9F\xF1\x84\x2C\xF2\x82\x4C\x7A\x4D\x32\xF0\xA3\x90\x9F\xE3\xA6\xF4\x2F\xE9\xA6\xEE\x26\xD4\x80\x08\x96\x55\x16\xEE\xE9\x5E\xFC\xD9\xE2\xE2\xE3\x2A\xB2\xCD\xF0\x00\x67\xF2\xF5\xC8\x9A\xC2\xF5\xB6\xE0\x9C\xDC\xC4\x52\x3F\xB4\xD0\xDB\xBA\xB7\xB4\xC4\xF3\x78\xF5\x92\xDE\xFC\xEE\x27\xBF\xC0\x01\xF0\xF8\x63\xF0\x73\xB0\xD6\xF1\xAB\xF1\xF0\xE0\xB3\xFA\x93\xE2\xFB\x3C\x81\x18\xC3\xFD\xD8\xD8\xDD\xF4\xE5\xBF\xF9\x75\xB8\xDF\xFB\x23\xBC\xA6\xFA\xDD\xE5\x3E\xF2\x44\xEE\x94\xEC\xA7\xDD\xC6\xC8\xF1\xC5\xCA\x58\xF4\xF9\xB3\xD5\x6D\x6D\x25\x77\xC2\xD6\x4D\xA5\x7B\x6F\x7C\x6A\x5D\x9A\x70\x62\xE0\x63\x68\xA2\x66\x68\x0C\x4E\x7E\x10\x16\x6A\xBA\x38\x6A\x67\x5D\x62\xB6\x52\x73\x5F\x32\x5D\x9C\x55\x69\xFE\x58\x7F\x99\x60\x80\x95\x49\x7E\x7E\x64\x80\x04\x76\x73\x84\x6E\x52\xC9\x7B\x37\xA5\x6A\x64\x0D\x1E\x80\xE8\x5B\x57\x8F\x62\x67\x13\x81\x5C\xC0\x43\x6C\xD6\x50\x67\x1B\x73\x67\x00\x01\x45\x1F\x0C\x7F\xF1\x53\x6B\x00\x05\x6B\x02\x81\x81\xEB\x6A\x6B\xF7\x52\x39\xBE\x64\x2A\x42\x76\x7D\x50\x76\x7D\x50\x40\x00\xAE\x79\x72\xD6\x78\x78\x5D\x74\x7B\x8A\x6C\x7D\x18\x5D\x40\xBA\x7F\x73\xE1\x7B\x68\xBE\x77\x70\x97\x72\x7C\x99\x76\x55\x1D\x8F\x56\x77\x7D\x7E\x44\x51\x7A\x8B\x68\x82\xBF\x35\x17\xD4\x77\x7E\xD6\x3E\x84\xD6\x70\x85\x23\x12\x85\xD4\x4B\x37\xB9\x78\x7D\xBB\x7A\x49\xE2\x72\x66\x5A\x81\x7C\x00\x23\x77\x5E\x8D\x69\xC7\x71\x86\xE9\x4A\x7C\x00\x0B\x77\x0D\x1D\x77\x0A\x70\x78\x82\x72\x7F\x3E\x70\x7B\x41\x7A\x86\xAB\x70\x84\x60\x63\x7E\x48\x7C\x75\x4D\x8B\x66\x8B\x84\x17\x51\x47\x84\x0B\x21\x45\xED\x28\x4B\xB8\x0F\x7A\x98\x87\x7D\x6A\x81\x45\x6E\x86\x7B\x0C\x49\x25\x68\x79\x7D\x6A\x78\x85\xE3\x79\x87\xE6\x7D\x85\xDC\x50\x62\x80\x86\x62\x3A\x16\x11\x7D\x1C\x7D\x4C\x47\x82\xF2\x75\x78\xA3\x82\x8A\x01\x24\x8A\xDA\x75\x7B\x8C\x7C\x40\xBB\x29\x8A\x4F\x86\x87\xAC\x88\x87\x4F\x6F\x8A\x7C\x81\x8B\x60\x8C\x7E\x81\x8B\x37\xB5\x27\x16\x5E\x54\x78\x25\x06\x81\xBD\x89\x75\x89\x75\x7A\x45\x8B\x89\xF3\x7D\x8B\x74\x60\x00\xA4\x00\x8A\x2E\x11\x45\x6C\x8E\x8D\xA5\x83\x8C\x92\x35\x8C\x55\x80\x7B\xBC\x79\x8C\xE2\x6B\x8C\x98\x7B\x6E\x1C\x8E\x87\xEB\x7D\x79\xD1\x80\x00\xD3\x82\x82\x20\x48\x8D\xBF\x8E\x8B\xEB\x60\x8C\x88\x3B\x7D\x65\x7B\x37\xA8\x8D\x8E\xA7\x77\x85\x76\x49\x85\xF2\x8C\x85\xF4\x85\x7C\x5F\x8F\x87\xD0\x84\x8B\x3E\x17\x8B\x13\x39\x10\xBA\x80\x42\x97\x8A\x7A\xDF\x81\x20\xAB\x71\x50\x4B\x84\x89\xB0\x77\x8E\x09\x99\x8E\xDC\x70\x48\x1B\x81\x73\xEE\x6A\x90\x6C\x7D\x8A\x0D\x9B\x87\xF1\x63\x80\xCF\x88\x8F\x87\x63\x86\x6F\x85\x86\xF2\x7E\x8F\x89\x74\x92\x1C\x96\x92\x05\x98\x7B\x29\x94\x87\x56\x8F\x8E\x0B\x9E\x92\x6F\x7A\x87\x72\x71\x93\x7D\x83\x63\xF7\x83\x82\x53\x24\x88\xE1\x6E\x77\x53\x10\x7D\x9F\x22\x7D\xE8\x5C\x2C\x01\x20\x89\x3C\x16\x2E\x59\x96\x5F\x4F\x46\x3D\xFB\x52\x92\x74\x1A\x95\xA2\x87\x6B\x24\x71\x45\xDC\x8D\x8B\x9A\x81\x8A\x53\x73\x8E\x4C\x8E\x8D\x3C\x90\x14\x02\x99\x3A\x04\x9C\x13\x53\x87\x90\x42\x9E\x8E\xC8\x85\x94\xCA\x87\x94\xCC\x8A\x94\xCE\x82\x91\x34\x97\x5C\x15\x93\x8C\xB9\x83\x7A\xE8\x5A\x93\xF1\x66\x8E\xD6\x61\x90\x8A\x72\x8C\x70\x8B\x8E\x8F\x7A\x8A\x91\x70\x8F\x95\x70\x7C\x7F\x94\x72\x32\x92\x98\x4E\x9B\x8F\xD5\x80\x49\x1B\x92\x97\x00\x0D\x88\xFF\x84\x74\x91\x82\x66\x93\x85\x7D\x70\x9B\x66\x58\x9F\x83\x5E\x9C\x13\x19\x2A\x86\x64\x96\x9A\x3C\x16\x74\x10\x1D\x88\x49\x7E\x9A\x5F\x63\x60\x1E\x7F\x70\xF7\x73\x5A\xF6\x73\x83\xD5\x38\x4B\x37\x8A\x6C\xFD\x78\x38\xB4\x65\x5B\x66\x9B\x20\x64\x93\x85\x43\x81\x9A\x1B\x19\x89\xA9\x72\x9A\x49\x8E\x96\x62\x95\x8E\x00\x9B\x98\x8F\x91\x85\x3F\x97\x90\x25\x4E\x91\x2C\x93\x79\x7D\x96\x79\x48\x9A\x86\x9B\x9D\x94\x9E\x75\x8B",
"\xAC\x38\x8B\x0E\x19\x91\xD3\x72\x6D\xFF\x81\x97\xD1\x9B\x9D\x37\x97\x7B\xEC\x8F\x9D\x94\x95\x32\x77\x81\x8F\x7E\x93\x8F\x80\x9A\x7E\xA9\x33\x8B\x0C\x4E\x99\xC5\x5A\x91\xD3\x9C\x6C\xE9\x5D\x8D\xD4\x65\x3D\x64\x99\x34\x1F\x35\x2E\x22\x34\x4D\xB9\x9A\x72\x44\x8A\x86\x6C\x2B\x16\xD7\x68\x34\x8F\x1F\xA0\x32\x8E\x34\x50\x36\xA1\x08\x5D\x9A\xF1\x64\x96\x8D\x1A\xA0\x2E\x13\x9B\xA0\x2B\x9B\xC4\x2E\x31\x23\x1C\x13\x8D\x85\x42\x13\xA4\x72\x64\x94\x33\x22\xA2\xA3\xAF\x90\x00\x0F\x07\xA0\x29\xA6\x71\x1A\xAC\xA2\x19\x1C\x13\xFB\x2E\xA1\xD7\x90\x14\x33\xA9\xA0\xC2\x9B\x54\xD9\x59\x65\xBF\x98\x60\x57\x49\x5D\xB4\x9B\xA2\x4A\x34\x25\x11\xA5\x32\xB9\x96\x5D\x48\xAF\x60\x34\x32\x71\x56\xA5\x61\xD4\x3C\x34\x4B\xA4\x61\x0E\x6B\x6D\x3D\xA1\xA5\xF9\x42\xA4\x17\x80\x9C\x57\xAB\x6D\x34\x30\x83\xF1\x54\x65\xF8\x7F\xA4\x0E\xAD\xA2\x68\x80\x10\x30\xA1\x6B\x39\x8D\x91\x13\x70\x14\xA4\x99\xA7\x34\x81\xA7\x3F\xAE\x2E\x4D\x39\x3A\x67\xAE\x51\x34\x30\x9D\xD6\x32\x71\x5D\x70\xA7\x1B\xA2\xA7\xE6\x25\xA7\xAA\x99\x90\x85\xAA\xA3\x6D\x38\xA1\x89\x73\xA6\x1C\xA1\xA8\x1F\xA0\x9E\x91\xA6\xA2\xA2\x98\xA8\x67\x9C\xA0\x37\xAE\xA7\x8F\x1D\xA8\x12\xA3\xA4\xF3\x9B\xA9\xBD\x84\xA9\xDA\x96\xA9\x72\xAD\xA1\x82\xA9\x8D\x35\x3F\xA5\x68\x64\x81\xF7\x47\x59\x7C\xAD\x82\x5C\x67\x4F\x49\x80\x5A\xC6\x90\x69\xAD\x67\x4F\xDA\x8B\xA5\x61\xAF\x6F\x4B\x95\x77\xDE\x57\x65\x94\x12\x57\xE2\x53\x6A\x76\x5E\x48\xBB\x87\x8D\x69\x82\x81\x91\x65\x59\x3D\x3A\x83\x0B\x5C\x57\xE6\x38\x4C\x9A\x41\x51\xC8\xAC\x64\x16\x5C\x40\x1A\x56\x39\x47\xAC\xA5\x65\x71\x98\x6A\x4C\xAD\xAD\x49\xAC\xE1\x54\x62\x08\x8A\x4E\x8B\x64\x56\xCB\x58\x5E\x05\x60\x71\x56\x41\x52\x0F\x6E\xA6\x68\xA4\xAE\x3C\x1D\x89\x11\x66\xA7\x2C\x89\xA6\x16\x6E\x7F\x18\x68\x49\x51\x53\x41\x36\x6B\x52\x4D\x66\xAE\x06\xB1\x57\xEB\xA9\x63\xED\xA1\x53\x62\x5C\x4E\x03\x46\x56\x29\x80\x81\x7E\x4B\x83\xDD\x75\x5B\x0A\xB5\x63\x0C\xBE\x46\x07\x8F\x52\x3B\x68\x57\x0F\x8F\x63\xC5\x47\x42\xB5\x59\x61\x9A\x44\x58\x9D\x4A\x3B\x37\x6F\xAD\x79\x86\x5D\x0E\x72\x2B\x00\x18\xAF\x1E\x53\xAD\xA6\x50\xA8\xA3\x1C\x82\x01\x23\x22\x57\x16\xA8\x6C\x26\x1F\x3B\xB1\x10\x97\x34\x27\x1D\x15\xA3\xCC\x97\xA3\x40\xBB\x6E\x1A\x23\x02\x84\x2A\xA5\xF1\x50\xB0\xD4\x38\x1B\xF1\x51\xB4\x00\x15\x02\x84\x2C\xA6\x2C\x82\xB5\x3A\xBA\xB4\x01\x17\x02\x84\x26\xA8\x6D\x39\xB4\xF1\x6A\x21\x98\x24\xB4\xFF\x06\xA8\x51\x42\xB6\x24\x7A\x21\xBB\x26\xB6\x1F\x0C\x29\xFF\x02\x2E\xFF\x0A\x21\xE2\x2C\xB3\x76\xB7\xB7\x27\x22\xB7\x40\x28\x2E\x3C\xBB\x28\xF6\x15\xB7\x23\x24\xB3\x5B\x6D\xAD\x46\x30\xB8\x00\x1F\x1E\x86\x45\x51\x1A\x2E\xB4\xFF\xAA\xAF\x1C\x12\xB7\x32\xBE\x28\x77\xB1\x2F\x01\x16\xB8\x1B\x22\xB8\xB3\xAE\x82\x3D\x3F\x21\x71\xBC\x21\x8D\x8B\x28\x78\xB6\xB7\x9D\xB4\x22\x40\x20\x24\x3C\xB2\x2E\x96\xBB\x2F\xE8\xAF\x4B\xDE\xAA\x21\x98\xBC\x6A\xB4\xA0\x4C\x3C\xB3\xBA\x1C\x19\xA3\x00\x16\x1F\xA1\xB4\x22\x72\xB2\x2E\xCC\x2D\xB7\x78\xBA\xB5\xF5\x74\xB5\x46\xA2\x81\x50\xBF\x18\x4E\x2A\x21\x8D\x89\xB8\x0D\xB5\x68\x67\x1C\x2C\xC8\x52\xB1\x35\x50\x11\x8C\xB5\x7F\xC5\xB9\x16\x8B\x2F\x0F\x8B\x2F\x1E\xCC\x24\xBB\xE2\x2E\x01\x1C\x2C\xBB\x44\x1A\xBB\xE1\xB9\x3A\xE2\xB0\x10\xFB\x25\x32\xE5\xB0\x00\x91\xBA\xA4\x8F\xB1\x10\x4E\x29\x4F\xB4\xB6\x1F\xF0\xB2\x2E\xEF\x11\x96\xB4\xB2\x83\xEC\xB4\xB9\xB7\xBF\xBB\xDC\x1B\xB5\x63\xB1\x10\xD3\xB8\x7F\xD5\xB2\xB9\x1B\x29\xBC\x5A\x58\xB0\x21\x8E\x55\xCE\xB1\xB1\x29\x6D\x33\x01\xC9\xAF\xC3\xA4\x3D\x40\x28\xBB\x23\x2F\xC0\x4C\xA6\xAF\xDB\x6C\xB7\x78\xBF\xBA\xD1\x5A\xB9\x46\x37\xBC\x01\x15\xA2\xAA\x39\xAB\xEA\xAE\xB1\xCB\xAD\x1E\x0B\xC8\x62\xF0\xA6\x34\x1C\xC5\x50\x24\xCD\x33\xD8\xB1\x10\xDA\xBF\xBD\x95\xB1\x10\xDE\xB9\xBE\xCC\x2F\x2E\xE2\x28\xBF\x34\xC0\x10\x6B\x18\xBE\xED\xB6\xBE\x01\x10\xC4\xB4\xBB\xBE\x3D\xC4\xC0\xF3\xB1\x10\xF2\xB7\xC4\xF5\xB5\xC3\x00\x1A\xBF\x76\xB0\xBC\xF8\x72\xBC\x16\xC0\xA6\x4D\xAF\x60\x20\xC0\x10\x06\xC7\xB0\xCA\xAC\xAE\xCD\xB9\x13\x0C\xCB\xC2\x56\x15\xC5\xB8\x57\xC5\xDB\x60\x24\x96\xBB\xB8\xF4\xA9\x4D\x11\xCF\x18\x1A\xC7\xB7\x2D\xC6\x65\xE9\xAD\x33\x59\xC0\x00\x22\xCB\xBA\x92\x6E\xAD\x1F\xB2\x28\x01\x16\x5E\xB1\xA2\x9C\x36\xB7\x50\xB9\xB4\xBB\xFF\x08\x53\x91\xBB\xBB\x01\x10\x24\x32\x84\xB7\xEE\xB3\x22\x5B\xCD\xB1\x9F\x3B\xC7\x29\xCF\xAE\xCA",
"\x56\x34\x64\xC5\xAF\x3C\x5F\x60\x41\xCB\xC9\xBD\xB3\x22\xA0\xB3\x22\x52\xC0\x9C\x54\xCB\xC6\x0D\x66\xC6\x44\x55\xC7\x8F\xCC\x61\x91\xC7\xC2\x67\x18\x2E\x7E\xC7\xC9\x6C\xC6\xCA\xD4\x31\xC3\x24\x29\xBD\x01\x1B\xBD\xE0\xBE\xC3\x47\xC7\xBE\x47\xC6\xC4\xE9\xBC\xC3\xE9\xB2\x2E\x1D\x07\xC4\x3F\xC7\xC4\xEF\xB7\xC4\x4B\xC9\xBE\x4D\xCF\xC4\x4A\xCD\xCC\x77\xB1\xCA\x1E\x53\xCA\xB2\xA8\xC9\xBA\x56\xBC\x8E\xC3\x1E\x07\xCD\xC5\x0E\xBD\xCA\x7D\xCE\xAC\xB0\xC5\xCA\x18\xC4\x54\x13\xC8\xB7\xDF\xCB\x11\x03\xCF\xC6\x76\xB1\xC7\xB8\xA4\xB8\x56\x15\xC7\x77\xCF\xAB\x25\xCB\xCA\x5E\xC0\x00\x93\xC3\x53\x95\xC6\x15\xEA\xC1\xC8\x9C\x54\xCB\xDF\x88\xCB\x4E\xC3\x66\x47\xC9\xC3\xBD\xC1\x10\xEC\xB7\xBF\x04\xD4\xCC\x43\xCB\xCB\x09\xD9\xBE\xC7\xC9\xBE\xC9\xCB\xC9\xCB\xC7\x2D\xCC\xCB\xBF\xCF\xCD\xBF\xC1\xBC\xB5\x00\x15\xCE\xF2\x52\xCB\xD6\xCF\x21\xA9\xCA\xC7\xAC\xCC\xC7\x00\x1F\xCA\xA4\xC6\xCE\x8E\xB8\xC6\xE4\xC5\xD2\x1B\xD1\xCE\xD4\x38\xCE\x3C\xB9\xCF\xF0\xC4\xC7\x23\x2F\xCE\xB1\xB0\xD2\xF3\xCE\xCA\xCE\xA0\xD3\x35\xD6\x34\x83\xC2\xB7\x86\xCF\xCF\xB4\xBA\xC8\x23\x22\x2E\xA8\xC8\xCD\x5C\xCB\xBC\x22\x88\xD3\x3C\x6A\xD1\x03\xCC\xB9\x7A\xB1\x10\x2E\xD1\x10\x7E\xBE\xCC\xE9\xCA\xD2\xFA\xC7\x4F\x96\xB8\xB8\xD9\xC6\x41\x6A\xC3\xCD\xB1\xCC\xD2\x8F\x14\xC8\x91\xB5\xC7\x8C\xC4\xD1\x99\x2B\xC1\x56\xD1\xD3\x3C\xD9\xBB\x77\xB4\xC8\xB6\xB7\xD6\x6C\xD9\xB7\x1C\x22\xD4\x93\xBF\xCF\x1A\x2B\x2F\x2A\xB6\x58\x4B\x6D\xB2\x5D\xD3\xAE\x6D\xCC\x13\x78\xB4\xC8\xE2\x26\x2E\xA1\xB4\xC8\x8B\x2B\x16\x65\xD8\x4F\x52\xD9\xC8\x01\x19\x4F\x2F\xD9\xD6\x3B\xD6\x15\x51\xDF\x21\x58\xB5\x7F\x71\xD7\xD9\x9B\xC4\xBB\x9D\xCF\x21\x69\xC3\xBE\x30\xB8\xD1\xC3\xB7\xAB\x03\xCC\xCF\xFC\xCF\x1E\x89\xD6\x1F\x64\xDE\xD9\x53\xB0\xDA\x4C\xD7\xD2\x54\xDC\xB3\xAD\xDF\xD7\x22\xD9\xBB\x3A\xDE\xC1\xED\xC3\xD3\x8E\x11\xD9\xDA\xCC\xBC\xF4\xC0\xC6\x2A\xC7\xCF\x10\x15\xDB\x2F\xC6\x34\xA5\xD3\xD4\xFF\xC9\xDA\xBA\xC9\xB3\x17\xDF\xBF\x19\xDA\xD2\x03\xC8\xD2\x77\xB1\xDB\x1C\xDC\x13\x93\xD7\xB9\x90\xD6\xDB\x10\x1E\xCE\xB9\xD6\xDB\xBB\xD9\xD4\xDD\xCC\x63\xC2\xDC\xCE\x10\x18\xD9\x71\xD2\xD8\x01\x1F\xD6\x85\xD7\xBD\x8B\x2B\x2F\x89\xDB\x37\x00\x1B\x28\x40\x2E\xDE\x76\xB5\xD9\xF8\x75\xDD\x1A\x2E\xB3\x1C\x1B\x28\x8D\x89\xD8\x38\x50\xDF\x00\xC8\xB7\xF4\xD0\x9C\x96\xB6\x1F\x05\x86\x15\xF7\xDA\xA3\x6C\x25\xDE\x88\xC0\x10\xB1\x99\xDE\x1C\x2B\x28\xCC\x30\x24\xDC\xB1\x10\x64\x6B\xC9\xC5\xC9\xBE\xBC\xC8\xC3\xE3\xB5\xC4\x07\xDF\xCB\x1D\xE2\xD1\x81\x2F\xDE\x8C\xD0\x10\x72\x27\xB7\xF8\xD6\xDF\x23\xEE\x88\xF9\xD1\xC2\x29\xE3\xE1\x00\x13\xCC\x1A\xE9\xDC\x16\xEB\xD0\x9B\xC9\xE1\x9B\xCE\xCB\x9B\xC0\xCC\x20\xEC\xBE\xFE\xD0\x10\xEC\xBC\xB3\xF8\xD6\xB9\x40\x2B\x9F\xE3\xD9\xE2\xE0\x94\xC8\xE8\x28\x53\xE8\x24\xBB\x0D\xDB\xC9\x0F\xD4\xBB\x11\xDA\x21\x8B\x21\xB9\xF2\xD0\xE4\x08\xE0\xE2\x07\xE0\x10\x2E\x7F\x42\xD4\x39\xE5\x20\xAC\xD6\xE6\xDC\xE0\x78\xBD\xD9\x32\xE9\x73\x0B\x79\x6E\x6A\x8E\xE5\xD7\x64\xDA\x10\xED\xE2\xA8\xB1\x10\x30\xEC\xC9\x1B\xE2\x2E\x17\xE5\xE3\x34\xEC\xE1\x3E\xE7\xC4\x3A\xE2\x2E\x25\xE3\xDB\x3C\xBB\x16\x66\xE8\x6E\x5D\x12\xBC\xF8\xD0\x24\x7D\xE6\xE5\x9C\xA8\xA0\x28\xE0\x10\x60\xBB\xE2\x00\x12\xC2\x12\xEF\xE6\x00\x15\xE1\x9A\xD3\xE7\xE3\xB4\xC4\xE2\x26\xE3\x78\xE0\x00\x05\xDB\xC3\x1F\xE2\x2E\xEC\xB5\xDD\x80\xE2\x4A\x82\xED\x70\xA0\xD5\xE8\x1F\xE8\xE8\x20\xA2\xE4\x01\x14\xE4\x1B\x2D\xE8\x48\xEF\xDF\x00\x1B\xE4\x44\xDD\xD8\xC8\xC6\xEB\xCA\xC1\x10\x61\x9A\x21\xA2\xE9\x15\x0A\x75\xEA\x3C\x7B\xB6\x46\xEB\x92\x54\xE8\xB7\x41\xE3\x22\x40\x2B\xE5\x9A\xC3\xEC\x21\x74\xDE\x97\xD4\xC8\x4D\xEE\xBB\x66\xD8\x53\xAA\xE7\x6D\x75\xC6\x2E\x05\xE1\x1B\x21\xDF\x1E\x0A\x82\x8C\xF1\x71\xE0\x1E\x54\xC8\x0F\xD2\xED\x70\xD6\xA4\xD5\xEB\x92\xD7\xE1\x10\xD9\xE9\xC0\xC5\x50\x24\x25\x8F\x42\xBA\x80\xEE\xCF\x19\xBE\x29\x20\x10\xBB\xE6\xDC\xD3\xE6\xEC\x57\xEE\xEC\x72\xD9\xBE\x15\xEE\xE0\xB5\xC1\x10\xEF\x54\xC0\x2E\xE0\x00\x71\xE5\xE9\x32\xE4\xBB\x75\xE4\xBB\x36\xE2\x2E\x2C\x0B\xD8\x8C\xE1\x10\x0F\xF6\xE2\x92\xAE\xE7\xFA\xE9\xE8\x35\x8E\xE8\x00\x09\x01\x8D\xC1\xCC\x70\xE1\xD0\x96\xE2\xE3\x98\xE1\x10\x0D\xF4\xE3\x3D\xE4\xBE\x76\xBD\xE8\xAC\xEE\x20\x96\x9F\xEA\x3A\xA1\x45\xB1\xE0\x10\x5E\xA1\x2A\x9B\xED\xE9\x01\x1A\xE3\x52\xE1\x10\x91\xB7\xE8\xC8\xE5\xF1\x03\xE1",
"\x10\x75\x9E\xF2\x18\xFD\x36\x60\xEB\xE0\x00\xD0\xE6\xEA\xD2\xF0\x1D\xFB\xC9\xC2\xC0\xF2\x09\xF4\xE7\x77\xE9\xE9\x34\xEE\xF0\x10\xF5\xA1\x13\xF9\xF2\x15\xFB\xE8\x15\xAF\x8F\xFC\xCC\xF1\x02\x17\xC4\x4D\xF1\xE3\x38\xB3\xE3\x00\x13\xF2\x42\xC5\xF6\xFF\xC0\xC4\x27\xF0\xC4\xE7\xED\x75\x2B\xFA\x70\x7C\x96\xE0\xCC\xEF\xA9\x31\xF0\x00\x33\xF7\xBD\xE2\x28\xE3\x06\xD9\xE7\x1F\x23\xE5\x01\x1C\xF3\x1F\x2A\xF2\x23\x26\x1F\x41\xFA\xE6\x89\x7E\xEC\x84\xCB\xB7\x78\xB8\x2E\xE3\xE3\x22\xF2\xEE\x35\x7F\xB8\xD6\x5E\xDE\xC2\xE2\xD8\xE5\x32\xC6\xD4\x90\xC8\x19\x7D\xD4\xBC\x8E\xB2\xD6\x4B\xF4\xEE\x8D\xF4\xD9\x2A\xD1\xF9\x70\xC7\xDD\xC3\xD2\xF7\x3E\x22\xB7\x9F\xB3\xE6\x54\xDE\xD8\x8E\xFA\xD2\x4E\xDC\x21\xD1\xED\xF3\x66\xD7\xEF\xA2\xF3\xF9\xF5\x11\x10\x27\x37\xB7\x46\xB3\x96\x48\xB2\xF1\x17\xFD\x8B\xF6\x10\xF8\x42\xFA\xE2\xF6\x15\xE5\xB4\xF0\xA2\xE9\xEC\x1A\x35\x76\x80\xDB\xE7\x2A\x89\x66\x82\x8F\x1F\xF8\x74\x12\xEE\xB8\xE8\xF5\xB5\xF0\xE0\xA3\xFA\xFB\x78\xBD\xFB\x27\xAF\xFB\x00\x17\xF5\x6D\xFF\xA9\xC3\xF1\xFC\xE0\x97\xFC\xE6\xF8\xEE\x23\x28\xED\x1F\x8E\xFC\xF3\xCE\xEE\xDE\xED\x80\x78\xA6\x5D\xF4\xE1\xE5\x83\xF4\xD5\xB6\xFB\x21\xD4\xFE\x12\xF6\x1B\xFB\x76\xBE\xFD\x44\x50\xFC\x40\x00\xF1\x79\xFC\x7F\x45\xF9\x74\x78\x43\x7D\xDC\x48\x7F\xC0\x7B\xEF\x45\x78\x87\x18\x71\xE4\x74\x67\x48\x10\x87\x4C\xDC\x5B\x79\xE2\x35\x63\x8B\x17\xEE\x0C\x16\xF7\x34\x19\x70\x3E\xFC\x6D\x74\xF4\x70\xE7\x5E\x64\xED\x70\x2C\x7E\x4E\xB0\x71\x78\x09\x80\x03\x84\x11\xF2\x06\x2E\x4B\x3D\x21\x4D\x3E\x53\x49\x11\x60\x80\x7E\x77\xC4\x34\x5D\x9C\x65\x6C\x72\x5B\x51\x1B\x01\xAA\x75\xF0\x37\x62\x9C\x72\x71\xE2\x16\xFF\x67\x78\xFF\x73\xFE\x5E\x46\xD6\x60\x80\xB9\x37\x46\x75\x7A\x86\x12\xE2\x69\x5F\xC2\x72\x7A\x68\x7D\xEF\x7A\x78\xE0\x78\x00\xBD\x47\xCF\x60\x08\x85\x7B\xEE\x5E\x46\x07\x89\xBE\x37\x81\x60\x79\x81\x01\x0B\x07\x8D\x82\xA6\x76\xC3\x4E\x7B\xD8\x61\x82\x55\x78\x48\x04\x83\x02\x8E\x98\x47\x82\x8E\x44\x4B\x4B\x84\x07\x90\x7B\x28\x86\xE7\x74\x81\xCE\x60\x08\x91\x5C\x00\x8C\x80\x8C\x71\x45\x57\x82\x72\x26\x45\x86\x7A\x3B\x58\x6C\x68\x77\xFD\x3C\x58\xE3\x69\x75\x6C\x85\xEB\x28\x7F\x2A\x86\xED\x6B\x7E\xBA\x6D\x7F\xA1\x37\xF9\x40\x09\x6E\x7C\x80\x71\x76\x4A\x76\x7E\x00\x0E\xF5\x5F\x11\x43\x8C\xF7\x58\x7E\xF1\x61\x08\x0B\x85\xF8\x4D\x85\x0F\x1C\xFE\x4D\x7D\x24\x8F\x7F\x01\x0F\xDD\x78\x49\xFD\x70\x14\x75\x7E\xAE\x78\x5B\x53\x6D\x13\x85\x83\x84\x4B\x08\x9E\x87\xB5\x22\x5D\x46\x7E\x07\xB8\x81\x07\x71\x10\x45\x4F\x86\x02\x17\x61\x4F\xE4\x79\x7E\x0D\x18\x04\xBB\x53\x7D\x3A\x7A\xAC\x83\x23\x34\x81\x0D\x14\xC8\x75\x71\x04\x8F\x7D\x25\x84\x02\xA7\x80\x0B\x8A\x9D\x2A\x80\x40\x17\x3B\xF6\x0C\x40\x52\x10\xB4\x59\xD9\x36\x73\x33\x97\x7D\xE5\x4C\xD0\x6F\x78\x02\x67\x07\xC8\x3F\x02\x76\x45\x86\x4D\x3D\x4F\x0C\x6E\x8B\x0C\xED\x85\x66\x62\x68\xEE\x81\xB3\x73\x7D\x0F\x1E\x24\x76\x0C\xDB\x69\x84\xE4\x7F\xEF\x69\x7E\x45\x80\x0A\xFB\x86\x15\x4B\x7E\xBA\x1E\x14\x9A\x77\x79\x6C\xED\x63\x3D\x25\x93\x7E\x97\x82\x6E\x61\x7D\x0D\x15\x0F\xB4\x73\x2C\x98\x4E\x07\x86\x16\x89\x3D\x5A\x8F\x10\xE0\x3C\x40\x8B\x77\x7B\x60\xFE\x47\x88\x9E\x09\x0C\xB5\x82\xFD\x7B\x84\x54\x6F\x1E\xBB\x82\xE1\x7A\x0F\x8C\x87\x44\x9D\x87\x26\x8D\xD9\x7D\x76\x8E\x0A\x21\x21\x85\x3C\x95\x81\xF3\x83\x43\x31\x85\x4A\x29\x12\xFF\x86\x23\x8C\x7E\x82\x37\x14\x9B\x67\x6F\x44\x09\xD2\x7C\x47\x89\x88\x1C\x13\x21\xA5\x86\x8A\x88\x0F\x8B\x10\x9B\x17\x88\x90\x83\x20\xBB\x88\x8D\x8E\x13\xF3\x7D\x7C\x2E\x85\xF6\x74\xF5\x66\x6A\x97\x8A\x05\x8B\x53\xEC\x52\x5B\x1A\x13\x0D\xAF\x89\xD4\x72\xFB\x05\x87\xFD\x66\x6B\x5A\x8B\x43\x05\x86\xB2\x46\x1F\x7A\x82\x28\x8E\x4C\x11\x8D\x22\x9B\x09\xB0\x58\x12\x92\x89\xC8\x28\x8A\x02\x8C\xDD\x52\x11\x82\x81\xFD\x70\x74\x42\x98\x7D\x99\x6A\x28\x94\x6B\xFE\x7D\xFD\x6F\x82\x00\x86\x8B\x81\x81\x1F\xA4\x70\x7F\x80\x7B\x44\x8B\x48\x83\x85\x1B\x15\x14\xB9\x88\xA5\x8C\xDB\x4C\x8A\x5D\x9F\x89\x78\x88\x2A\x92\x53\xBB\x5D\x10\xE5\x30\xEF\x7E\x8B\x2A\x55\x2C\x84\x8D\x50\x49\x16\xC5\x88\x2D\x8D\x8B\x6A\x8D\xE4\x17\x8A\x0E\x1A\x21\x26\x03\x56\x8D\x6B\x4F\x6B\xD6\x52\x8A\xCB\x77\xB8\x18\x7E\x2A\x7A\x7C\xB2\x76\xAF\x53\x6F\xCC\x63\xD6\x6E\x84\x21\x7A\x10\x8D\x17\x34\xB1\x7C\x12\x11\x13\x89\x6C\x5C\x8B\x8C\x72\x8D\x3D\x34\x8A\xAB\x0B",
"\x11\xCE\x88\x0B\x58\x84\x8A\x6D\xAE\x5F\x7A\x52\x8F\x08\xF1\x89\x46\x89\x85\xF1\x7E\x12\x91\x8D\xCC\x6F\x11\x83\x84\x56\x85\x89\xBA\x8C\x2B\xBC\x8C\xAF\x80\x12\xE6\x68\xF1\x61\x8C\x85\x88\x34\x9E\x8C\x97\x07\x14\xB7\x89\x40\x80\x8E\x7B\x63\x38\x8B\x41\xA6\x8D\x11\xC8\x8E\x26\x9B\x10\x9C\x81\xC4\x6E\x8A\xEB\x36\x18\xE7\x8B\x5B\x86\x8F\x18\x89\xA4\x4E\x8D\x55\x80\xFB\x54\x8F\x2B\x97\x5B\x33\x8F\x3B\x95\x8A\x8E\x45\x1F\xE0\x8E\x55\x8B\x89\x73\x5C\x0A\x99\x8E\x98\x8C\x1D\x8C\x88\x55\x60\x8C\x03\x92\x34\x5D\x8D\xC3\x87\x12\x80\x08\x55\x88\x81\xCA\x78\x3F\x89\x8B\xE0\x87\x16\x6A\x8D\x74\x97\x8B\xC2\x4E\x3D\xB8\x5B\xCA\x83\x00\x9B\x8C\x44\x98\x8E\xA1\x8C\x2D\x96\x90\x13\x96\x11\x9A\x92\x73\x9A\x8F\xD0\x8D\x38\x9D\x88\xC9\x83\x0C\xD0\x6B\x83\x8C\x91\xF3\x4B\x42\xB6\x8E\xFA\x82\x1E\x94\x92\x4A\x8B\x90\x76\x58",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

			IMPL_TYPE_INFO_RENAME(GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_attributeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->attributeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_attributeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->attributeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_typeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->typeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_typeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->typeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_referenceName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->referenceName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_referenceName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->referenceName.value = value; })

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				CLASS_MEMBER_PROPERTY(attributeName, get_attributeName, set_attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				CLASS_MEMBER_PROPERTY(typeName, get_typeName, set_typeName)
				CLASS_MEMBER_PROPERTY(referenceName, get_referenceName, set_referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_CLASS_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_BASE(vl::reflection::IDescriptable)
				CLASS_MEMBER_EXTERNALCTOR(Ptr<GuiIqQuery::IVisitor>(Ptr<IValueInterfaceProxy>), {L"proxy"}, &interface_proxy::GuiIqQuery_IVisitor::Create)

				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_CLASS_MEMBER(GuiIqQuery)

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
