#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 6350; // 25801 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 206;
const vint parserBufferRows = 7;
const char* parserBuffer[] = {
"\x00\x00\x80\x84\x01\x8C\x01\x83\x20\x00\x61\x00\x33\x20\x03\x30\x84\x00\x32\x00\x65\x00\x11\x20\x05\x39\x88\x00\x72\x00\x39\x20\x0F\x7D\x8F\x7F\x82\x00\xD0\x18\x80\x09\x30\x01\x36\x87\x19\x9B\x94\x96\x82\x89\x94\x8E\x8F\x05\x01\xAB\x97\x8E\x96\x8F\x7E\x04\x01\xD3\x17\x94\x33\x8D\x88\x9A\x8D\x2F\x9D\x8B\x04\x86\x86\x87\x85\x86\x09\x90\x92\x93\x9D\x90\xA1\x98\x80\x0D\xE8\x24\x80\x0C\x37\x85\xA1\x8F\x45\x89\x87\xAE\x8A\xA5\x9C\x97\x91\x1B\x86\x01\x90\x38\x97\x8A\x36\x00\x3C\xB6\xA0\x80\x02\x91\x8D\x93\x93\x09\xAE\x8C\xA0\xB0\x05\x05\x81\x84\x3C\xBC\xAE\xA0\x02\x36\x9C\x9E\x89\x4E\x0E\xA7\x92\x8A\xB1\x81\xB7\xA9\x70\xF4\xB3\xAE\x93\x0F\xB8\xB5\xC7\x7B\xFD\x96\x9F\xB0\x01\xC1\x85\xC1\x00\x4F\x00\x04\xBC\x9D\x93\x36\x00\x67\x85\xE1\x83\x9F\xB5\xB2\x94\x9F\x4D\x9B\x83\xB0\xA0\x02\xA9\x93\xAA\x10\x9A\xDC\xD3\xAF\xC9\xD2\x8F\xB5\x87\xA5\xF1\xA0\xAB\xC0\xA2\xBA\x80\x19\x92\xA6\x3F\x92\x8F\xB1\x86\xC0\x82\x97\xA2\xCC\xB4\xD6\x92\xD2\xAF\x3F\x9B\xB8\x80\x8C\x9B\x8C\xB2\xE4\x97\xCA\xF7\xC6\xCD\xE1\xC6\xB8\xD4\x74\x8E\x01\x95\xEB\xCF\x8A\xCA\xE7\x12\xB2\xCF\xDE\xC0\xD7\xAB\xE8\x00\x3A\x92\xBC\x9D\xDB\x8F\xA4\x01\xE1\x25\x99\x8B\x89\xBE\x8F\xF5\xF9\xC7\xF4\x40\x02\x01\x40\x9F\x64\x56\x4E\x7F\x3B\x50\x79\x68\x00\x62\x40\x4B\x42\x44\x0D\x75\x66\x56\x4D\x11\x01\x4F\x09\x40\x15\x81\x4A\x85\x40\x36\x76\x4B\x84\x87\x1D\x9D\x4F\x84\x40\x21\xA2\x83\x89\x89\x37\x41\x49\x11\x65\x00\x04\x10\x03\x8A\x52\x00\x05\x10\x00\x07\x54\x10\x03\x40\x00\x57\x8A\x8C\x00\x17\x9A\x86\x4D\x83\x2D\xAF\x80\x01\x8C\x33\xB5\x82\x82\x85\x3C\x80\x01\x00\x88\x1D\x78\x8C\x89\x10\x00\x0D\x12\x8C\x00\x15\x01\x4B\x16\x43\x2D\x00\x0A\x1C\x00\x50\x99\x9A\x14\x00\x5F\x00\x0D\x14\x00\x57\x89\x49\x97\x96\x5D\x80\x0F\x94\x0C\x00\x19\x99\x0E\x98\x00\x2A\x07\x90\x89\xFD\x41\x47\x16\x90\x4C\x01\x97\x40\x94\x31\xAE\x83\x81\x8E\x71\x80\x03\x00\x93\xFF\x0E\x9A\x66\x48\x33\x81\x6F\x9D\x92\x28\x37\x84\xA2\x7D\x07\x79\x9A\x66\x4E\x33\x8B\xA7\x85\x0A\x00\x36\x76\x4F\xA0\x00\x58\x19\x67\x90\x73\x89\x9E\x14\x83\x84\x89\x0A\x88\x8B\x36\xB3\x81\x8C\xA5\x34\x80\x06\x8E\xA5\x81\x87\x0F\xA1\x40\x55\x2C\x8B\x8A\x66\x8A\x88\x9B\x08\x00\xEF\x76\x46\xA8\x40\x3A\x75\xA2\x10\x7C\xAE\xA0\xA0\x96\x91\x4B\x80\x49\x97\xAF\x57\x4C\xB0\x96\x8D\x36\xB1\x8B\x8B\xB0\xB5\xA9\xAA\x91\x40\x40\x00\x0A\x03\xAC\x00\x47\x4A\x66\xA4\x2C\x89\xB0\x02\x0E\x00\x2B\x67\x54\xA7\x41\x9A\x66\x8E\xB8\x2E\x00\x0B\x5A\x4D\xE2\xB6\x7A\x4E\x48\xC7\x93\x98\xBB\x85\x0B\x7B\xAF\x6F\x55\x3D\xA4\xA0\x41\x80\x32\x00\x00\x06\x4C\xE0\x6E\x41\xC1\xBB\x31\x9F\x6F\x64\x4F\x3A\x7C\x4B\x6C\x4F\xE6\x8F\x35\x08\x08\x00\x24\x00\x00\x0F\x0A\xB4\x51\xC2\x0F\xFE\x99\xC6\xC2\xBB\x04\xDF\x5F\xC5\xBB\x0D\xE5\x5C\x4F\xB6\x00\x77\x20\x00\xC5\x18\xC0\xC0\x00\xC7\xEF\x54\x49\x6E\x73\xBB\x5B\x48\xC9\x4F\x33\xDE\x70\x51\xBB\x31\x00\x05\x25\x40\x2D\xCC\x7B\x5E\xCE\x1B\x5C\xC4\xB8\xC5\x8D\x94\xC2\x09\x92\x4B\xD2\xC4\xC7\x1D\x53\x7C\x42\x54\xC5\x7B\x2B\xCC\x41\x6B\x53\x70\x6F\xA7\x6C\xEC\x67\x54\xC5\x0F\x56\xCB\xDE\x89\x7E\x17\x4D\x4C\x4F\xD2\x14\xFD\x16\xD4\xA6\x14\xE1\x08\xCD\x77\xCF\x50\x99\x5D\x73\x92\x4F\x62\x44\x44\x76\x5B\xB1\xD1\xCE\xCF\x46\xD6\xD5\xD2\x00\x0B\xDB\x8D\xD3\x13\xC0\x00\xD5\x49\x52\xD6\xD5\xD4\xC5\x51\x59\xD6\x56\x7A\x9D\x40\x02\x87\xD7\x61\xC2\x97\x58\x44\x64\xD0\x8F\x60\xDA\x00\x2A\xD4\xC4\xDB\x00\x2E\xD2\xCC\xDC\x35\xDC\x9F\x62\x5E\x53\x75\xD4\x64\x44\x31\xC2\xD8\x63\x73\x37\xE3\xE3\xD3\x73\xED\x81\xCF\x04\xD0\x6F\xF3\xE5\xEA\xDF\x4A\xC0\x0D\xA0\xE1\x6D\xDE\xC0\x51\xC2\x92\xCF\x6D\xEC\xA6\x4B\xC3\xCF\xBE\xEB\xBA\x74\x56\x13\x48\x09\x67\x18\x79\x7B\x3C\x52\x04\xC0\xDF\xA5\xCF\xF9\x45\xF4\xD3\xE7\x5C\x4C\xCF\x00\x29\x28\xEE\xEC\xAF\xD9\xF0\xF4\x00\xD2\xD8\x6E\xF7\xCB\xE3\xBF\xDE\xF8\xC5\x81\x50\x92\x97\x8C\x14\xC7\xDF\x62\x75\xE6\x49\x72\x47\xD3\x51\xD8\xD4\xD6\xD5\xE4\x37\x38\x8B\x59\x39\x3D\xF2\x11\x73\x72\x00\x00\x6D\xEF\x3A\x22\x81\x86\x25\x20\x3F\x17\x30\x20\xE7\x1E\x70\x00\xD0\x7C\x0F\x7D\x81\x61\x50\xE7\x07\x7F\x31\xA9\x40\x03\x71\xF7\x65\x3C\x76\x53\x70\x72\xDA\x2D\x3C\x72\xBD\x70\x4B\x59\x1B\x23\x83\xB5\x6E\x86\x69\x64\x55\x71\xBB\x1C\x71\x7F\x28\x53\x4D\x7E\x56\x61\x3B\x7D\x44\x3D\x3D\xE3\x03\x83\x7A\x14\x63\x4C\xC5\x5A\x26\x6A",
"\xEC\x4A\x35\x60\x40\x2A\x79\xEE\x65\x7E\x79\xF3\x69\x7E\x2C\x8F\x36\x7B\xF2\x46\x8E\x24\xED\x4E\x27\x89\xC5\x2F\x31\xED\x61\x73\x7C\xE6\x74\x65\x89\xDB\x68\x7D\xF7\x0F\x3C\x76\xDF\x58\x85\x86\xF3\x76\x6A\xFD\x01\x89\x7E\x02\x96\x6C\x83\x89\x7F\x7C\xC5\x6C\x83\x84\xCC\x25\x85\x6B\x56\x6A\x81\x06\x8C\x85\x6D\xA9\x10\x87\x6E\x19\x89\x6E\x0B\x94\x67\x82\xA4\x55\x72\x4E\x1B\x9D\x7E\x07\xA0\x84\x8F\x1F\xB6\x8E\x80\x26\x9E\x69\x02\x95\x7A\x84\xA0\x2D\x87\x73\x2F\x85\x73\x95\x3D\x73\x86\xAB\x68\x8F\x86\xED\x74\x62\x0E\xC3\x3D\x29\x2C\xBE\x87\x3C\x98\x21\x8A\xD5\x44\x84\x62\x2A\xBC\x30\x89\x1B\x32\x8B\x12\xCD\x7E\x24\xB9\x50\x31\x75\x7E\x31\x80\x00\x14\x07\x7A\xD2\x74\x2E\x96\xA8\x65\x26\xEA\x3A\x9B\x8A\x9E\x00\x23\x6F\xBE\x95\x97\xE9\x74\x69\x96\x40\xA5\x8B\x69\xD9\x40\x79\x0C\xF0\x76\x75\x34\xB8\x83\x88\xCB\x91\x31\x33\x8E\x97\x22\x55\xBD\x74\x5C\x9C\x62\x76\x17\xC4\x60\x00\x2B\x9C\x7A\x7D\xC6\x66\x72\x22\x8A\x7B\x95\x6C\xB8\x93\x32\x6D\x84\x84\x24\xF8\x88\x85\x3D\xA2\x87\x6A\x0F\x93\x28\x20\xAD\x8A\x88\xF2\x74\x90\x28\xE6\x82\x8C\x3A\xD5\x7D\x96\xDD\x60\x8F\x8A\x63\x9F\x78\x00\x33\x0C\x8B\x63\xB3\x97\x8B\x55\x8E\x89\x42\xEC\x76\x7E\xC0\x40\x77\x93\xF4\x61\x95\x08\x82\x88\x95\x6E\xAA\x98\x71\xFE\x7F\x80\x00\xC0\x2C\xA2\xFD\x5B\x6B\x3D\xC5\x72\x92\x1E\xCB\x6C\x8E\xCD\x79\x9D\x24\xFB\x96\x68\x05\x96\x88\x83\xA5\x48\x97\x8D\xEB\x92\x8F\x46\xF1\x9F\x90\xAE\x69\xA1\x8F\x94\x8D\x3C\x0B\xB2\xA3\x91\x0A\x96\x6B\x93\x19\x9D\x90\x0C\x98\xAA\x8D\x1C\x97\x24\x94\x23\x26\x94\x4F\x9E\xA2\x88\xA3\x05\x89\x99\xAF\x82\x65\x12\x85\xAC\x89\x88\xA1\x88\x8B\xD4\x60\x00\x06\x5C\xAF\x9F\x8D\x01\xA0\xAC\xEB\x68\x61\xF1\x0B\x63\x4B\xCB\x54\x49\x20\x16\x68\x9A\x41\xDE\xA8\xA1\x81\xAC\x7C\x62\x12\x72\x96\x3F\x90\xA0\x28\x60\x8C\x98\x9E\x80\x9C\x97\x14\xD8\xAB\x22\xBF\x9A\x98\xB0\x56\x20\x7F\x30\x5D\x8E\x95\xC2\xAE\x9A\x98\xDB\x90\x21\x19\xE2\x9D\xB1\x72\x92\xA6\xAE\x30\x90\x8D\x48\xA0\x88\x2F\x5B\x90\xB0\xB1\x1D\xA5\x82\x4F\x88\x8B\xA4\xD3\x6B\x81\x90\x9D\x75\x2E\xB6\x17\x6F\xA0\x72\x86\xB7\x9D\x76\x76\x2B\x33\x80\x01\x9B\xA3\x9E\x95\x9A\xA0\x96\x7D\x67\xC1\x9C\x2F\x6D\xA1\xB6\x6A\x55\xAB\x68\x38\xD6\x64\xB2\xC2\x96\xB7\xAB\x13\xB9\xB1\x4E\xA2\xA8\x9B\xB9\x47\xB1\xB6\xBF\xB7\x8F\x4F\xF5\x9C\xA5\x7B\x8E\x83\x87\x30\xB6\x29\x0B\xFA\xA3\x9D\xB8\x4F\xB5\xB7\x88\xB0\x22\x60\xAD\xBE\xBA\xE7\xB0\xB3\x75\x00\x0D\x5D\x0D\x0F\x3E\xA1\xBD\xAE\xB7\xBB\xC3\x8E\x9A\x46\xD0\x98\xB4\xA4\x8C\xAF\x9A\x0E\x26\xBF\x67\xD0\xB6\xA4\x6F\x99\x83\xB8\x30\x85\xBB\x5C\x80\xA7\xB2\x28\xBC\x24\x7F\x20\xAB\x91\x3B\xFA\xB0\xBC\xFE\xAE\x8A\xBA\xA4\xB5\x71\x4B\xF8\x98\xBA\x5D\x9B\xBC\xAC\x7C\xAE\xB0\x83\xF1\xB6\x2B\xF1\xAE\xBD\xBC\x9E\xAD\xC0\x7A\xED\x54\x06\xF6\xAC\xB7\xC3\xA5\x6F\xB7\x7E\xE8\xB3\xB7\xDA\x94\x66\xBE\xB8\xB9\xA2\x6E\xF0\xBE\xB7\xFE\xB0\x48\x86\xC2\xA8\xB6\x80\xDD\xA4\xC0\xE4\xB6\xA8\xC1\x1D\x8C\x9D\x73\xA1\xCC\xC3\xE8\xB3\x9B\xBA\x93\x8B\x82\x75\xFE\x8A\x9E\xED\x84\xAD\x9F\xDD\xA6\x7E\x8F\x86\xC0\x00\xEE\x95\xB7\xAC\x13\xAA\xBD\x43\xA7\xC1\xCB\x83\xA7\x9C\xCA\x65\x96\xA3\x6D\xF2\x79\xB7\x91\xB8\x7D\x8E\x1E\xBA\xB2\x82\xF3\x84\xA5\xA9\xA2\xB0\xA5\x11\xCA\xC9\x03\xCC\xC9\xBA\x09\x84\xA8\x93\x84\x95\xA6\x06\xB8\xA9\xC0\x21\xFB\xA0\xCD\x6F\xC7\x83\x09\xC9\xC9\x83\x4A\x83\xAA\x90\x78\xC6\xAB\x8B\xB2\x88\xB5\xFB\x9A\xA3\x94\x3C\x86\x3A\x9B\xC0\xBD\x9D\x85\x2D\x96\xB8\x01\x59\xAC\x86\xEF\xBB\xC3\xC8\x80\x02\x03\x9B\xC0\xC4\x6F\x9C\xC0\x22\xB5\x8A\x67\x31\x33\x4E\xAF\x05\x70\xAC\xCB\xCA\xAA\xC2\xC4\xBA\x9C\x60\x5E\xA5\x0D\x75\xCA\xB1\x75\xCB\x2E\x2D\x5C\x43\xB6\x1C\xB0\xE3\xA1\xCD\x72\x17\x49\x91\x9F\xBA\xAD\x71\xD7\x0F\x77\xC8\x71\xD9\x83\xD8\x51\xA7\x6B\xB3\x77\xCA\xD1\xA1\x64\xBD\x8A\xB4\xC1\xBC\x00\x12\x61\x6F\xAD\xDE\xD6\x46\x80\x72\x70\xA6\x7C\xC9\xC8\xC4\xD8\x6A\xB1\xB1\x38\xD9\x41\xE5\xB3\x45\x6E\xB9\x71\xB3\xA8\xB3\xA6\xE2\x92\xDF\x97\xD4\xD1\xB4\x44\x57\xDB\xB4\xB9\xBC\xC5\x68\xF3\xA6\x8D\x38\xC2\x7B\x22\xE2\x6C\xAF\x78\x19\x92\x60\x90\x01\x4C\x4D\xD6\x5A\xAB\x23\x6C\x40\x7C\x45\x6D\xB0\x96\x00\x2C\x4B\xB2\xEF\xCE\x24\xBD\xFA\x6C\xDE\x87\xD4\xA6\x6A\x04\xED\xA8\xC5\x64\x2B\x37\x2C\x87\xC1\xE2\x40\x38\xBD\xB1\xD4\x26\x2A\x6C\x96\xD5\x55\x44\x88\x2A\x55\x4B\x2D\xE0\x81",
"\xE1\x61\x3A\x16\xE6\xE0\xCC\x89\xEB\xA0\x00\x3B\x05\x8B\x07\xF6\xE1\x19\x99\xE8\xBE\x8E\xCC\xDB\x7D\x14\x68\xC4\x5D\x22\xE2\xDC\x92\xD0\x26\xE4\x56\x67\x21\xCA\xDC\x27\x23\x4C\xF4\xD1\xD4\xA5\x70\xC9\x65\xA6\xD5\x78\x9E\x29\xD6\x2A\xFB\x51\xAC\xC8\xF8\xD3\xD7\x81\xCD\xE5\x67\x32\xEB\x41\xCF\x24\xC0\x00\x5F\x38\xE0\xE6\x3D\x7B\xE7\xD7\x9A\xE5\xC2\xFD\x29\x9E\xA6\xA8\xBC\xE6\x46\x8F\x47\x6A\x09\x47\xEE\xAA\x14\x7F\x3F\x7C\x0D\xE0\xC9\x38\x8C\xBD\x78\x64\x34\xBA\xE5\x31\xBE\xEC\xCD\x4E\xDA\x90\x13\xFC\xC9\xCE\xE9\xEA\xA2\x71\xB9\xE4\x4D\x89\xE1\x6B\xE2\x97\xE1\xE9\xB5\xF8\xB8\x82\x6E\xFF\xE3\xD2\x23\x5C\x72\xB9\xF6\x7C\xEE\x11\x4D\x3F\xDD\xAC\x94\x58\xF9\x15\xE5\xEF\x9B\xB6\x69\x81\x40\xAD\x77\x19\x78\x0F\x6A\x55\x36\x23\x42\x25\x26\x0F\x8B\x1A\x31\x23\x2D\x8E\xE7\xF2\x13\xF1\xEC\xBA\x23\xED\xE6\xAA\x07\xEE\xD8\x94\xF5\xE3\x9E\x57\xF3\x2A\x99\xF5\x70\xE7\x98\xED\xE0\x36\x78\xB8\xF4\x3F\xA3\xF6\x42\x56\x6A\xEF\x8A\xCA\xBB\xD8\x7F\xEB\xF6\xE0\xAE\xF0\xF6\x9F\x33\xF0\x00\xB5\xE5\x80\xEE\xC4\xA8\xDA\xC9\xE8\xEC\xF8\x01\x46\xFA\x46\x98\xF3\xFA\xCD\xFB\xCD\xF2\x8F\xEC\xEC\xF4\xF6\xE5\xD2\xEA\xC9\x46\xE9\xA8\xEB\xCC\xE0\xAC\xF9\x82\x74\xC4\xF3\xFA\x86\x7C\x6E\x1D\x39\x71\xBD\x7E\x12\x34\x71\x30\x37\x7C\x70\xF1\x7A\x76\xF1\x7D\x73\x65\x1E\x71\xD6\x65\x38\x42\x7E\x12\x44\x7E\x1A\x46\x75\x7F\x14\x3A\x74\xD3\x7A\x72\x5D\x11\x20\x5E\x71\x7F\xE2\x1B\x7B\x33\x79\x5E\xA0\x27\x6A\x56\x72\x7A\xE5\x2C\x6A\xE6\x7B\x20\x0F\x76\x35\xBA\x75\x71\x01\x35\x80\x40\x17\x30\x00\x05\x62\xB8\x02\x7C\x1A\x38\x7E\x0D\x71\x30\xC7\x74\x36\xFB\x15\x39\xBB\x2D\x79\x96\x73\x77\x7D\x44\x7F\x48\x79\x77\xF7\x7C\x77\x1F\x50\x6E\xD9\x75\x1E\x82\x75\x2B\x67\x18\x47\xB9\x75\x02\xE5\x70\x83\x3A\x89\x73\x3C\x8B\x7E\xC8\x7D\x7E\x95\x39\x25\x42\x83\x79\xCF\x75\x84\x28\x87\x84\xA5\x70\x20\x4A\x8A\x66\x7E\x6A\x7D\x84\x65\x5D\x16\x1D\x17\x3F\x81\x46\x66\x32\x80\x91\x76\x85\x10\x79\x7E\x11\x8F\x81\x30\x71\x83\x2F\x7B\x20\x34\x8C\x50\xA4\x08\x83\x1F\x3C\x80\x79\x8C\x76\xEC\x7F\x83\xBD\x31\x84\xCC\x70\x86\x44\x8A\x39\x46\x88\x77\x65\x8B\x77\x39\x77\x7D\x4C\x80\x42\x6A\x85\x5A\x50\x81\x49\x02\x85\x85\x2E\x32\x88\x7C\x84\x88\x5B\x86\x88\x19\x4E\x85\x89\x87\x7E\x61\x8C\x88\x63\x8E\x88\xD5\x78\x7F\x4B\x8E\x77\x94\x8E\x84\x6B\x84\x2C\x6D\x8C\x85\x70\x8B\x39\x44\x58\x87\xC3\x72\x83\x1B\x1F\x7B\x3D\x31\x7C\x0A\x87\x7E\x9C\x8E\x7B\x9E\x8E\x83\x8F\x18\x63\xEF\x75\x71\xCE\x7B\x88\x75\x77\x8A\xA4\x79\x8A\x67\x8B\x5C\xAD\x81\x78\xAF\x8E\x7F\x94\x15\x78\xEB\x6D\x42\x9A\x8B\x76\xBF\x8E\x12\xEA\x76\x3F\x85\x83\x8C\x85\x3B\x79\x71\x7D\x7C\xF2\x72\x86\x6E\x54\x86\xCC\x89\x73\xF9\x79\x86\xAE\x85\x5A\xDC\x7D\x10\xB1\x73\x7D\xB4\x76\x7B\x23\x1D\x42\xB6\x80\x8C\x21\x85\x7C\x24\x8E\x6F\xA8\x68\x82\xE6\x2A\x75\x76\x82\x6B\x77\x8B\x87\x39\x88\x8B\x00\x04\x83\x3D\x3F\x87\xBD\x8D\x89\xD9\x83\x83\xC1\x83\x12\x3F\x84\x8C\x88\x80\x7F\xA4\x88\x8C\xA1\x75\x8E\xA8\x89\x84\xE8\x8B\x8A\xA9\x74\x31\x95\x85\x39\x97\x82\x85\xE4\x75\x6F\x74\x8A\x51\x2E\x3D\x83\x0E\x9E\x8D\xBD\x32\x8A\x12\x93\x7C\xA5\x89\x8C\x16\x9B\x8C\x18\x90\x73\xE9\x8A\x53\x1D\x9A\x64\xB1\x8F\x86\x0E\x11\x87\xF4\x82\x90\x1F\x37\x8F\x2E\x34\x75\x6C\x57\x75\x10\x1D\x8F\x8A\x73\x88\x00\x92\x31\xCC\x21\x20\xFA\x80\x31\x3C\x93\x3C\x6B\x5A\x45\x00\x0D\x33\x55\x29\x90\x74\x1B\x94\xC4\x7E\x78\x83\x8F\x82\x76\x84\x90\xBF\x71\x30\xBC\x85\x94\xC3\x7B\x90\xB9\x8D\x90\xC9\x7D\x3B\x37\x50\x43\x9E\x76\x35\xF3\x7A\x8C\xD3\x78\x84\xA6\x71\x20\x33\x9D\x84\xD0\x87\x6E\x61\x5D\x14\xD0\x77\x78\xA9\x57\x8D\x93\x72\x96\x51\x94\x96\x5C\x8D\x3B\xCB\x78\x96\xE2\x8D\x92\x15\x95\x72\x17\x9F\x96\xCD\x88\x7D\xCF\x8C\x7F\x4B\x3D\x8E\x24\x72\x7B\x53\x11\x7E\x9F\x23\x7E\x82\x45\x8F\x1F\x34\x90\x34\x81\x30\x08\x90\x96\x39\x8C\x97\x59\x8C\x8D\x9F\x8F\x76\x6D\x21\x70\x12\x83\x84\x9F\x74\x8E\x86\x90\x93\x88\x99\x91\x68\x84\x93\xEB\x82\x61\x3E\x1E\x86\xB7\x49\x10\x3A\x91\x92\x14\x7B\x89\x24\x9B\x83\x7E\x90\x8A\x4B\x38\x88\x82\x9A\x88\xA7\x96\x8A\x2F\x9D\x96\x8F\x87\x7A\x1A\x9A\x7F\x35\x99\x41\x1F\x9F\x53\x2D\x49\x94\x0D\x76\x95\x19\x25\x71\x56\x90\x94\xFB\x8E\x56\xF7\x8E\x8F\xCF\x9F\x94\x3C\x17\x94\x4F\x73\x58\x03\x66\x33\x50\x74\x17\x64\x77\x3B\x0C\x75\x59\xB3\x5F\x3B\xEE\x6A\x94",
"\xDA\x91\x81\x00\x79\x3C\xE1\x94\x57\x5F\x60\x81\xA0\x6E\x9D\xF7\x67\x5C\x75\x54\x65\xD4\x9C\x30\x8F\x1F\x30\x6F\x50\x10\x30\x48\x9D\x57\x65\x60\x10\x8C\x31\x52\x76\x5C\x58\x66\x57\x16\x0F\x9E\x3D\x67\x9F\x10\x84\x32\xFB\x93\x12\x3C\x13\x5E\x2A\x3C\x32\x5B\x76\x9F\xF1\x91\x56\x1C\x36\x99\x40\x1D\x33\x50\x63\x79\xF9\x94\x2C\x0E\x30\xA1\x29\x8E\x9F\x85\x38\x9D\x7B\x93\x80\x6B\x7B\x16\x76\x8E\xA0\x21\xA9\x11\x27\x31\x10\x13\xAC\x99\xDA\x8C\x3E\x1A\xA8\x70\x02\x3D\x94\x36\xAF\xA1\x25\x3C\x9F\x11\x35\xA2\x32\xA0\x14\x2D\x85\xA3\x16\x7A\xA2\xE2\x8C\xA2\x26\x3B\x5A\x29\x36\x35\x2B\x84\x17\x2D\x8E\x9C\x39\x76\x95\x8D\x12\x82\x0B\x23\x9D\x25\x85\x75\x20\xA7\xA4\xF7\x8F\x9F\x3F\xAD\x6F\xEB\x9C\x31\x4E\xA0\x73\x56\x9F\x00\x38\xA5\xA5\x6C\x56\xA4\xFC\x9B\x2F\x31\xAB\xA4\x2E\x16\x95\x1C\x36\x65\xC6\x5F\x6A\xA4\x60\x00\x1C\x0A\xA0\x1A\x64\x64\x9E\x6A\xA3\x0F\xAE\xA2\x00\x0B\x6A\x24\xA4\x31\x00\xAF\xA6\xF1\x6C\x62\x55\x64\xA7\xA6\x3D\x69\xD5\x63\x56\xF4\x95\x56\x85\xA6\xA7\xD5\x66\xA6\x22\xA9\xA0\x49\xA4\xA1\x13\x8D\x57\x81\xA1\x6B\xBC\x24\xA8\x6E\xAF\x9D\xF9\x8B\x9E\x3B\xA2\xA2\xFB\x2A\xA5\xF6\x6A\xA8\x30\x34\xA8\x3E\x98\x6B\x3B\x37\xA5\xFC\x9B\x16\x69\xA5\xA1\x04\xA4\xA8\x07\xA4\x65\x99\xA5\x9F\xAF\xAD\xA0\x35\x8B\x65\xA1\xA9\x61\x16\xA2\x50\x60\x6B\x6D\x67\x41\x63\x6C\x7D\x48\xBF\x51\x97\x8C\x4D\x66\x80\x67\x52\x82\x6A\x52\xB0\x93\x67\x2F\x56\x61\xCF\x64\x53\x86\x46\x96\xA8\x5D\x9A\x7F\x70\xAC\x26\x50\x61\xE6\x61\x54\xA7\x57\x49\xD0\x60\x3A\x48\x5B\x34\x9D\x44\x4D\x64\x62\x63\x4E\x52\x1C\x91\x67\x35\xC5\xAE\x5F\xA4\x75\x59\x4E\x71\xAB\x8A\xA0\xA7\x9E\x6E\x61\xA6\xA5\xA7\xA3\x67\xA7\x35\x7B\x58\xE5\x90\xA8\x86\xA2\x6F\x57\x95\xA1\xB3\xA1\x56\xC2\xAB\x60\x8C\xAE\x60\xF2\x43\x5A\xD7\xA9\x42\x42\x52\x87\x54\x82\x92\x93\xA2\xAF\x7F\x5A\xAF\x2D\x65\x5F\x63\x66\x43\xE2\xA3\x64\xF3\xA0\x5A\x36\x61\x5C\xED\x3B\x6F\x0B\xB9\xAB\x68\x59\x4E\xD2\xAC\x59\x95\xA5\xAC\xD6\xA8\xAC\x72\x6D\x47\xCB\xA1\x53\x88\x75\x02\xB2\x20\x10\x42\xA1\x30\xF6\x11\x20\x23\x27\x15\x05\xAA\xA9\xFD\xAB\x3E\xB8\x18\x69\x0D\x7A\x21\x6E\x34\x27\x1D\x12\xA4\x3D\x3F\xB2\x39\xB1\x10\x23\x04\x28\x42\xAC\x26\x40\xB9\x73\x1A\x25\x02\xA5\x23\xA6\x56\x97\xB4\x30\x7A\x21\x27\x04\x28\xEC\xA8\xAB\xEE\xA5\x6D\x37\xBA\xA9\x30\xB1\x10\x98\x2C\xB3\x29\x29\xA8\xB8\xA7\xB5\xF5\x99\xB5\x00\x1B\x2B\x5C\xBF\x01\x9C\x2F\x0F\xE2\x2F\x0F\x1A\x22\x2E\x31\xBD\xB6\x6E\xBB\x21\x68\xBC\x21\x4E\x2B\x28\x31\xBE\x24\xF6\x1C\xB6\x23\x2D\xB2\x99\x2C\x6A\x6E\xBE\xB3\x7B\xB0\x10\x26\x0F\xB6\x45\xBE\x28\x1F\x26\x2E\x23\x7A\x35\x23\xB7\xA9\x00\x1E\x7F\x98\x3C\x6C\x71\x85\x6B\xC6\x51\xB7\x24\x26\x1F\x74\xB3\x22\x76\xB1\x10\x78\xBF\x21\x7A\xB6\x1F\x16\x3D\xB7\x63\xAF\xB3\x01\x11\xB8\x9E\xB2\xA5\x4C\xA4\xB8\x1B\x26\xB8\x45\x78\xB8\xE5\x67\x16\x40\x2B\x6C\x3A\x4F\xB8\x84\xA4\x22\x69\xBF\x1E\xE8\x21\xB3\xE8\x27\xB7\x82\xB3\xA6\x2E\xBC\xB7\x6D\xBE\xB7\xF6\x12\xBA\xBD\xB3\xA6\x6C\x2F\xB6\x1C\x29\xB6\x40\x2E\x24\xB6\xB1\x10\x94\xBF\xB6\x90\xBA\xA9\xF6\x12\x27\x6E\xB3\xB5\x9C\x61\xB0\xE8\x59\xB9\x8A\xBF\x67\xDC\x42\x11\x1A\x23\xB3\xB2\xA2\xA0\x61\x52\xB9\x1C\x1B\xB2\x7F\xBD\xB6\x8B\x2B\xBC\x6E\xBD\xBC\xF5\x9F\xBC\x6F\xB2\xBD\xA2\x6D\xB0\xE8\x5F\x21\xE0\xBF\x0F\xF7\x80\x24\x31\xB1\x2F\x01\x15\xB9\x1F\x28\xBE\x8A\xA0\xBF\x69\xB3\xB7\xB9\xB0\x10\xF6\x15\xBB\x23\x2A\xBF\xB8\xA6\x1F\x8D\x2E\xB6\x5F\xA3\xA5\xEB\x98\xBB\xA3\xB6\x85\x9C\xBF\xBF\xF8\x8F\xBB\x10\xC9\x71\xC8\xB1\x10\xA8\xB6\x81\xAA\xB4\xB0\x67\x1F\x1E\x8C\xBB\x85\x01\x84\xC0\xE4\x41\xBF\xE6\xB1\xBC\x00\xC1\x10\x02\xC9\xBF\x84\xA6\xC0\x6F\xB9\xC0\x55\x9B\xC0\x98\xB3\xC1\xBA\x9F\xC0\x0D\xC6\x87\x12\xC3\xC3\xE2\x85\xC1\x00\x17\xC1\x8E\x34\x6E\x1A\xCD\x31\xAE\xBD\x47\x3C\x10\xC2\xCF\x12\xBB\x1C\x24\xBB\x6F\xB6\x1F\x01\xCC\xBC\x29\xC1\x10\x07\xCD\xB6\x2C\xCB\xA6\x2E\xC0\x10\xD6\xBA\x21\x9B\xBC\xBB\x31\xBE\xBB\xA1\xB0\xC3\xF1\x7D\xB6\xF1\xB2\x2E\xEF\x11\xB3\xF8\xBB\x21\x60\xBA\xA8\x62\xB7\xA3\x5E\xB4\x4E\x35\xBF\x18\x38\xC0\x00\xF7\x84\xAD\x0F\x6B\xBA\x00\x0C\x2C\x13\x67\x5D\x7F\x46\x15\xDC\xBA\xA8\x69\xC9\x16\x8B\x2F\x0F\x8B\x2C\x2C\xCC\x20\xBE\xE2\x2B\x01\xC5\xB1\x10\xCC\x27\x8F\xE0\xBB\x16\x1E\x03\xC8\x00\x1B\x2F\x89\xC4\xC4\x00\x12\xBE\x1D\x0A\xC8\x48\xA0\x00\x91",
"\xCE\xC8\xA6\xBB\xC7\xF6\xB0\x10\x98\xC1\x10\x46\xC2\xC5\x01\x10\xBD\xE3\xB1\xB3\x63\xC8\xAB\x65\xC7\xC7\xB8\xA9\xC7\xA6\xBA\x21\x6D\xC4\xAC\xD9\xB6\xAC\x98\x82\xC7\x4B\x67\xB2\x76\xCE\xAA\xDE\xBB\x3E\x40\x20\xCA\x31\xB6\xCA\x68\xC5\xCB\x8F\x17\xC2\x6D\xBC\xBE\xD3\x69\xAF\xE8\x5B\xC6\x51\xA9\x5F\xD4\xB3\x69\x89\xB8\x2E\x86\x63\xA8\x67\xCD\xBE\xCF\x58\x5E\x7C\xC4\xC8\xD2\xC6\xC9\x9D\xCC\x11\xE2\x22\x2E\xE4\x96\xCD\xD3\xCC\xC6\x92\xC8\xC8\x92\xCC\xC8\x92\xC0\xC9\x92\xC7\x33\x95\xCA\xCD\x02\x17\xBF\x92\xC3\xC2\xE2\x27\x33\xF6\x12\xCA\xDC\x18\xB5\x41\xB0\x10\xBA\xCF\x1C\xA8\xCB\xC6\xAB\xC7\x66\xAD\xC9\xB8\xB0\xCA\xAC\x15\x60\x48\xF3\xC2\x65\x0C\xA1\x56\x40\x27\x33\xB9\xC4\xCB\x53\x60\x81\xBE\xC1\xB3\xC0\xC0\x6F\xC2\xCA\x4B\xC4\xCE\x18\x0D\xD2\xB2\x70\xCB\xCF\x26\xBD\xCF\x56\x1B\xD0\xCA\x41\xD1\x56\x14\xBC\xE6\xCC\x11\x4A\x42\xBE\x69\xB2\x2E\x40\x2B\x16\x6B\xB1\x10\xF6\xC3\x1E\xAC\xC6\x64\x3D\xC4\xD1\x2E\x56\xD1\x10\x1F\xCF\x5E\x6A\xAB\x10\x8D\xD1\xE0\xBF\xC5\x23\x21\xC6\x1A\x23\xCA\xE4\x45\xCA\x06\xD1\xD0\xEB\x37\xD2\xD4\x19\xD2\xD5\xA0\xC7\xCA\xC7\xB0\x30\xD0\x9F\x32\xDF\xBD\x7B\xCD\xC7\xDB\xC0\xBE\x23\xC5\xD3\x26\xCF\xCD\x01\x1D\xC8\x1D\xD1\xC8\xDD\xC3\xD5\xE1\xC1\x10\xE5\xC0\xBE\xE4\xC2\xC9\x85\xC2\xC9\xFE\xBE\xC9\x00\x10\xCA\xED\xC3\x22\x3A\xDF\x1C\x3C\xDD\xCC\x00\xD7\xA1\x3F\xD3\x22\xF7\xC7\x4F\x2A\xD0\x67\xED\x15\xD4\xA7\x57\xD4\x0B\xAC\xD6\x8F\x17\xCB\x6F\xB6\xD7\x66\x5C\xCB\x3C\x19\xD0\x23\x28\xD1\x94\xAA\xD1\x10\x1F\xD0\x00\x1B\x5B\xEE\xB8\xCC\x44\xD1\x10\xCB\xC2\xD8\x0C\xBF\xCC\xBA\x41\xCD\x00\x1E\xC7\x60\xD8\xCE\x96\xCF\xD4\x5E\xC1\xD5\x96\xC6\xD5\x96\xCF\xD5\x96\xCE\xCD\x96\xC0\xCE\x96\xC2\xCE\x96\xCD\xD5\x62\xD3\xC9\x65\xDF\x21\x67\xD5\x3A\x69\xDC\xAF\x7E\xD9\xCA\x01\x1F\xD6\x25\x5F\xC6\x3D\xC4\xD7\x5B\x5A\xD6\x31\xDD\xB1\x3C\x13\xD0\x7B\xDD\xD3\x78\xDF\xD7\x1C\xD0\x10\x8E\xDB\xA8\x15\xBA\xAF\x86\xD6\xCC\xC5\xD4\x19\x71\xD7\xAC\x71\xC9\x13\xB1\xCE\xD2\xCC\xC5\xA1\x55\xBA\xAF\x1C\xD1\xBF\x1F\xDF\xC2\x96\xC3\xD2\x23\x22\x2E\x40\xD8\xBD\xCB\xD8\x89\xB6\xDB\x11\x7C\xDC\xB1\x13\x5C\xBF\x1C\x20\x24\xE6\x25\xBF\xD8\xDB\x21\xFB\x28\xD8\x90\xD5\xAC\x1A\x23\xDC\xD3\xDF\xBE\x27\x29\xB6\x62\xA0\x10\x04\xD1\xDC\x3E\x26\xBC\x44\x1E\xB6\xD7\xC3\x22\xFB\x20\x69\xA5\x4D\x43\x93\x6B\xBD\xBE\xD9\xD4\xEB\x3A\xDF\xD5\xD1\xD2\x01\x1B\x2F\xC4\xB1\xBF\x8B\x27\x8F\x25\xDA\xC9\x96\xDD\x31\x38\xD1\x10\xF2\xD1\xB2\x56\x10\xD8\x28\xC8\xDB\x2E\x1A\xE0\xFB\xD7\xDE\x26\xDF\xB6\xE5\xB1\x10\xF9\xDF\x21\x19\xE4\xD8\xD7\x2D\xE1\xDE\xD6\x52\x06\xEE\xE1\x77\xD8\xE0\x8F\x11\xBF\xE2\xB9\xDA\x1B\x29\xC9\x93\xCA\xD0\x84\xA3\xDF\xBA\x40\xE2\xF5\xDC\x21\xF7\xD9\xE3\x0B\xE2\xC9\x36\xDF\x21\x53\xCD\xDF\xF1\xA5\x71\x2F\xEE\xDA\x07\xDA\xD4\x1C\x2C\xD4\x46\xEF\xC9\x23\xEE\xB6\xAB\xD7\x44\x48\xB1\x10\xE3\xD8\xCA\x7A\xDE\xB6\x59\xEF\xDA\x1C\xEB\x21\x29\xE7\xCC\x80\x47\xDC\xEE\xD7\x5E\x8A\xD5\xDB\x8C\xD7\xB0\x61\xE9\xDC\x91\xD0\xE5\x37\xE6\xE2\x53\xED\xB6\x55\xEF\x1D\x57\xE2\xCF\x07\xEA\xDB\x1D\x37\xE2\x1B\x2D\xE5\x4D\xEB\x3E\x5F\xE1\xDF\x3B\xEA\xE1\x85\xD3\x22\xC5\xC5\xE6\x2B\x67\xE6\x72\xD7\x16\x2C\xD4\x61\x75\xC0\x11\x6B\xE9\xD8\x80\x4E\xE3\xC1\xDD\xC5\x18\x2A\xDF\x92\xDC\x11\x8B\x21\xE4\x13\xE0\x00\xC0\xBB\x28\x40\x20\xBC\x31\xB2\xC4\xA5\x3F\xE7\x01\x13\xB8\x97\xEA\x44\x9B\xE3\x5E\x9E\xE1\x10\xE3\x51\xEA\x84\xA6\xBD\xF6\x17\xB8\x1B\xD5\xEA\xC2\xBA\xE0\x94\xE0\x10\x53\x95\xDD\x4B\xD8\xE1\xB4\xEB\xD9\x01\x19\x01\x5E\xD1\xDB\x57\xD0\x10\x54\xD0\xBE\xA2\xDD\xD1\xA4\xDD\xD1\xA6\xDB\xE2\x15\x35\xE1\x40\x2D\xB9\x24\xC6\x8C\x82\x2A\xDF\x7E\xB7\xE9\xC5\xC0\x24\x87\xC8\xD5\xA1\xDA\xED\x55\xD1\x10\x82\xCD\xD9\xC2\xE3\xDA\x5A\xD3\xCE\xE3\xE7\xDA\xE5\xCB\xEA\x00\x15\xCE\x57\xC5\xEB\xD6\xB0\x24\x6B\x9E\x56\x54\xCF\xB9\x34\xD8\x2E\xE3\x58\x2E\xE0\xB1\xD6\x1D\xD8\xD9\x9C\xCA\xD9\x1B\x2B\x28\xE2\xB0\xEA\x79\xBC\xEE\x01\xF0\x10\x3E\x7A\x43\x09\xED\xEB\xD2\xE3\xE9\x0C\xE8\xEB\x6F\xB7\xE4\x00\x1B\x16\x1A\x8B\x15\x49\x1D\x74\xF1\xC8\xA2\xF1\x77\xE9\x97\xE2\x4B\xD8\xEF\xDF\x00\x1F\xED\x1D\xD0\xDA\x1D\xD7\xEC\xE0\xBE\xD9\xC8\xE5\xEE\xCA\xE6\xF2\xE2\x20\xED\x5F\xE0\xF1\x56\x5C\x81\x14\xF5\xE7\x16\xF3\x82\xCF\xEA\xC5\x23\x84\xEA\x2C\xB2\xEF\xD6\xE8\xF0\x80\xC1\x10\xD9\xC3\xF2\xE1\xEF",
"\xF1\xDC\xE6\xEC\x41\xF2\x2E\xC9\xEC\xD5\x28\xF6\xF2\x2B\xF9\x15\x1B\x8C\x74\x2C\x70\xF3\x83\xB0\x24\xEA\xE3\xF0\xD2\xED\xEE\x01\x1F\xEE\xB3\xE7\xF3\xA4\xB3\xA3\xF1\xB4\xEF\xFC\xE7\xEF\x15\xEE\xD4\x5F\xF9\xD9\x00\x1E\xCB\x49\xFD\x2D\x2D\xFC\xF4\x4A\xE8\xF0\x19\x7F\xEF\x34\xFC\x82\xCC\xE1\xEF\x04\xFF\x80\x61\x50\xF7\x09\xF2\xE9\x6F\xB7\xEB\x00\x00\xEC\x93\xEB\xEB\x00\x1C\xA7\xA6\xBB\xF3\x1D\xF1\xEC\x00\x16\xC8\xE2\x20\xF2\x42\xF4\xEC\xEB\xD4\xD5\xE8\xE0\x00\x54\xDB\xEE\x59\xFB\xA1\x6F\xF8\xF0\x56\xF0\x11\x74\xFE\x32\x97\xE0\xA9\x7F\xFC\xF1\x00\x0E\xF1\x3E\xF3\xF8\xC3\xEC\xF8\x52\xD8\xF8\xA7\xD2\x2E\x8B\xFE\xF0\x31\xF3\x7C\x36\xF7\xFA\x39\x8B\xF5\x01\x18\xA8\xA1\x20\xBE\x45\xFB\xCE\x26\xFA\x21\xFE\xE6\xC5\x52\xF6\x87\xB0\xE1\x10\xDD\x86\x4C\x6A\xFB\x76\x0A\xF2\xC9\x7A\xFA\xEB\x4F\xE1\x10\x7E\xFE\x24\x80\xF0\x00\x3D\xF2\x2E\x24\xF9\xED\xA2\xF1\xF2\xDC\xE2\x2E\x8A\xF8\xF0\x8D\xF7\xFB\x6B\x74\xF5\x0E\x28\x9A\x94\xFD\xFB\x58\x88\xE9\x01\x18\xF9\xC6\xFA\xF9\x9C\xFA\xFC\x3F\xFC\xFC\xA0\xFB\xED\xCD\xFA\xF9\xA5\xFD\xF6\xC0\x89\xFA\x7A\xBC\xFA\x00\x1E\xFA\x9B\xCF\xC8\x26\xF6\xF4\xE9\xE7\xD3\x01\x12\xBE\xD0\xEE\xF8\xF8\x89\xFB\x00\x1B\xFB\x1B\x2E\xB7\x20\x71\x7E\x78\x76\x30\x6A\xBC\x2C\x76\xFA\x66\x40\xB0\x69\x87\x41\x08\x59\x7C\xC3\x09\x77\xF5\x5D\x60\xEA\x30\x76\x70\x71\x8D\x02\xC2\x15\x70\x01\x85\x61\x00\x0D\xD5\x54\x7F\xF8\x3B\xC6\x3A\x63\xB8\x2E\x65\x78\x25\x75\x5E\x61\x75\x32\xEA\x74\x0A\x25\x7D\x5A\xD3\x76\xBF\x45\x81\x0C\x87\x00\xC0\x52\xDD\x7F\x71\x96\x66\xE3\x4F\x71\xB4\x5B\x28\x73\x50\x85\x7E\x75\x00\x09\xF9\x5B\x67\x7B\x42\x2E\x4D\x63\xE2\x6D\x62\xFA\x7E\x65\x29\x7D\x27\x6E\x94\x26\x43\xBC\x61\x08\xF3\x4F\xF5\x45\x7D\xA1\x7D\xE0\x5C\x74\xED\x77\x7F\xEB\x69\x08\xBA\x4C\xFE\x7D\x76\x5C\x41\xE5\x7A\x4D\xBF\x79\x06\x96\x74\x1A\x81\x10\x36\x82\x12\x8B\x6F\x3A\x83\xB2\x7F\x79\x1E\x8E\xEC\x4C\x61\x0B\x9B\x08\x01\x1B\x08\x8C\x5B\xF5\x4E\xFE\x1F\x35\xD8\x68\x72\xC5\x72\x5C\x07\x77\x27\x82\xFF\x27\x6E\x14\x9B\x7E\x54\x86\xFF\x57\x83\xED\x76\xF7\x34\x73\xEC\x76\x7F\xE7\x5E\xB9\x6B\x4D\xA7\x5A\xFD\x67\x3F\x1A\x6B\x14\xAB\x3C\x59\x12\x47\x9F\x07\x97\x2A\x7F\x8C\x47\x81\xCB\x77\x02\xAD\x5A\x04\x13\x08\x8B\x13\x1E\x86\x84\x80\x83\xFF\x26\x16\xC7\x4F\x8E\x5F\x3E\x64\x57\x3D\x8E\x80\xF2\x6F\x81\x2C\x8C\x11\x20\x7A\x24\x8E\x75\xC0\x11\x26\x56\x85\x42\x8D\x89\x07\x84\x81\x05\x0F\xF6\x0B\x39\x52\x11\xF6\x79\xB6\x73\x81\x26\x88\x85\xC5\x4D\x8C\x7A\x5A\x57\x80\x10\x09\x86\x73\x77\x49\xB3\x4B\xDD\x3A\x5B\x17\x88\xF7\x59\x67\x0C\x83\x7E\x00\x0C\x62\x11\x73\xB1\x75\x06\xCC\x84\x02\x6B\x83\x46\x81\xF5\x65\x81\x0F\x71\x00\xFD\x5E\x05\x83\x11\xB7\x5F\x0F\x9A\x5C\x79\x75\xC3\x51\x74\x05\x63\x11\x1E\x87\x02\x49\x5C\x0E\x68\x82\x11\x83\x63\x13\x86\x40\x0D\x02\xB7\x81\xB6\x59\x0D\xF5\x7E\x0D\x73\x3C\xDD\x87\x0E\xA3\x41\x0E\x8B\x00\xA9\x5F\xB1\x3D\x61\x22\x86\x1C\x81\x63\xD8\x54\xD3\x55\x66\x24\x96\x0F\x51\x7B\x1B\x8F\x7D\xB1\x41\x0F\x9B\x83\x08\x47\x86\x24\x13\x00\x96\x5D\x15\x85\xFE\x5E\x85\x0C\x76\x7D\x02\x89\x82\x59\x63\x77\x83\x0F\xE0\x85\x3D\x98\x60\xF7\x86\x01\xA4\x87\x74\x3E\xB8\x67\x84\xA1\x4A\x87\xA1\x15\x6E\x4C\x89\xE9\x71\x11\xAE\x1A\x0C\x6E\x88\xF0\x83\x22\xA8\x89\x8A\x85\xB8\x17\x8B\x0E\x60\x81\x3F\x29\x1F\x9D\x89\x7D\x83\x01\x92\x64\x0A\x9F\x72\xED\x85\x21\xB2\x87\x4E\x47\x12\xBB\x88\x30\x45\x88\x25\x8A\x1C\x63\x84\x84\x8C\x11\x24\x7A\xA4\x71\x5F\x1A\x13\x69\x03\x8B\x21\x74\x22\x47\x5D\xC3\x71\x82\xFB\x71\xA8\x78\x67\xDF\x2B\xE4\x1B\x58\x2A\x7E\x83\x18\x83\x14\x88\x8A\x88\x8B\x14\xF0\x5A\x35\x8B\x87\xC9\x59\x2B\xB9\x7E\x83\x83\x7C\x40\x8B\xFF\x75\x75\xF4\x84\x35\x18\x89\x06\x8C\xDC\x1B\x8A\x55\x1A\x87\xD7\x5B\x63\x60\x89\x0B\x7E\x0C\xE3\x5F\x58\x81\x8A\x29\x88\x70\x67\x82\x8B\x39\x16\xD7\x1B\x5A\x90\x89\xB3\x81\x20\x3F\x61\x0F\x6C\x0F\xF1\x5E\x3F\x99\x84\x3D\x8C\x2C\xBF\x88\x95\x8E\x13\x88\x81\xCC\x5B\x8A\x7A\x8D\x2B\x9C\x63\xAF\x81\x12\x88\x8C\x63\x8A\x8C\x08\x85\x2F\x8C\x80\xC0\x8D\x1E\x6E\x89\xE3\x4F\x5D\x1E\x8D\x26\xB3\x8A\x12\x7C\x10\x80\x78\x5E\x8C\x89\xA7\x5E\x25\x9F\x81\xC4\x52\x13\xA0\x8C\x4D\x95\x50\x27\x87\x30\x8B\x87\xF1\x56\x1A\xE7\x8B\x40\x96\x38\x8F\x89\x6D\x5A\x10\x20\x82\x19\xDE\x8A\xDC\x57\x86\x1F\x10\x89\x66\x83\x67\x87",
"\x1B\xCD\x58\x54\x87\x8D\x3C\x8C\x2B\x97\x85\xB2\x87\x19\xC8\x8D\xE9\x5A\x8C\xF6\x84\x2D\x98\x44\xCF\x83\x02\x92\x81\x85\x43\x8D\x6E\x5A\x38\x80\x08\xDE\x8F\x21\x44\x80\x97\x46\x82\x0C\x63\x25\x89\x8E\x80\x07\x17\xB6\x8E\x44\x91\x8C\xE2\x8F\x39\x96\x88\xB5\x8F\x12\xAC\x8E\x60\x95\x8E\xA1\x88\x36\xBD\x86\x7E\x72\x12\xD9\x88\x77\x9B\x10\xDE\x8C\x4C\x4F\x0D\xF0\x8D\x18\x8C\x49\x62\x8E\x8E\x33\x56\x2C\x8B\x8F\xD2\x59\x1B\x9C\x12\x86\x18\x65\xBD\x8E\xBC\x4D\x8B\x38\x7F\x0F\xD2\x71\xF4\x41\x74\x2A\x76\x7A\x6F\x0E\x37\x63\x3D\x55\x89\x92\x77\x8A\x69\x5D\xC6\x4F\x8B\xAC\x88\x20\xA8\x70\x84\x82\x73\x57\x7E\x26\xB3\x5F\x6A\x86\x20\x81\x08\x0B\x09\x90\x30\x84\x23\x0A\x89\xD9\x80\x1D\xFF\x8B\x38\x87\x15\x1C\x8E\x35\xB1\x8B\x24\x78\x1D\xED\x58\x77\x6B\x8F\x7E\x8D\x3D\xB0\x63\xD6\x80\xC4\x33\x91\x65\x31\x8D\xF4\x88\x45\x8B\x8A",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

			IMPL_TYPE_INFO_RENAME(GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_attributeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->attributeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_attributeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->attributeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_typeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->typeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_typeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->typeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_referenceName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->referenceName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_referenceName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->referenceName.value = value; })

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				CLASS_MEMBER_PROPERTY(attributeName, get_attributeName, set_attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				CLASS_MEMBER_PROPERTY(typeName, get_typeName, set_typeName)
				CLASS_MEMBER_PROPERTY(referenceName, get_referenceName, set_referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_CLASS_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_BASE(vl::reflection::IDescriptable)
				CLASS_MEMBER_EXTERNALCTOR(Ptr<GuiIqQuery::IVisitor>(Ptr<IValueInterfaceProxy>), {L"proxy"}, &interface_proxy::GuiIqQuery_IVisitor::Create)

				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_CLASS_MEMBER(GuiIqQuery)

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
