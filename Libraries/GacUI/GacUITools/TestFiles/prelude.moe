// Moe Standard Prelude
// Copyright(c) 2012 Belleve Invis

def derive = exports.derive
def Object = exports.Object
def Function = exports.Function
def object = exports.object
def global_ = exports.global_
def Primitive = exports.Primitive
def Array = exports.Array
def Date = exports.Date
def keysof = exports.keysof
def RegExp = exports.RegExp
def type = exports.type
def instanceof = exports.instanceof
def math = exports.math

def MONAD_SCHEMATA_M = moert.runtime.MONAD_SCHEMATA_M
def OWNS = moert.runtime.OWNS
def YIELDVALUE = moert.runtime.YIELDVALUE
def RETURNVALUE = moert.runtime.RETURNVALUE

def export(n)(x) = (exports[n] = x)



// Util functions
def export('its') its(prop)(o) = o[prop]
def export('returns') returns(x)() = x
def export('itself') itself(x) = x
def export('composite') composite(f, g)() = f (do g)
def export('doon') doon(o, f) = f.call o
def export('tee') tee(o, f) =
	f.call o, o
	o

def export('list') list = object =>
	def @car(a) = a[0]
	def @cdr(a) = a.slice 1
	def @initial(a) = a.slice 0, (-1)
	def @last(a) = a[a.length - 1]
	def cat(a, b) = a.concat b
	def @flat(a) = a.reduce cat, []
	def @fill(range, x) = table { var i <- range; x }
	def @tolist(range) = table { var x <- range; x }
	def @shuffle(a) = 
		def b = a.slice 0
		for(i <- 0..b.length)
			var j = math.randInt i, b.length
			var t = b[i]
			b[i] = b[j]
			b[j] = t
		return b

def export('pcl') pac(f) =
	() => f.apply this, args.concat(arguments)
	where args = arguments.slice 1
def export('pcr') pac(f) =
	() => f.apply this, arguments.concat(args)
	where args = arguments.slice 1


-- function time: record run time of an function
def export('time') time(args, f) = 
	def start = new Date
	f.apply null, args
	def final = new Date
	final - start

-- function inspect: pretty-print of object
def export('inspect') inspect(x, targetDepth = 3) = inspectObject x, [], 0, targetDepth
where	
	rIdentifier = `^[a-zA-Z_$][\w$]*$`

	tPropName(s) = 
		s when(rIdentifier.test s), 
		Primitive.stringify s otherwise

	inspectProperties(x, stack, depth, targetDepth) =
		var a = [];
		for(p <- keysof x)
			var prop = x[p]
			var foundCircle = false
			for(j <- stack) if(j === prop) 
				foundCircle = true
				break

			if(foundCircle)
				a.push (tPropName p + ': ' + '[Circular]')
			else
				a.push (tPropName p + ': ' + inspectObject(prop, stack, depth + 1, targetDepth))

		return ' ' + (a.join ",\n  ") + ' ' when(depth == 0), a.join ", " otherwise

	inspectObject(x, stack, depth, targetDepth) = piecewise
		when(depth >= targetDepth) '[...]'
		when(x is Primitive)       Primitive.stringify x
		when(x is Function)        "{ [Function]\n " + inspectProperties(x, (stack.concat [x]), depth, targetDepth) + '}'
		otherwise                  '[' + inspectProperties(x, (stack.concat [x]), depth, targetDepth) + ']'



// Enumeration functions
-- function enumeration: Generates emitters, used for adding methods.
def export('enumeration') enumeration(G)() = 
	def t = this
	def a = arguments
	var e = [emit: (=> fCont.apply this, arguments), active: true]
	var g = G.build [return: fRet, bind: fBind, bindYield: fBindYield] where 
		fRet(x) = 
			e.active = false
			x
		fBind(x, cont) = 
			fCont = cont
			x
		fBindYield(f, t, x, cont) = fBind(f.call(t, x), arguments[arguments.length - 1])
	var fCont = g.apply(t, a)
	
	e;

def enumeration.yield(x) = x;
-- function Enumerable: creates objects containing "getEnumerator" method.
-- Enumerable: (MonadPrimitive(* -> [T])) -> Enumerable T
def export('Enumerable') Enumerable(G)() = [getEnumerator: fGetEnumerator] where 
	t = this
	a = arguments
	fGetEnumerator() =
		var e = [emit: (=> fCont.apply this, arguments), active: true]
		var g = G.build [return: fRet, bind: fBind, bindYield: fBindYield] where 
			fRet(x) = 
				e.active = false
				x
			fBind(x, cont) = 
				fCont = cont
				x
			fBindYield(f, t, x, cont) = fBind(f.call(t, x), arguments[arguments.length - 1])
		var fCont = g.apply(t, a)

		e;

-- function getEnumeratorOf: Returns an enumerator of an Enumerable object
-- Defined in moert
-- getEnumeratorOf: (Enumerable T) -> Enumerator T
def export('getEnumeratorOf') getEnumeratorOf = moert.runtime.GET_ENUM

-- function rangeForEach: A "sometimes-faster" way to run "for" on a function
-- Approximately for(var *a in range) f.apply null, a
-- rangeForEach: (Enumerable T, T -> *) -> *
def export('rangeForEach') rangeForEach(range, f) = 
	def e = getEnumeratorOf range
	if(e.each) e.each f
	else
		var t = e.emit()
		while(not e.stop)
			f t
			t = e.emit()

-- function takeWhile: Wraps an enumerable object, emits terms while it satisifies the condition
-- takeWhile: (Enumerable T, T -> Boolean) -> Enumerable T
def export("takeWhile") Enumerable takeWhile(I, condition):
	for(a <- I)
		if(not condition a)
			return undefined;
		return <- a

-- function select: Wraps an enumerable object, only emits terms satisifying the condition
-- select: (Enumerable T, T -> Boolean) -> Enumerable T
def export("select") Enumerable select(I, condition):
	for(a <- I)
		if(condition a)
			return <- a

-- function pairs: Enumerate value-name pairs in an object
-- pairs: (Object) -> Enumerable [Object, String]
def export("pairsof") Enumerable pairsof(o):
	for(j <- keysof o)
		return <- [o[j], j]
	return []

-- function table: Creates lists using list comprehension monad.
-- table: MonadicPrimitive(* -> T) -> [T]
def export("table") table(G) =
	var ans = []
	def schemata = object MONAD_SCHEMATA_M, =>
		def @return(x) = case(x)
			when(undefined) pass
			otherwise       ans.push x
		def @bind(list, callback) = rangeForEach list, callback

	(do G.build schemata)()

	ans

def export('hash') hash(t) =
	var o = [:]
	for(term <- t) o[term[0]] = o[term[1]]
	o


// Async functions
def Reaction(s, f)(err, x) =
	if(err) f(err, undefined)
	else    s(null, x)
-- Async schemata
def createAsyncSchemata(rLocal, rLongJump = rLocal) = 
	def schemata = derive MONAD_SCHEMATA_M

	def schemata.bind(action, g) =
		action (err, x) =>
			if(err) rLocal err, undefined
			else    g x

	def schemata.bindYield(f, t) =
		f.apply t, arguments.slice(2, (-1)).concat([reaction])
		where
			reaction(err, x) = 
				if(err) rLocal err, undefined
				else    g x
			g = arguments[arguments.length - 1]

	def schemata.try(MAttempt, MCatch, g) =
		def r(err, x) =
			if(err)
				try
					MCatch(catchSchemata)(err)
				catch(ex)
					rCatch(ex, undefined)
			else
				g x

		def trySchemata = createAsyncSchemata r, rLongJump

		def rCatch(err, x) =
			if(err)	rLocal err, undefined
			else    g x

		def catchSchemata = createAsyncSchemata rCatch, rLongJump

		try
			MAttempt(trySchemata)();
		catch(ex)
			r ex, undefined

	def schemata.return(x) = rLocal null, x

	schemata

-- function async: Creates async blocks
def export('async') async(M) = 
	if(M.build)
		function() => 
			M.build(createAsyncSchemata(reaction)).apply(t, a)()
			where { a = arguments.slice 0, (-1); t = this; reaction = arguments[arguments.length - 1] }
	else
		function() =>
			def t = this
			def a = arguments.slice 0, (-1)
			def reaction = arguments[arguments.length - 1]
			var r
			try
				r = M.apply t, a
			catch(e)
				return reaction e, undefined
			reaction null, r

def async.defaultReaction(err, x) =
	if(err) throw err
	else    x

def export('start') start(g) = g.apply this, arguments.slice(1).concat([async.defaultReaction])

-- function join: Start mulitple tasks parallelly, callback when all of them completed.
def export('join') join(o, reaction) = 
	var nActivities = 0
	var nDone = 0
	var failed = false
	var res = [] when(o is Array), [:] otherwise

	def checkContinue(term) = 
		Reaction s, f
		where s(val) =
			      res[term] = val
			      nDone += 1
			      if(not failed and nDone >= nActivities) reaction null, res
			  f(err) =
			      failed = true
			      reaction err, undefined

	var keys = Object.keys o
	if(not keys.length) reaction null, res
	nActivities = keys.length

	rangeForEach keys, (term) =>
		res[term] = undefined
		o[term] checkContinue(term)

def export('qjoin') async qjoin(nQueues, tasks) =
	var q = []
	for(i <- 0..nQueues) q[i] = []
	for(i <- 0..tasks.length)
		q[i % nQueues].push tasks[i]
	for(i <- 0..nQueues)
		q[i] = async =>
			for(j <- 0..queue.length)
				queue[j] ! ()
		where queue = q[i]
	join ! q;

-- function sleep: a wrap for global_.setTimeout
def export('sleep') sleep(dt, reaction) = global_.setTimeout({reaction()}, dt)



// Pattern match functions
-- function matcher: form a matcher function
def matcher(G) = 
    var fMatcher = (x) => undefined;
    def schemata = object MONAD_SCHEMATA_M, =>
        def @bindYield(extractor, thisp, gotcha, mismatch):
            mismatch()
            fMatcher = extractor.formMatch.call thisp, gotcha, fMatcher
    	
    G.build(schemata)()()
    return fMatcher

-- function match: form a matcher
def export('match') match(x, G) =
	matcher x when(not G), matcher(G) x otherwise

-- function extractor: form an extractor
def export('extractor') extractor(formFunc) =
	def f = formFunc {true}, {false}
	f.formMatch = formFunc
	f.be = f
	f

-- function Both: Both extractor, matches when all the branches matches
def export('Both') Both() = 
	extractor (got, miss) =>
		extractors.reduceRight ((total, extractor) => extractor.formMatch total, miss), got
	where extractors = arguments

-- function Either: Either extractor, matches when one of the branches matches
def export('Either') Either() = 
	extractor (got, miss) =>
		extractors.reduceRight ((total, extractor) => extractor.formMatch got, total), miss
	where extractors = arguments

-- function empty: detect whether x is falsy or empty Array
def export('empty') export('Empty') extractor Empty(got, miss)(x) = 
	got x  when(not x or (x is Array and not x.length)),
	miss x otherwise