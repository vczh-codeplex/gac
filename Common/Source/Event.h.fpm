$$include:Common.fpm

$$define $EVENT_DECLARATION($count) $$begin
$(/)***********************************************************************
vl::Event<$FUNCTION_TYPE($count,0)>
***********************************************************************$(/)
	template<$TYPENAME_LIST($count,0)>
	class Event<$FUNCTION_TYPE($count,0)> : public Object, private NotCopyable
	{
	protected:
		class EventHandlerImpl : public EventHandler
		{
		public:
			bool								attached;
			Func<$FUNCTION_TYPE($count,0)>		function;

			EventHandlerImpl(const Func<$FUNCTION_TYPE($count,0)>& _function)
				:attached(true)
				, function(_function)
			{
			}
$( )
			bool IsAttached()override
			{
				return attached;
			}
		};
$( )
		collections::SortedList<Ptr<EventHandlerImpl>>	handlers;
	public:
		Ptr<EventHandler> Add(const Func<$FUNCTION_TYPE($count,0)>& function)
		{
			Ptr<EventHandlerImpl> handler = new EventHandlerImpl(function);
			handlers.Add(handler);
			return handler;
		}
$( )
		template<typename C>
		Ptr<EventHandler> Add($FUNCTION_DECL($count,0,*function))
		{
			return Add(Func<$FUNCTION_TYPE($count,0)>(function));
		}
$( )
		template<typename C>
		Ptr<EventHandler> Add(C* sender, $FUNCTION_DECL($count,0,C::*function))
		{
			return Add(Func<$FUNCTION_TYPE($count,0)>(sender, function));
		}
$( )
		bool Remove(Ptr<EventHandler> handler)
		{
			Ptr<EventHandlerImpl> impl = handler.Cast<EventHandlerImpl>();
			if (!impl) return false;
			vint index = handlers.IndexOf(impl);
			if (index == -1) return false;
			impl->attached = false;
			handlers.RemoveAt(index);
			return true;
		}
$( )
		void operator()($PARAMETER_LIST($count))const
		{
			for(vint i = 0; i < handlers.Count(); i++)
			{
				handlers[i]->function($ARGUMENT_LIST($count));
			}
		}
	};
$$end

/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Framework::Event

Classes:
	Event<function-type>									：事件对象
	
本文件使用Vczh Functional Macro工具自动生成
***********************************************************************/

#ifndef VCZH_EVENT
#define VCZH_EVENT

#include "Function.h"
#include "Collections\List.h"

namespace vl
{
	template<typename T>
	class Event
	{
	};
$( )
	class EventHandler : public Object
	{
	public:
		virtual bool							IsAttached() = 0;
	};
$$define $EVENT_APPLY($count) $$begin
$( )
$EVENT_DECLARATION($count)
$( )
$$end
$loop($MAX_FUNCTION_NUMBER(),0,$EVENT_APPLY)
}

#endif