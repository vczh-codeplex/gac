#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n"L""
L"\r\n"L"class Node"
L"\r\n"L"{"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Literal:Node"
L"\r\n"L"{"
L"\r\n"L"\tenum Value"
L"\r\n"L"\t{"
L"\r\n"L"\t\tTrue,"
L"\r\n"L"\t\tFalse,"
L"\r\n"L"\t\tNull,"
L"\r\n"L"\t}"
L"\r\n"L""
L"\r\n"L"\tValue value;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class String:Node"
L"\r\n"L"{"
L"\r\n"L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Number:Node"
L"\r\n"L"{"
L"\r\n"L"\ttoken content;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Array:Node"
L"\r\n"L"{"
L"\r\n"L"\tNode[] items;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class ObjectField:Node"
L"\r\n"L"{"
L"\r\n"L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n"L"\tNode value;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Object:Node"
L"\r\n"L"{"
L"\r\n"L"\tObjectField[] fields;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n"L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n"L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n"L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token COMMA = \",\";"
L"\r\n"L"token COLON = \":\";"
L"\r\n"L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n"L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n"L""
L"\r\n"L"discardtoken SPACE = \"\\s+\";"
L"\r\n"L""
L"\r\n"L"rule Node JLiteral"
L"\r\n"L"\t= STRING:content as String"
L"\r\n"L"\t= NUMBER:content as Number"
L"\r\n"L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n"L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n"L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule ObjectField JField"
L"\r\n"L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Object JObject"
L"\r\n"L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Array JArray"
L"\r\n"L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Node JValue"
L"\r\n"L"\t= !JLiteral"
L"\r\n"L"\t= !JObject"
L"\r\n"L"\t= !JArray"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Node JRoot"
L"\r\n"L"\t= !JObject"
L"\r\n"L"\t= !JArray"
L"\r\n"L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4023; // 15032 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 951;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x9F\x71\x02\x80\x01\x7F\x05\x06\x83\x20\x0F\x30\x00\x36\x86\x00\x72\x00\x05\x82\x86\x02\x83\x29\x00\x74\x11\x80\x09\x30\x02\x36\x00\x67\x07\x94\x87\x89\x82\x83\x85\x86\x0F\x8D\x92\x83\x97\x06\x81\x21\x8C\x30\xCE\x00\x01\x30\x05\x34\x01\x32\x22\x86\x88\x8A\x80\x89\x97\x8C\x96\x06\xCB\x37\x80\x09\x38\x03\x3A\x88\x12\xE4\x39\x83\x85\x90\x03\x92\x87\x48\x93\x86\x8D\x92\x82\xA0\x9D\xA2\x47\xAA\x80\x0A\xA4\x82\x9D\xA7\xA7\x3E\xAB\x93\xA1\xA3\xA0\xAD\xA8\xAE\x23\xBB\xA6\x9D\x91\xAB\x90\x04\x83\x42\x10\xB5\x3E\x8B\xAB\x9B\x8D\xA2\x5D\xCC\xBC\x88\x9D\xB6\x83\xB6\x81\x71\x8D\xB3\xBF\x8A\xA4\x9A\x88\xBC\x69\xDF\xAC\xBA\xAE\xB0\xBA\xB8\xBA\x85\xF7\x8B\xA4\x9B\xB8\xA8\xC6\xBF\x8E\x82\xD0\xD6\xB7\xC3\xCA\xB4\xA7\x8B\xBF\x86\x96\x82\x82\x9B\xB8\x9B\x62\x43\x92\x99\xB7\x84\x05\xCB\x8F\x1A\xB8\xB8\x30\x90\xB1\xAA\x82\x00\x54\x80\x0D\xAF\x92\x8A\x88\x9A\xBC\xFF\x41\xF9\xCC\x2C\x88\x98\x9C\xDF\x50\xC1\xC1\xE4\x06\x82\x99\x86\xA5\x38\xCA\xFF\x64\xD0\x06\xD1\x9A\x00\xA9\xC7\xC7\x8A\xE4\xEF\x24\xEC\x00\x6A\x43\xA3\x30\x92\xE9\x82\x80\xEF\xA9\xE1\xF8\x83\xFA\x8E\x21\xE2\x9C\x0F\xDC\x9C\xF7\x80\x9A\x89\x8F\x8F\x21\xD2\xF9\xDB\xDB\x88\xE5\xA3\xA6\x1D\x71\x67\x77\x1C\xDB\x42\x76\x40\x71\x01\xAA\x66\x5F\x43\x4D\x76\x1B\x80\x00\x73\x51\x73\x7D\x69\x10\x97\x79\x77\x46\xB9\x63\x7D\x40\x6C\x43\x5C\x82\x75\x77\xDF\x6A\x70\x00\x7B\x00\x14\x76\x1B\x7B\x50\x4A\x54\x81\x79\x06\x68\x70\x7A\x78\x30\x6E\x7D\x44\x7C\x75\x4C\x72\x43\x47\x34\x76\x48\x4F\x48\xE6\x40\x0E\x8A\x88\x24\xB2\x83\x51\x7C\xBA\x46\x4E\x80\x4D\x0F\x51\x85\x83\x74\xF4\x5A\x46\x7C\x5D\x21\x59\x80\x44\x87\x38\x5C\x87\x6F\x03\x06\x64\x06\x40\x96\xB7\x5D\x9B\x92\x74\x5E\x83\x42\x76\x72\x61\x9F\x94\x99\x98\x63\x8A\x79\x02\x41\x54\x00\x02\x14\x00\x55\x00\x05\x10\x00\x56\x00\x0F\x48\x71\x71\xB3\x96\x8D\x7D\x15\xB8\x47\x6E\x00\x06\x4A\x06\x42\x7B\x77\x80\x08\x47\x9C\x75\x85\xA9\x9D\x91\x02\x67\x88\x90\x00\x04\xBB\x86\x43\x00\x06\x6B\x94\x85\x9C\xC4\x44\x79\xA0\x00\x78\xB2\x90\x03\x9E\x1F\x73\x5F\x43\x43\x80\x82\x4B\x9D\x6E\xDE\x71\x5A\x12\x8F\x00\x10\x1E\xA6\x4C\xA5\x80\x0C\x14\x00\x7B\x00\x04\xA6\x40\x4D\x7F\x5C\xAA\xAA\xA0\x44\x7E\x77\xA1\x00\x31\xA3\xAD\x1F\x9F\xA3\x63\x5A\x40\x2F\x6F\x9F\x9A\x77\xAE\xB3\x90\xAE\x41\xB3\x9B\x1C\xA0\x6E\x98\x48\xBE\x9B\xB5\x0B\x7E\xA6\xA2\xA7\xC2\x80\x0D\x15\x89\xD5\x93\xBB\x42\x77\x4D\x00\x05\xBB\x4B\x23\x6C\x04\xB6\x98\xC1\x4A\x6E\x76\xB6\x32\x63\x4A\x0C\x00\xBA\x9F\x8D\x70\x9C\xE6\x80\x01\x5F\x9C\x6F\x9F\x06\x42\xB4\xB3\xAD\x0E\xB4\x00\x3F\x32\xA5\x5F\x0A\x00\x28\x00\x02\x0B\x06\xCA\x58\xC1\x0A\x04\xC9\xC0\x02\xB4\x38\x73\x9F\xB6\xB4\x08\xC1\xC3\xC1\xC1\xB3\x8E\xC0\x00\xC4\x05\xD6\xA0\x02\xC8\xD4\x58\x4D\x9B\x9B\x49\x15\x70\x03\x11\x00\x1B\x06\x42\x08\x12\xD2\xBE\x16\xC1\xB3\xB0\xCF\xB4\x1F\x34\xD3\xC0\x03\xCC\x73\x77\xC9\xCF\x5C\x1D\xF4\xA0\x00\x0D\x00\x04\xB0\xC6\x0A\x00\x30\xC2\xA2\x40\x4B\xD2\x58\xAC\x7D\xAE\xAF\x4B\x43\x9C\xB7\x86\xC4\x80\xC2\x3D\x92\x7A\x96\x40\xBA\xAB\xA8\x82\x71\x1B\x4F\xA2\x06\x41\x5E\xC5\x72\x80\x72\x0F\x4C\xCF\x99\x43\x0D\x5A\x48\x46\x46\x86\x70\x4D\x02\x41\xCF\x25\x00\x08\x00\x5A\xBC\x00\x01\xD9\x09\x9A\x7F\xA2\x0F\xF4\xA4\xDC\xA6\xD9\x0A\x8F\xAE\x02\xE0\x5F\xE7\xDF\x80\xC3\x6F\xDC\x60\x4E\x6B\x02\x77\x20\x03\xDD\x7A\xFC\xD0\xD8\xDA\x00\x00\xED\xD7\xE0\x7D\xE1\xD0\x55\xD3\x96\xCA\xEF\xA0\xC3\x31\x00\x0A\x3E\x41\x95\xDC\xE7\xE7\x83\x80\xF3\xB7\xDE\x4C\x71\xA5\xBB\xBF\xB5\x77\xEE\xE3\x8B\x94\x60\xDC\x87\xDC\x4D\x04\xAF\xE5\x84\x6A\x0A\xB5\xD3\xDE\xA0\xA9\xC9\xE5\xE0\x54\xAD\xD3\xEB\xB7\xC9\x00\x29\xC2\x4C\xCB\xB5\xCA\xFA\x84\x5D\x02\xBA\xE6\x5D\xEF\xDB\x8E\x95\x70\x7E\x00\x02\xF0\x00\xF1\x7B\xEA\xE2\xE8\xF2\x00\x36\xE0\xCE\xF6\x4A\xB0\xCB\xEC\xA4\xCA\xC6\xFE\xDC\x54\x75\xF7\xD7\x51\x82\x68\x0A\xF5\xAF\xDD\x47\x90\x5A\x93\xDD\x3D\x0A\xF0\xCD\x9B\x12\x29\x7E\xF2\x44\x53\x78\x00\x05\x7C\x70\xEF\x6F\x21\xF2\x77\x60\x67\x50\x50\x2F\x21\xEA\x77\x79\xFB\x08\x8E\x73\x87\x31\x7E\x28\x84\x75\x7F\xDD\x77\x70\x01\xFC\x49\x4B\x28\xFC\x7E\x7E\xCA\x22\x50\x2B\x08\x84\x87\x7B\x06\x81\x7E\xFB\x15\x89\x73\xF2\x62\x86\x51\x50\x31\x51\xD2\x4A\x7C\x77\x09\x9D\x70\x73\x17\x93\x7C\x4C\x1A\x82\x68\xFC\x4F\x43\x7F\x00\x1D\x7C\x03\x80\x0E\x3D",
"\x47\x72\x86\x84\x81\x62\x21\xE8\x47\x7F\x20\x08\x08\x74\x82\x98\x6A\x6C\x44\x6D\x6E\x52\xC2\x00\x03\x6E\x02\x39\x6E\x0A\xD0\x8C\x74\xE5\x75\x6C\x3A\xAB\x55\x4F\xA3\x4A\x4B\x72\x31\xBA\x7B\x28\xA4\x61\x88\xEA\x61\x76\x8D\x0F\xB8\x23\x81\x00\x01\x07\x16\xB7\x8F\x40\xEF\x60\x79\x8C\x3F\x83\x28\x1C\xF2\x8B\x55\x1F\x70\x42\x23\x76\x89\x84\x1E\xE3\x8A\x8E\x17\xB7\x6C\x8F\x76\x5D\x3E\x5D\x45\x2F\x8A\xC1\x7C\x36\x73\x45\x3B\x73\x23\xFE\x3B\x60\x00\x35\x00\x00\x8C\x0B\x8F\xAA\x13\x9B\x91\x16\xA6\x7A\x67\x11\x92\x5B\xDD\x03\x97\x8C\x9C\x11\x7F\x6E\x9D\x76\x24\xF6\x75\x6C\x82\x98\x6A\x59\x82\xA4\x8E\x8E\xF2\x36\x79\x94\xF6\x77\x6C\x58\x77\x7F\x5B\x10\xDF\x51\x83\x1A\xB7\x6C\x93\xBF\x37\x88\x0A\xA9\x70\x98\xA2\x1E\x92\x84\xD2\x41\x96\xF2\x31\x9D\x4F\x59\x8A\x7D\x96\x04\x57\x81\x2B\x80\x0F\x95\x65\xB4\x49\x8F\xA6\x86\x90\x05\xAA\x93\x80\xE5\x7A\x93\x86\xBC\x94\x86\x2D\x89\x9D\x37\x4E\xA0\x8C\x88\x28\x44\x4B\xE6\x42\x44\x46\xA5\x0C\x63\x06\x2E\x82\x21\xEA\x6C\x99\x45\x63\xB7\x6E\x64\xD7\x4E\x7B\xCA\x4E\x97\x6E\x1C\x57\x39\x9B\x30\x73\x5C\x2C\xD7\x94\x91\x6C\xB6\x76\x83\xCD\x8B\x7C\xF6\x7E\x8B\x3D\x18\x69\x9D\x2E\x8D\x8A\x88\x41\xA5\x90\x01\xC3\x52\xA5\x8D\xCD\x92\x88\xDB\x30\x23\x4E\x2B\xBD\x42\x8B\xCC\x8A\x48\xE0\x77\x61\xA3\xF0\x45\x99\x92\x8E\x8A\x91\x30\xEF\x9E\x52\x79\xA6\xA2\xA5\xC6\x90\x8C\xCC\x49\x9A\x78\x51\xAC\x88\x9B\xFC\x9B\x9B\x38\xD3\x95\x9B\x0B\xA1\xA0\x84\xDA\x90\x99\x37\xB9\x92\x85\x70\x8A\xA2\x79\x27\xA0\x5E\x44\xC9\xA2\x92\x98\x85\x2C\x61\x32\x0D\xA6\x20\xE4\x90\x92\x7B\xB3\x84\xA6\x77\x76\xA7\x4F\x86\xAF\x98\xB0\x5C\x9B\x83\x22\x95\x9B\x28\x93\xA2\x97\x53\xBA\xA0\x7B\xB8\x83\x63\x2E\xB3\x87\xA9\x5F\x8E\xAD\x7B\x25\x07\x9C\x3D\xC4\x46\xA3\xF0\x73\xAD\x2E\x1A\xB0\x22\x46\x1D\xA5\x2F\x8F\x93\xAF\xAE\x4A\x23\xA4\x5C\xB9\x3D\x8F\x10\x7F\x8B\x64\x82\x6C\xA3\xED\x1A\x20\xAA\x00\x14\x12\x93\xAC\x49\x3F\x61\xB2\xA2\x68\x65\xA3\xA8\xB0\x39\xA7\x47\x8C\x75\x91\x9A\xBB\x7D\x83\x86\x62\xB6\xAF\x43\xCA\x26\xAC\xCD\x83\x4D\x2E\x68\xBE\x9A\x08\xC4\x5D\x97\x71\x8A\xB4\x44\x05\x89\x77\x6B\xB0\x24\xB3\x5A\x56\xB2\xB4\x9B\xA4\x49\x69\xA3\xB3\x9C\x56\xA1\xAC\xAD\xB8\xA7\xB4\x69\xDA\x96\xB5\x76\xA3\x99\xAD\xDF\x90\x64\x6B\xE2\x9B\xA0\xC3\x8D\xA2\x23\x84\xB1\xB3\x8B\x4F\xB8\xB0\x89\xB3\xB4\xB1\x00\x05\x75\xCA\x2E\xA5\xB0\xC9\x94\xBD\xB6\x33\x97\x82\x56\xE8\x99\xB7\xBA\x3B\xB5\xBC\x2A\x56\x7F\x6F\x83\xA8\xB3\xF3\x82\xBF\xB8\xAA\xA3\x8B\x72\xED\xA2\xBA\x20\x70\x27\x9C\x4C\xA9\xA5\x39\xAB\xA9\xBA\xA9\x84\x9F\xAD\x94\xB4\xA6\x78\xD6\x98\xA2\x20\xB4\x96\xAB\x3B\xAB\xBC\x81\xB8\xA6\xAC\xA1\xB7\x91\xBE\xE0\x80\xBA\x2F\xD4\xA4\x92\xFC\xAF\xAD\xAE\x9B\x8F\xAD\x5E\xD4\x8C\xAE\xA5\x3E\xAF\xBF\xFB\xB1\xA6\x17\xA5\x0D\x29\x55\x6B\x6A\xAF\xEB\x41\x7F\x89\xD4\x89\x8D\x12\x10\xB3\xC5\xB4\xBA\x98\x22\xC9\xA1\x91\xD4\x70\xC2\x23\x7B\x81\x7F\x75\x83\xB9\xB0\xE7\x8B\xB5\xBA\x3A\xDE\xC4\x89\x0C\x64\x69\xED\x93\xAB\xC7\xE0\xB7\xB7\xAA\x6D\xB4\xB8\xDE\x98\x7C\xA7\xE1\xBE\xB3\x92\xBC\xBE\xBC\xE3\xA9\xB4\xA8\xF2\xB2\xC2\x6B\xC2\xC0\x27\xE8\xBB\xC2\x64\xDD\xB3\xBB\x8F\xAC\xA6\xC8\xD9\x9C\xC8\xC7\xDA\x90\x66\x6D\xB5\xA6\x9A\x26\xF6\x75\xB8\x9C\xAA\xBF\x10\xA1\xB3\xCA\xF4\x99\xB6\xC9\x43\xAA\xAF\x0C\xF3\xB2\x83\xBB\x7B\xC5\xA4\x75\xCF\xBF\x3A\xBC\xB9\x8D\x79\x5C\xBC\xBC\xEF\xB0\x8C\x3E\xA8\x6A\x64\xE8\x5A\x9E\x9F\x3A\x50\xAF\x10\x82\xAB\xC1\x82\xB9\xA0\xA1\x40\x93\xC3\x8E\x98\xB5\xC5\x6B\x5B\xA2\x23\x58\x8A\xC7\x14\xB0\x2B\xC2\x8E\x9B\x35\x69\x20\xBE\xD0\x8A\x82\xB5\x6E\x2F\xE7\xC8\x00\x5C\x41\xCA\x77\xE3\xCA\xD4\x0E\xDB\x30\x72\x78\x67\xCB\xAB\xAC\xD1\xAE\xC1\x58\xB3\xD0\x76\xCD\xB2\xA1\xFF\xAC\xB6\x45\xC0\x04\x79\xFA\x8E\xD2\xED\x10\xD0\xA9\x80\x91\xCB\xAC\x05\xC0\xAB\x41\x8C\xCD\xCF\xFA\x87\xB0\xB3\x16\xC1\xC5\x51\x4E\x8B\xA8\x0D\xF5\xD0\x26\x8D\x71\x6E\x46\x3D\x47\x83\x54\xC9\xA8\x70\xD9\xD5\xA8\xAE\x99\xCA\xDB\x4A\xA1\xDB\x23\x1A\x2D\x6A\xE4\x14\x7F\xA5\x76\xE8\xDE\xD7\xBC\xBC\xD9\x70\xC6\xB5\xD4\xB7\x70\x22\xDC\x00\x34\x6E\x67\xA9\xD8\xB3\x7B\xD2\xA0\xB3\xEB\xC8\xD0\xBF\xD9\x7E\x71\x78\xC6\x23\xDE\xC4\xD6\xCE\xC1\xB7\xA6\xD2\x7D\xDB\xAD\x92\x37\xCC\xE0\xC0\xE4\xD3\xE1\xA9\x91\xDF\x8D\x4A\xB4\xE0\x45\x89\xEF\xE2\x77\xFF\xD8\xDE\x28\x91\x72\xF2\x29\x75\xE4\xC0",
"\x6E\xD3\xD6\x24\x51\x01\x8F\xB0\xE4\xD5\x6F\xFE\xD8\x6E\x28\xF8\xD5\xB9\xBA\xD4\xE6\x34\xEF\xE2\xCC\xB0\xB3\xE4\xD0\xB5\xEF\xDC\x89\x23\xDF\xE1\x2B\xF2\xD7\xD0\xE8\xCD\xD3\x8C\xF1\xD6\xC4\xA3\xD8\xB9\xC6\xC5\xE0\x27\xA6\x7B\xE6\xC6\x51\xED\x85\xD3\xD9\xED\x46\xA8\xDF\xD6\xE4\x38\xE6\xE8\x90\x90\xE8\xEB\xAF\xDA\x77\x89\x74\x8F\x50\xE8\x62\x7C\x89\x4A\x91\xAF\x74\x87\xCB\x84\xE6\x70\x80\x77\x7C\x73\x77\x4D\x66\xB3\x78\x95\x54\x7C\xB8\xE5\x56\x38\x78\xDA\x35\xC7\x1C\xAB\x7F\x6E\x6D\x8B\xD5\x79\x8D\xD9\xA6\xDE\xB9\x70\x26\xFA\x8D\x77\x49\xDC\x62\xF3\x12\x89\x86\xAB\xF3\x5B\x22\x80\xF4\xB2\xEF\x83\x72\x79\x82\x39\xDD\x84\xDA\x42\x93\x84\x00\xCD\x98\x88\xC9\xEC\xEC\xF2\x94\xAE\x83\xA8\x5A\xC8\x7A\xCD\xCF\x54\xF3\xF4\x7E\xF0\xA6\xC0\xA1\xF4\x98\x56\x3B\xF5\xA5\xE5\x05\x6C\x83\xF3\x7C\x05\xA9\xC8\x00\x30\x8F\x23\x11\xFD\xE7\x6E\xD7\xD0\x28\xF6\x3B\x92\xF4\xE8\xA2\x85\x89\x18\x83\x29\xF7\xE9\xD4\x91\x53\xED\xD4\xC8\xFF\xB5\xDD\xAA\x01\xC0\xBB\x78\xA5\xED\xC0\x04\xCF\xCA\xC1\xD0\xD4\xDB\x81\x82\x4F\xAB\xA2\x50\xC6\x66\xAC\xE8\xAB\x5B\x80\xDA\xE1\x7A\x80\xDF\xBD\xD5\xE3\xDB\x3C\xC5\xD6\xF1\x63\xF9\x99\xF1\x66\xAC\xD8\x40\xAE\x83\xA0\xEE\xDA\x9B\xF6\xD9\x4A\x69\xAF\x68\x59\xAD\x62\x74\xF6\x5A\x11\x60\x66\x6D\xD4\x5C\x30\x97\x45\x66\x4A\x77\x80\x95\x75\x59\x6C\x67\x59\x54\x6D\x64\x76\x6F\x7D\x73\x60\x5C\x81\x66\x5C\x55\x61\x67\x0F\x68\x65\x7B\x69\x7E\x7E\x6F\x6A\x25\x5B\x39\xC6\x7F\x10\x7B\x2E\x1C\x75\x1E\x27\x68\x23\x21\xD7\x74\x49\xFC\x1D\x6E\xB7\x16\x01\x3A\x1E\x82\x1B\x85\x4F\x3D\x2B\x69\xBC\x57\x1B\x18\x05\x83\xC1\x17\x4E\x25\x79\x82\x10\x10\x1D\x5D\x2A\x01\x3E\x8F\x0F\x3F\x70\x81\x20\x2D\x73\x5D\x2C\x01\x47\x8B\x75\x5F\x72\x84\xCF\x13\x14\xB7\x1E\x01\x47\x8C\x01\xA5\x2C\x1A\xFF\x07\x1B\x23\x15\x26\x5E\x8F\x85\x3A\x19\x16\x7B\x21\x2B\x65\x21\x2B\x7B\x27\x1B\x0D\x28\x53\x7B\x23\x7A\x64\x48\x76\x84\x70\x15\x65\x23\x1C\x5C\x4F\x28\xB7\x16\x82\x73\x89\x1C\x89\x16\x10\x64\x81\x26\x66\x81\x26\x69\x86\x69\x4D\x1D\x7C\xC2\x73\x14\x76\x89\x76\x70\x81\x26\x72\x86\x88\x0F\x15\x87\x6E\x8D\x7B\x9E\x14\x1D\x7B\x8E\x25\x7D\x8E\x25\x7F\x84\x51\x42\x84\x42\x0F\x15\x88\x6F\x8B\x88\x88\x87\x20\x77\x8C\x89\x5C\x3D\x88\x6D\x7E\x25\x5A\x81\x6A\x91\x8D\x25\xB1\x2D\x85\xC7\x27\x3B\x1B\x2C\x78\x1A\x1C\x88\x12\x57\x82\x5E\x84\x1D\x7F\x7F\x1D\xDA\x10\x8B\xBC\x7D\x76\x5A\x85\x57\xA7\x8F\x27\x06\x1A\x8A\x02\x12\x25\xAD\x85\x3D\x30\x18\x8B\x93\x7C\x42\x65\x25\x32\x7C\x27\x1F\x20\x1D\x25\x9A\x8E\x88\x9E\x13\x12\x55\x30\x86\x9E\x13\x89\x5D\x23\x12\x2E\x32\x10\xB1\x24\x1D\xD9\x8E\x85\xCF\x8D\x76\xD3\x80\x86\x40\x88\x53\xD4\x85\x8E\x61\x87\x8E\xC1\x86\x8E\x07\x15\x35\xFF\x0B\x8D\x61\x23\x12\x15\x0A\x87\xC6\x22\x10\xF1\x8F\x85\xE3\x86\x69\xC0\x83\x2D\x00\x8D\x25\x72\x5C\x5B\xED\x86\x10\x4D\x1C\x85\x06\x16\x8A\xF3\x82\x4C\xF6\x82\x38\x25\x77\x8A\x00\x2E\x7D\xFC\x8A\x5F\x55\x5F\x8F\x4F\x3E\x25\x8D\x1A\x8D\x05\x9A\x2B\xC9\x88\x90\x38\x5A\x90\x06\x12\x54\xB7\x11\x7D\x9D\x4A\x8E\x68\x29\x16\x4D\x32\x32\xD4\x8A\x85\x3D\x26\x91\xEA\x8A\x85\x23\x1D\x34\x65\x29\x8F\xB7\x19\x83\x03\x8B\x83\x05\x97\x83\x44\x20\x91\x07\x11\x2B\x3D\x22\x90\x02\x1A\x6F\xE1\x8E\x25\x30\x9C\x84\x98\x5D\x91\xF8\x66\x67\xD4\x1A\x6F\x17\x97\x70\xBC\x57\x8A\x26\x28\x67\xB7\x19\x84\x87\x56\x93\x39\x9F\x8B\x06\x18\x6B\x3D\x9D\x25\x3F\x9B\x74\xED\x74\x24\x42\x98\x94\x44\x93\x95\xE2\x83\x94\xEF\x5A\x94\x06\x10\x67\x44\x24\x20\x4D\x96\x80\x87\x50\x92\x29\x92\x86\xF2\x8F\x85\x7B\x29\x2B\x5F\x9D\x6D\xED\x6D\x14\xDD\x87\x94\x22\x72\x4B\x67\x80\x90\x46\x2A\x86\x6C\x27\x79\x84\x82\x8A\x94\x71\x87\x9E\x8A\x88\xCE\x80\x98\x2C\x4A\x85\x4D\x1D\x8B\x06\x1F\x96\xE1\x26\x97\xEC\x65\x55\x74\x91\x97\x77\x9D\x4C\x79\x91\x91\x9F\x70\x88\x83\x2F\x20\x32\x4F\x8D\x81\x9D\x89\x02\x12\x8B\xC6\x87\x7A\x87\x99\x16\x90\x80\x86\x8C\x91\x8A\x07\x92\x97\x90\x96\x10\x75\x91\x26\xF7\x86\x89\x7E\x8B\x97\x96\x67\x89\x0F\x49\x44\xB9\x8D\x99\x5E\x29\x88\x9B\x85\x98\xB1\x8F\x89\x9E\x19\x1B\xB8\x65\x86\x7A\x98\x9A\xB3\x8E\x90\x30\x8C\x9A\x92\x97\x71\x9E\x12\x32\xA1\x62\x9C\x96\x98\x92\x5E\x2E\x91\xC1\x41\x99\xA9\x93\x99\x4A\x28\x8E\x07\x14\x90\x6E\x93\x9C\xB6\x9E\x98\x14\x6D\x49\xD4\x95\x9C\x17\x58\x53\xF9\x82\x8C\x7C\x75\x25\xC5\x81\x2E",
"\xC7\x88\x39\x76\x95\x8B\x17\x22\x11\xA1\x92\x8B\xBB\x8D\x96\x5E\x87\x9A\xDD\x9E\x9A\xC6\x90\x9E\xC8\x95\x9D\x17\x75\x9E\x06\x1B\x78\xC4\x8F\x8A\xEA\x92\x9A\xEC\x98\x9F\x02\x1F\x78\xDB\x3D\x8C\xF1\x9E\x9B\xD1\x86\x10\x75\x5D\x92\x60\x81\x83\x55\x5B\x95\x2F\x8D\x49\x36\x96\x93\xB1\x6A\x93\x00\x0E\x2F\x02\x15\x95\x68\x8E\x12\x6F\x54\xA1\x8F\x95\x61\x06\x1C\xA1\xE2\x95\xA1\xC1\x4E\xA1\xB1\x92\x51\x19\x76\x93\x95\x9E\x34\x2D\x33\x29\x11\xA0\xA2\x32\x83\x93\xDF\x91\x4C\xDC\x89\x9C\x37\xA6\x4C\x2A\xA1\x9D\x18\x96\x69\x6A\x91\xA4\x5A\x8A\x2B\x32\x70\x92\x26\x96\x10\x46\x91\xA4\xB7\x13\xA4\x06\x15\xA4\x42\xA9\x16\x75\x53\x36\x5F\x81\x2B\x4D\x11\x9C\x9E\x9F\x80\x87\x59\x8F\xA0\x26\x17\x91\x62\xA2\x59\x95\x17\x4B\xAC\x96\x14\x9B\x9D\x96\x9D\x9C\x06\xA8\xA2\xC6\x41\x9E\xDE\x91\x84\x2B\xA7\x99\xB0\x92\x10\x6C\x8F\x97\xBD\x94\x98\x82\x9F\x99\x0C\xA3\xA0\xF2\x99\x87\x63\xA5\x9F\xDC\x96\xA6\x3E\xAA\x9A\xC7\x92\x10\xAD\x9F\xA7\xD6\x93\x14\x2F\xA5\x89\xB2\x41\x88\x9A\x92\xA7\xB7\x98\x8C\x57\xA0\x9A\x78\xAE\x9B\x5A\x85\x9A\x64\xA3\x2D\x7E\xAD\x90\x80\xAA\x9F\x82\xAA\xA3\x6C\xA4\x89\xB2\x9F\xA6\x23\x45\x9B\x9C\x9E\xA8\xB9\x93\x98\xBB\x9B\xA0\x84\x9A\x85\xC0\x90\x86\x54\xA3\x90\x3A\xA9\x54\x6A\xA7\xA6\xCA\x9A\x85\xCC\x9C\xAA\x7D\xAF\xAA\x6F\x51\xAB\x84\xA7\x71\x5A\x83\x92\x6A\x95\x8A\xF4\x95\x26\xF6\x97\xA9\x5E\xA0\xAB\xFB\x97\xA2\xFD\x97\xA5\x00\xAD\x21\xE9\x94\x9C\xEB\x9F\x20\xED\x9F\x3B\xB6\x8B\x11\xA8\xAB\x9B\xF3\x9B\xA7\xC2\xA7\xAB\xFC\x9B\xA3\xFF\x17\xAC\x6B\xA4\x9E\xCA\xA8\x3B\x01\xAC\x9B\x8D\xA5\xA0\x84\xA8\xA0\xCC\x81\x12\xD5\xA0\x8D\x6B\x98\x9D\x13\x0A\xA4\xF0\xA8\x9D\xFF\x01\xA5\xB6\xA6\x99\x49\xA5\xAA\xD6\x5F\x6A\x5A\xA6\x10\xFA\x78\xA9\xFB\x65\x4F\x0D\xA2\x10\x14\x00\x86\x2E\x95\x90\x3B\x67\x96\xF9\xAC\x84\x17\xA1\x2B\x19\xA2\x95\x02\x16\xA2\x3D\xA1\x72\x07\xBB\x8A\x61\x6A\x84\x25\xA0\x86\x4E\x94\x5D\x11\xBF\xA1\x2C\xA9\x75\x2E\xAF\x8E\xC7\xA1\xB1\x4B\x88\x95\x08\xB8\xA5\xD4\x59\xA3\x5F\x89\xB1\x3F\x6B\xB1\x36\xA5\x72\xF1\xA2\xAF\xB8\x65\x8F\x2F\xB3\xB3\x61\xAA\x13\x63\x86\x9A\xDC\x92\xB3\xDE\x9C\x69\xDE\xA2\xAB\x64\x54\x99\x6D\xAB\x8F\x6B\x8E\x97\x38\x13\xAA\xE6\xAD\x25\xBA\x9C\xAE\xCE\xA4\xA0\x0F\x28\x98\xC1\xA1\x26\xF6\x9A\xB3\x3E\xBC\xB3\x9B\xAB\xAD\x9D\xAD\x25\x88\xAD\x4C\x8A\xA6\x44\x8C\xAF\xAC\x74\x8F\xA8\x77\xAB\xB4\x79\xAA\x13\x94\xAC\xA7\x96\x92\xB5\xBB\xAF\xA5\x4A\x1A\xAB\xFE\xA7\x71\x87\xAF\xA9\x78\x97\x2F\x98\x86\x9B\x5E\xB7\x88\xF8\xAC\xB4\x5F\xB2\xB6\x92\xA9\x16\xAB\xA3\xA5\x39\xBA\xA3\x54\xB1\xA3\x56\xB4\x8E\xB4\xAE\xAA\x7E\xB7\xB6\x80\xBC\x5B\x6C\xBE\xA5\x2E\xB3\x10\x69\x1A\x9D\x66\xB3\x2D\x68\xBD\xB6\x6A\xB3\x2D\x83\xA4\xB9\x25\x7E\x9F\x02\x1B\xAC\xE8\x92\xA0\x7A\xB4\xA7\x67\xAE\x9E\x0A\x2B\xAE\xBA\x80\xA5\x4F\xBE\x25\x51\xB9\xB8\x76\x6B\xB8\x2D\xB0\xAE\x77\xBC\xB9\x7C\x74\xBA\xB8\x9E\xAF\xE8\xA0\x25\xE4\xA5\xB7\x0F\x1A\x85\xB7\x17\x01\x34\xB6\x8E\x85\xB2\x10\xC4\xA5\x92\x69\x17\x1B\x19\x0D\xBB\x4F\xAA\x13\xF4\xAF\x85\x23\x1B\xAF\x37\x2C\xA5\x54\x86\xA3\x98\x5A\xBB\x3D\xB6\xBC\x8E\xB6\xB3\xA7\xBD\x25\x55\x3C\xBA\x15\x1F\xA3\xA0\xAC\xB1\x6E\xA1\xB7\x70\xA4\xB4\x74\xB8\xB7\x76\xB8\xB4\xA6\xAA\xB4\xE3\xB3\xB6\x7A\x18\xAD\x61\x29\xBD\xD3\xB8\xB9\x7C\x9E\xA9\x02\x1B\x8F\x5B\xBE\x7C\x45\xB6\x98\x47\xB5\xB2\x90\xAF\xB9\xD6\xA4\x9A\xD7\xB7\x1B\xEE\xB5\xB5\xC8\xAF\xB3\x4A\x2F\xB6\xF3\xB1\xBF\xA1\xAB\x7A\x46\xB0\xAD\x60\xB0\xBA\xFC\xBE\x88\xAA\xAE\x95\xCA\xBC\x9D\x97\xBC\xB8\x84\xB9\x16\xB5\xA3\xC1\x96\x95\xC1\xAD\xB0\xA4\xD5\xB3\x10\x90\xB5\x26\x01\xC2\xB8\x03\xC9\xB9\xE1\xA3\x8C\xCC\xAE\xB9\xE9\xB1\xB6\xFE\xA2\xBA\xB7\x81\xA9\xA9\xA6\xBA\xEC\xBE\x25\x23\xCC\xC1\xDB\xB3\x9E\xF8\x87\xC2\xE7\x91\xBB\x30\xC7\xAA\x67\xA5\xBB\xDC\x32\xBB\xA3\x9A\x13\xB7\x1D\x01\xD4\xBE\x85\x11\xC2\x10\x56\xAF\xAB\xC3\xB7\xB1\x47\xC1\x92\x3A\x1D\xB7\x5E\x83\x12\x4D\x16\xA2\x65\x20\x85\x28\x6B\x9C\x86\xB3\xC5\xDC\x96\xC5\x6D\xAE\x75\x59\xCF\xC4\x62\xCD\x25",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void JsonLiteral::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonString::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonNumber::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonArray::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObjectField::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObject::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::json;

			IMPL_TYPE_INFO_RENAME(JsonNode, system::JsonNode)
			IMPL_TYPE_INFO_RENAME(JsonLiteral, system::JsonLiteral)
			IMPL_TYPE_INFO_RENAME(JsonLiteral::JsonValue, system::JsonLiteral::JsonValue)
			IMPL_TYPE_INFO_RENAME(JsonString, system::JsonString)
			IMPL_TYPE_INFO_RENAME(JsonNumber, system::JsonNumber)
			IMPL_TYPE_INFO_RENAME(JsonArray, system::JsonArray)
			IMPL_TYPE_INFO_RENAME(JsonObjectField, system::JsonObjectField)
			IMPL_TYPE_INFO_RENAME(JsonObject, system::JsonObject)
			IMPL_TYPE_INFO_RENAME(JsonNode::IVisitor, system::JsonNode::IVisitor)

			BEGIN_CLASS_MEMBER(JsonNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(JsonNode)

			BEGIN_CLASS_MEMBER(JsonLiteral)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonLiteral>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonLiteral)

			BEGIN_ENUM_ITEM(JsonLiteral::JsonValue)
				ENUM_ITEM_NAMESPACE(JsonLiteral::JsonValue)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Null)
			END_ENUM_ITEM(JsonLiteral::JsonValue)

			BEGIN_CLASS_MEMBER(JsonString)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonString>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonString::*)(), [](JsonString* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonString::*)(const vl::WString&), [](JsonString* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonString)

			BEGIN_CLASS_MEMBER(JsonNumber)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonNumber>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonNumber::*)(), [](JsonNumber* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonNumber::*)(const vl::WString&), [](JsonNumber* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonNumber)

			BEGIN_CLASS_MEMBER(JsonArray)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonArray>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(JsonArray)

			BEGIN_CLASS_MEMBER(JsonObjectField)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObjectField>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(JsonObjectField::*)(), [](JsonObjectField* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(JsonObjectField::*)(const vl::WString&), [](JsonObjectField* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonObjectField)

			BEGIN_CLASS_MEMBER(JsonObject)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObject>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(fields)
			END_CLASS_MEMBER(JsonObject)

			BEGIN_CLASS_MEMBER(JsonNode::IVisitor)
				CLASS_MEMBER_BASE(vl::reflection::IDescriptable)
				CLASS_MEMBER_EXTERNALCTOR(Ptr<JsonNode::IVisitor>(Ptr<IValueInterfaceProxy>), {L"proxy"}, &interface_proxy::JsonNode_IVisitor::Create)

				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonString* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonNumber* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonArray* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObjectField* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObject* node))
			END_CLASS_MEMBER(JsonNode)

			class JsonTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::json::JsonNode)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral::JsonValue)
					ADD_TYPE_INFO(vl::parsing::json::JsonString)
					ADD_TYPE_INFO(vl::parsing::json::JsonNumber)
					ADD_TYPE_INFO(vl::parsing::json::JsonArray)
					ADD_TYPE_INFO(vl::parsing::json::JsonObjectField)
					ADD_TYPE_INFO(vl::parsing::json::JsonObject)
					ADD_TYPE_INFO(vl::parsing::json::JsonNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool JsonLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new JsonTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
