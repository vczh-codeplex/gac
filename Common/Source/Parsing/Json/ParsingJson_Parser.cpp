#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n"L""
L"\r\n"L"class Node"
L"\r\n"L"{"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Literal:Node"
L"\r\n"L"{"
L"\r\n"L"\tenum Value"
L"\r\n"L"\t{"
L"\r\n"L"\t\tTrue,"
L"\r\n"L"\t\tFalse,"
L"\r\n"L"\t\tNull,"
L"\r\n"L"\t}"
L"\r\n"L""
L"\r\n"L"\tValue value;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class String:Node"
L"\r\n"L"{"
L"\r\n"L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Number:Node"
L"\r\n"L"{"
L"\r\n"L"\ttoken content;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Array:Node"
L"\r\n"L"{"
L"\r\n"L"\tNode[] items;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class ObjectField:Node"
L"\r\n"L"{"
L"\r\n"L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n"L"\tNode value;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"class Object:Node"
L"\r\n"L"{"
L"\r\n"L"\tObjectField[] fields;"
L"\r\n"L"}"
L"\r\n"L""
L"\r\n"L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n"L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n"L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n"L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n"L"token COMMA = \",\";"
L"\r\n"L"token COLON = \":\";"
L"\r\n"L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n"L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n"L""
L"\r\n"L"discardtoken SPACE = \"\\s+\";"
L"\r\n"L""
L"\r\n"L"rule Node JLiteral"
L"\r\n"L"\t= STRING:content as String"
L"\r\n"L"\t= NUMBER:content as Number"
L"\r\n"L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n"L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n"L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule ObjectField JField"
L"\r\n"L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Object JObject"
L"\r\n"L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Array JArray"
L"\r\n"L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Node JValue"
L"\r\n"L"\t= !JLiteral"
L"\r\n"L"\t= !JObject"
L"\r\n"L"\t= !JArray"
L"\r\n"L"\t;"
L"\r\n"L""
L"\r\n"L"rule Node JRoot"
L"\r\n"L"\t= !JObject"
L"\r\n"L"\t= !JArray"
L"\r\n"L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4032; // 15032 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 960;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x9F\x71\x02\x80\x01\x7F\x05\x06\x83\x20\x0F\x30\x00\x36\x86\x00\x72\x00\x05\x82\x86\x02\x83\x29\x00\x74\x11\x80\x09\x30\x02\x36\x00\x67\x07\x94\x87\x89\x82\x83\x85\x86\x0F\x8D\x92\x83\x97\x06\x81\x21\x8C\x30\xCE\x00\x01\x30\x05\x34\x01\x32\x22\x86\x88\x8A\x80\x89\x97\x8C\x96\x06\xCB\x37\x80\x09\x38\x03\x3A\x88\x12\xE4\x39\x83\x85\x90\x03\x92\x87\x48\x93\x86\x8D\x92\x82\xA0\x9D\xA2\x47\xAA\x80\x0A\xA4\x82\x9D\xA7\xA7\x3E\xAB\x93\xA1\xA3\xA0\xAD\xA8\xAE\x23\xBB\xA6\x9D\x91\xAB\x90\x04\x83\x42\x10\xB5\x3E\x8B\xAB\x9B\x8D\xA2\x5D\xCC\xBC\x88\x9D\xB6\x83\xB6\x81\x71\x8D\xB3\xBF\x8A\xA4\x9A\x88\xBC\x69\xDF\xAC\xBA\xAE\xB0\xBA\xB8\xBA\x85\xF7\x8B\xA4\x9B\xB8\xA8\xC6\xBF\x8E\x82\xD0\xD6\xB7\xC3\xCA\xB4\xA7\x8B\xBF\x86\x96\x82\x82\x9B\xB8\x9B\x62\x43\x92\x99\xB7\x84\x05\xCB\x8F\x1A\xB8\xB8\x30\x90\xB1\xAA\x82\x00\x54\x80\x0D\xAF\x92\x8A\x88\x9A\xBC\xFF\x41\xF9\xCC\x2C\x88\x98\x9C\xDF\x50\xC1\xC1\xE4\x06\x82\x99\x86\xA5\x38\xCA\xFF\x64\xD0\x06\xD1\x9A\x00\xA9\xC7\xC7\x8A\xE4\xEF\x24\xEC\x00\x6A\x43\xA3\x30\x92\xE9\x82\x80\xEF\xA9\xE1\xF8\x83\xFA\x8E\x21\xE2\x9C\x0F\xDC\x9C\xF7\x80\x9A\x89\x8F\x8F\x21\xD2\xF9\xDB\xDB\x88\xE5\xA3\xA6\x1D\x71\x67\x77\x1C\xDB\x42\x76\x40\x71\x01\xAA\x66\x5F\x43\x4D\x76\x1B\x80\x00\x73\x51\x73\x7D\x69\x10\x97\x79\x77\x46\xB9\x63\x7D\x40\x6C\x43\x5C\x82\x75\x77\xDF\x6A\x70\x00\x7B\x00\x14\x76\x1B\x7B\x50\x4A\x54\x81\x79\x06\x68\x70\x7A\x78\x30\x6E\x7D\x44\x7C\x75\x4C\x72\x43\x47\x34\x76\x48\x4F\x48\xE6\x40\x0E\x8A\x88\x24\xB2\x83\x51\x7C\xBA\x46\x4E\x80\x4D\x0F\x51\x85\x83\x74\xF4\x5A\x46\x7C\x5D\x21\x59\x80\x44\x87\x38\x5C\x87\x6F\x03\x06\x64\x06\x40\x96\xB7\x5D\x9B\x92\x74\x5E\x83\x42\x76\x72\x61\x9F\x94\x99\x98\x63\x8A\x79\x02\x41\x54\x00\x02\x14\x00\x55\x00\x05\x10\x00\x56\x00\x0F\x48\x71\x71\xB3\x96\x8D\x7D\x15\xB8\x47\x6E\x00\x06\x4A\x06\x42\x7B\x77\x80\x08\x47\x9C\x75\x85\xA9\x9D\x91\x02\x67\x88\x90\x00\x04\xBB\x86\x43\x00\x06\x6B\x94\x85\x9C\xC4\x44\x79\xA0\x00\x78\xB2\x90\x03\x9E\x1F\x73\x5F\x43\x43\x80\x82\x4B\x9D\x6E\xDE\x71\x5A\x12\x8F\x00\x10\x1E\xA6\x4C\xA5\x80\x0C\x14\x00\x7B\x00\x04\xA6\x40\x4D\x7F\x5C\xAA\xAA\xA0\x44\x7E\x77\xA1\x00\x31\xA3\xAD\x1F\x9F\xA3\x63\x5A\x40\x2F\x6F\x9F\x9A\x77\xAE\xB3\x90\xAE\x41\xB3\x9B\x1C\xA0\x6E\x98\x48\xBE\x9B\xB5\x0B\x7E\xA6\xA2\xA7\xC2\x80\x0D\x15\x89\xD5\x93\xBB\x42\x77\x4D\x00\x05\xBB\x4B\x23\x6C\x04\xB6\x98\xC1\x4A\x6E\x76\xB6\x32\x63\x4A\x0C\x00\xBA\x9F\x8D\x70\x9C\xE6\x80\x01\x5F\x9C\x6F\x9F\x06\x42\xB4\xB3\xAD\x0E\xB4\x00\x3F\x32\xA5\x5F\x0A\x00\x28\x00\x02\x0B\x06\xCA\x58\xC1\x0A\x04\xC9\xC0\x02\xB4\x38\x73\x9F\xB6\xB4\x08\xC1\xC3\xC1\xC1\xB3\x8E\xC0\x00\xC4\x05\xD6\xA0\x02\xC8\xD4\x58\x4D\x9B\x9B\x49\x15\x70\x03\x11\x00\x1B\x06\x42\x08\x12\xD2\xBE\x16\xC1\xB3\xB0\xCF\xB4\x1F\x34\xD3\xC0\x03\xCC\x73\x77\xC9\xCF\x5C\x1D\xF4\xA0\x00\x0D\x00\x04\xB0\xC6\x0A\x00\x30\xC2\xA2\x40\x4B\xD2\x58\xAC\x7D\xAE\xAF\x4B\x43\x9C\xB7\x86\xC4\x80\xC2\x3D\x92\x7A\x95\x45\x06\x6B\xAC\x6F\x46\xBF\x40\x00\x05\xD7\x76\xBD\x76\x5D\x51\x0C\xEF\x9D\x41\x43\x1A\x58\x4A\x46\x61\x30\x7D\x8F\x31\x09\x20\x00\x0A\x94\x0F\x00\x1E\xD6\xD9\xD8\x3E\x20\xB2\x42\xDE\xBD\x67\xD0\x02\x6B\x7F\xE5\xD1\xE1\xD8\x0C\xEE\xDC\x64\x4C\x4D\xF7\x20\x01\xDD\x78\xC0\xE0\xD8\x51\x00\x3D\xD4\x76\xE4\xFE\x74\xB4\xDB\xD7\x99\xCC\xC1\x0E\xA7\x02\x51\xE6\xE3\xE4\x45\x7D\xD3\xBD\xDD\x30\xD2\xB0\xCF\xDC\x75\xD2\xB5\xDF\xAA\x75\x8F\xAA\x91\xDD\xA7\xC5\x72\x82\x4D\x04\xB5\xD5\xAC\xEA\x00\x2A\xB0\xCF\xEB\x74\x8F\x83\xEC\x00\xB5\xC9\x88\x4C\xEE\x8F\xC5\xD9\xF3\xB7\xBC\xDF\xBF\xEE\x5D\xB9\xE3\xE9\xE7\xE5\xD2\xC2\xEA\xAC\xE6\x82\xCC\xC2\x0C\xE8\x00\x22\xEC\xE6\xE0\xA6\xC9\xF9\xE9\xD2\xC9\xEE\xE9\xDD\xF0\xB2\xC3\x54\xED\xF2\xC6\xC3\x89\xF3\xEE\xE4\xFE\xE9\xF0\xEC\xC2\xEA\xF4\xF0\xFB\xC6\x6E\xF5\xDC\xB1\x75\xCC\xF4\xFA\xF3\xC9\x74\x25\xF4\x5F\x71\x6D\xB9\x57\x7C\x53\xB6\x6A\x43\xA3\x4D\x6B\x54\x04\x79\x78\x39\x0F\x3E\x70\x00\x7A\x16\x20\xD1\x4E\x82\x40\x10\x95\x73\xFD\x75\x66\x65\x6B\x69\x62\x26\x2C\x6B\x7D\xDD\x1A\x44\x2E\x01\x5C\x45\x6E\x02\x89\x7A\xE2\x4F\x48\x3E\x00\x33\x6D\x01\x00\x02\x52\x05\x89\x8A\x3B\x47\x61\x7D\x6E\x32\x31\x4D\xB9\x7B\x57\x5A\x11\xA3\x43\x4A\xF9\x67\x84\xF4\x49\x76\x3A",
"\xD4\x0A\x47\x85\x31\x9D\x7B\xF9\x17\x8A\x80\xA8\x37\x84\x7C\x4E\x5D\x4C\xF9\x28\x80\x53\xE4\x4C\x8D\x86\x50\x2C\x76\x51\x09\x88\x0D\xF7\x49\x7F\x48\x50\x23\x79\x0F\x62\x70\x01\x36\x52\x22\x49\xCF\x64\x58\x0C\xB2\x8B\x88\x1A\x93\x77\x21\x4F\x90\x65\xA8\x50\x2F\x21\xE7\x69\x85\x6E\x57\x8F\x8E\x0B\xF4\x6B\x8B\x04\x5D\x8A\x77\x5F\x95\x7C\x4E\x75\x63\x8C\xDE\x56\x3B\x54\x53\x8A\x7B\x1A\xCA\x8D\x80\x37\x99\x81\x8E\x00\x0E\x50\x54\x11\x59\x91\x3B\x88\x85\x7D\x19\x9A\x8B\x51\x7E\x8E\x8B\xBA\x60\x89\x49\xF6\x65\x90\xF9\x6E\x3F\x50\x4A\xA9\x8B\x5D\xE7\x7F\x44\x8C\x1A\x22\x65\x55\x6A\x93\x3D\x30\x32\x81\xCA\x21\x79\x95\x10\x6B\x92\x83\xB5\x70\x65\xAD\x2B\x7C\x8E\xF3\x6B\x52\x48\x34\x4A\x2A\x0F\xA7\x43\x47\x14\x55\x88\x90\xBC\x72\x7C\xF0\x40\x96\x99\x61\xA8\x44\x48\xD1\x7C\x7F\xC0\x3C\x74\x58\x3B\x87\x9C\x55\xE9\x37\x94\xF5\x04\x84\x72\x07\x1B\x73\x6F\x94\x69\x6C\x44\x6C\x6E\x52\xC2\x00\x21\x4B\x8C\x95\x78\xDF\x49\x73\x6F\xA6\x2B\x52\x6D\x10\x3A\x21\x6E\x6F\x93\x9D\x58\x80\x07\x73\x25\x15\x83\xF9\x70\x94\x9D\x27\xA1\x05\x96\xD9\x90\x96\x46\x48\x8C\x8C\x7A\xAB\x68\x26\xFE\x87\x7C\x37\xC5\x23\x6E\xEA\x71\x71\x8C\x43\x27\x83\x43\xA0\x98\x26\x09\xA3\x8C\x96\xF4\x69\x7C\x4E\x09\xAD\x90\x4C\x8F\x44\xA0\xE9\x93\xA2\x14\x9C\xA8\x9B\x17\x42\xA3\x8F\x8B\x82\x76\x48\xCA\x44\xA5\x85\xBB\x8F\x80\x79\x99\x83\xD8\x05\x71\xA7\x07\x62\x9F\xA0\x1A\x33\x4E\x39\xB0\x82\x21\xBB\x6D\x8E\xA3\x36\x8C\x9D\x09\x73\x95\xA4\x20\x70\x25\x95\x45\xB7\x94\xC3\x33\x00\x01\x59\xA9\x9F\x95\x3F\x9A\x20\x24\xBB\x95\x7D\xF9\x40\x04\x99\x44\x4E\x99\x31\xD0\x9D\x93\xF8\x49\x97\x97\xCF\x95\x2E\x56\xC3\x45\x2F\x68\x8B\x7C\x8C\xD5\x81\x83\x35\xD0\xA4\x45\x86\xA4\x68\xAB\x75\x27\x80\x5C\xCA\x22\x83\x79\x58\xA7\xAA\x61\xAA\x2B\x13\x9D\x88\x64\x95\x61\x83\x83\x74\x39\x47\x50\x5A\x80\x67\x79\x4F\x79\xA3\x10\xA3\x90\x60\x9F\x92\x8A\x2A\x91\x7C\xAD\x31\x59\xAF\xB4\x06\xA1\x9E\x00\x3C\xA3\x9F\xF5\x9A\x23\x4D\x95\xBA\xA7\xBA\x0D\x6E\xA7\x94\xBD\x9E\x50\xDB\x90\x9D\xA2\x07\x86\xA5\x0C\x75\x04\x00\x0C\x1A\x9E\xEC\x6B\x99\x97\x3A\x6F\x7A\x2F\xE8\x79\xB1\xE4\x45\x79\x7F\xC8\x75\x6F\xDC\x70\x70\x66\x65\xA7\x7B\xA5\xF6\x77\xB7\xED\x57\x92\x9A\xFF\x76\x65\x92\xD7\x8E\xA5\x4A\x8A\xA5\xB4\x5C\xA4\x8A\x75\x55\xA0\x78\x70\x8A\xB2\xB9\xA1\x08\x7A\x8B\xBC\xBD\x77\x57\xB4\xB4\xA2\xDB\xB8\x7B\xB8\x66\xBD\x7C\x19\x80\x8E\xB1\xE4\x6E\xA6\xA1\x82\x80\x02\x37\x85\x73\xBB\x85\x57\x58\xA7\xE5\x95\x2D\x8F\x20\xBC\xBB\x91\xA3\xB7\xAD\x92\xB2\xAE\x64\xCB\xA7\x7F\xBB\xB3\xAE\xB9\x1C\x85\x8E\x07\xFE\xAE\xBB\xBA\x78\x47\x3A\x8A\xA5\xB3\x76\xED\xBE\x86\xC6\x83\x7E\x92\x90\xAD\x3E\x64\xF3\x64\xA9\x08\xC0\x04\x4B\x00\xA6\xA5\x54\xEE\xBC\x9E\x98\x1D\xB2\x29\x84\x76\x6F\x53\xB6\x97\xA5\xBE\x7A\xB5\x04\xD4\x7F\xBE\x7E\xDB\xA5\x2E\xED\x7D\xB9\x9D\xFF\xBB\xAE\x80\xFD\xA0\x85\x02\xC1\xB0\xC1\x64\x86\xB3\x1E\xD2\xB9\xBD\x06\xFD\xC3\x88\x75\x76\xC3\x7F\xA4\xB7\x70\xCA\x67\xB5\xB9\xFC\xB3\x4F\x5D\xAE\xA0\x92\xE8\xAD\x76\xAA\x0C\xC0\xB1\xFB\x39\xB2\x69\x64\xA4\x7A\x8B\x88\xBD\xBA\x0F\xD3\xC4\xB9\xB3\x8D\x78\xB9\x03\x8D\xB9\x85\xA4\xCB\xC2\xA4\x96\xC6\xC5\x94\x0D\xB5\x52\xA5\xC0\xB0\x5D\x89\x93\xB6\xFF\xA3\xAD\x30\xD5\x88\xBA\x32\xBE\xB0\xAC\x2C\xC2\x98\x60\xC4\x94\xAC\x15\x49\x7D\xB8\x68\xA0\xCD\xF2\x16\xCB\xB8\x57\xA4\xCC\x44\x53\xAF\xCE\x55\xF1\xCB\xCE\xC9\x91\x7B\xB7\x76\xDB\xB8\xA3\xB5\x7C\xCF\x39\xE1\xBB\x9A\xE4\x69\xAD\x79\xC1\xC7\xD0\x98\x29\xC2\xB2\xEB\xA7\x7F\x7F\x9B\xB4\x9D\x0F\xE7\x9D\xA7\x30\xD2\xB2\x89\xFB\x83\xCD\x80\xA5\xCC\x6C\x67\xC3\x69\x53\xEA\xC6\xC3\x44\xF2\xB3\xD1\x92\xB2\xCE\x31\xD1\x79\xBA\xF9\x58\xC8\xAF\x79\xD6\xC5\xA5\xBB\xDF\xCE\x2F\xD9\xD2\xD0\x9C\xCE\xD4\x89\x6E\x9F\xBD\xCA\x98\xC1\xB4\xF6\x9D\xC1\xDB\x30\x20\x6E\x8D\x0D\x6A\x8B\xF4\xB2\xDA\x06\xCC\xDA\xDB\x1E\x50\xDA\xB3\xDB\x4F\x6F\x46\x2C\x96\x20\xC7\x50\x70\xB3\xF0\xBD\x6D\xAB\x9A\xC4\x45\x08\x30\xD5\xD3\xE0\xDA\xDA\xE2\x55\xD3\x70\x83\x18\xDB\xC4\xCA\xC8\xA0\x2A\x86\xD9\xDE\x8D\x17\xB4\xDF\xEC\xD6\x9F\xBC\xE3\xD7\xD4\x00\x26\xD8\xDF\x01\xF2\xAA\xE6\x34\xAE\x91\x07\x52\x04\x6C\x35\xAF\x50\xA9\xB0\x23\xE0\x89\x3E\xDE\xDE\x7C\x94\xBD\xC4\xCE\x8B\xE1\x9F\x8F\x87\x41\xA1\xDD\xA3\xC7\x92\xE1\xDD\xC5\x5A\x21\xC4\x07\xF3\x84\x50\x9C\xE8\xBC\x8D",
"\xA2\x6C\x6C\xED\xB3\xE3\xB4\xE2\xD6\xE3\x82\xF7\xDA\xA5\xE9\xB6\x70\xCC\xE9\xB1\xC5\x2C\xD2\x89\x71\xD4\xC4\xE1\xE3\x49\x78\xE6\x97\xFA\xE5\x70\xFF\xB3\xA6\xA8\xFB\xBD\xD8\x72\x95\xE1\x6E\x18\xF5\x6C\x7D\xB1\xCE\x6F\xA5\xC1\xDD\xE7\xC0\xDD\xCE\x7B\xCF\xE6\xDB\x72\xC4\xEE\xEA\x5A\xE7\xE8\x73\xC5\xC6\xB5\x6F\xA4\xEE\xBD\x44\x6A\xC9\x3A\xCC\xCD\xCD\xD8\x91\xBF\xB7\x3F\xD5\xBB\xF1\x57\x9D\xD7\x05\xF1\xEF\xBB\xD6\xBD\xCA\x78\xDF\xC6\x9B\x30\xE7\xEC\xC2\xEF\xDD\xDF\xC8\x01\xF9\xE0\xF7\xAA\xB6\xA9\xA2\x75\xD5\xDB\xD4\xAF\xC9\x65\xB9\xD5\xD1\xC1\xDC\xD5\xA4\x87\xB9\xEB\x39\xFA\xD4\xAB\xFB\x66\xD8\xCC\x1A\xD0\xC9\x35\xDB\xC6\x80\x10\xED\xE3\x02\xA1\xFB\xE5\x08\x80\x03\x7B\x14\x97\xAF\xC6\xF0\x80\xB1\x1C\xB9\x5C\x87\x6F\x5E\x84\x09\xD4\x45\x84\xB5\x91\x7D\x88\xDF\x3A\x38\x48\xAA\xE3\xE4\x8E\xF0\xB1\x8A\x68\x96\xF6\x15\xA2\xF0\x2B\xBA\x5B\x90\x26\x7F\x95\xC8\x00\x0E\xC1\x94\x32\xA6\x8A\x8A\xA7\x9B\xF6\xC7\x98\x8F\x40\x19\xE7\x63\xD6\x35\xD2\xF4\x10\xA6\x80\x27\x4D\xE5\xE4\x85\x20\x28\xA5\x12\xBC\xF4\xFB\xA0\xB0\xB3\x8E\x88\x9D\xEF\xF0\xA5\xF9\x79\xE3\xDA\x21\xF9\xF0\x6C\xFA\x62\xA2\x90\x67\x43\x90\x29\xFA\x25\x05\xD3\x25\xBD\xFC\xF4\xD8\x92\x97\x21\xA6\x42\x7C\x78\x44\x7C\x0F\x16\x7C\x5C\x4D\x55\xF2\x79\x3C\xF4\x78\x57\xA5\x43\x14\xF8\x7F\x69\xC1\x6B\x62\x5A\x7C\x30\x44\x36\x57\xA9\x61\x6C\xD6\x73\x60\xD9\x70\x58\x07\x6A\x23\x39\x66\x77\x2E\x7E\x63\x21\x8D\x79\x42\x63\x61\x28\x66\x2C\x85\x3E\x52\xFC\x17\x76\x65\x22\x1D\xDC\x69\x59\xC5\x24\x21\xCF\x13\x14\xB7\x16\x01\x3A\x1A\x1C\xEB\x66\x54\x1A\x10\x22\x82\x77\x1B\x18\x07\x83\xC1\x10\x53\x04\x81\x83\x2A\x33\x83\x7E\x26\x10\x1A\x00\x84\x4C\x2C\x5E\xE9\x5B\x27\xCE\x15\x17\x47\x82\x10\x1C\x0A\x84\x10\x8A\x75\x3D\x25\x82\xC1\x67\x1B\x1E\x0A\x84\x1C\x05\x2A\xAC\x1F\x0F\xB7\x13\x12\x65\x23\x86\x64\x8D\x82\x69\x12\x32\xB1\x25\x86\x64\x8F\x85\x7B\x2B\x27\x65\x2B\x27\x4D\x19\x86\x61\x24\x64\xA4\x33\x2D\x1D\x05\x86\x2D\x75\x5B\x6E\x86\x10\x0D\x2D\x84\x6C\x2B\x11\x4A\x22\x84\xEC\x75\x26\xC3\x13\x84\xB7\x12\x88\xFC\x7E\x19\x4D\x1B\x87\x5E\x20\x87\x06\x12\x87\x5E\x24\x87\x99\x3D\x14\x77\x84\x86\x79\x8D\x5D\x8C\x83\x2D\x09\x8D\x14\xA4\x43\x49\x11\x54\x7A\x89\x84\x88\x07\x26\x88\xE1\x22\x72\xE5\x79\x1C\x69\x14\x1D\x99\x87\x1B\x8E\x82\x10\x90\x8D\x25\x92\x82\x38\x94\x88\x87\x3B\x7E\x72\x99\x8D\x87\xB6\x87\x2F\xA2\x20\x15\x88\x87\x8A\x0F\x12\x8A\x02\x1B\x7A\x5D\x2D\x8B\x4D\x4F\x10\x5F\x8B\x1F\x65\x81\x2B\x71\x84\x8B\x29\x8D\x5C\xB3\x86\x89\xB5\x85\x5B\x9E\x18\x86\xC9\x8C\x87\x8F\x8C\x8C\x63\x75\x87\xCF\x83\x86\x97\x82\x45\x5F\x8D\x34\x55\x3A\x86\x03\x19\x16\x97\x5B\x8A\x06\x1D\x8A\xC1\x28\x8D\xAE\x54\x39\xDB\x85\x26\xDD\x8A\x24\x62\x87\x2C\x3F\x4B\x21\x41\x40\x13\x87\x80\x8A\xBE\x8C\x8D\xBA\x86\x21\x0A\x27\x8F\x0C\x7C\x7E\x5F\x81\x6A\xE6\x86\x2A\xD6\x8E\x8A\xEA\x8A\x4E\xEC\x86\x10\x95\x8A\x8F\x4C\x8E\x72\xF1\x82\x10\x52\x24\x8F\xDC\x7A\x11\xFE\x83\x7D\xC5\x8C\x90\xDF\x75\x1C\x2D\x45\x91\xA6\x87\x91\x9E\x13\x12\xD4\x15\x26\x0F\x9D\x25\x2B\x85\x87\xB7\x11\x8B\x61\x3F\x0F\xB1\x2A\x92\xE1\x21\x86\x0A\x93\x29\x65\x85\x92\x99\x37\x92\x66\x75\x87\xD4\x1B\x90\xEE\x85\x93\x99\x31\x8E\x07\x9D\x5E\x2C\x90\x91\x61\x23\x12\x17\x00\x93\x64\x82\x93\x82\x34\x93\xCD\x87\x76\xD4\x13\x94\xD0\x89\x94\x75\x8C\x93\x45\x94\x36\xDA\x62\x8E\x5F\x83\x12\x22\x3A\x86\x5F\x81\x2B\xBA\x2E\x92\x02\x1B\x90\xB1\x27\x93\x65\x84\x8C\x58\x4F\x10\x50\x98\x91\x3E\x7A\x24\xE2\x88\x26\x69\x1A\x2B\x4D\x39\x96\x3A\x19\x16\xA1\x6D\x23\x65\x2A\x8C\x05\x93\x86\x39\x87\x4B\x23\x90\x2A\x76\x1E\x81\x48\x90\x76\x73\x6E\x96\x1F\x96\x10\x21\x60\x98\x6B\x89\x16\x23\x11\x6A\x58\x95\x35\x3F\x96\x59\x41\x96\x10\x0F\x76\x90\x5C\x32\x10\x8F\x96\x96\xF5\x5A\x24\xAF\x80\x20\xB8\x55\x45\x7D\x9B\x8E\x78\x11\x2B\x18\x6C\x95\x00\x0E\x6E\x90\x95\x75\xA2\x94\x99\xED\x53\x92\xB8\x82\x8D\x28\x8E\x97\xC6\x4B\x98\x97\x50\x9A\xB1\x2F\x95\xD7\x8D\x94\x70\x7E\x72\x97\x96\x10\x5C\x64\x20\x9B\x98\x90\x45\x14\x98\x65\x85\x95\x06\x1A\x74\x22\x98\x8D\x16\x67\x1B\x77\x97\x52\x8B\x9B\x98\x5B\x96\x10\x23\x1B\x90\x65\x9D\x97\xC5\x92\x8F\x00\x7A\x83\x55\x78\x93\x61\x27\x9C\x1B\x6F\x9C\x73\x81\x8D\xDD\x5B\x98\xB9\x10\x9A\x4C\x96\x2B\xC4\x90\x6F\x5D\x28\x9D\x24\x2B\x94\x65\x86\x9E",
"\x30\x1A\x9D\x5E\x2F\x82\xF0\x5E\x9B\x5E\x2F\x85\x21\x65\x9A\xF0\x95\x9F\xDF\x84\x94\x54\x99\x16\x3D\x23\x99\xF5\x9F\x9B\x86\x96\x10\x14\x05\x86\x23\x97\x1B\x57\x84\x9E\xFF\x5B\x9B\xFF\x59\x9C\xB1\x23\x01\x8D\x92\x10\x15\x08\x9F\x65\x25\xA0\x82\x77\xA0\xAB\x98\x67\x5A\x74\x1D\x0F\xA4\x9B\x16\xA3\x67\xAF\x86\x22\x8E\x65\x9E\x84\x74\x9D\x8B\x9C\xA0\x5E\x23\x12\x4D\x1C\x9E\x05\x78\x85\x5A\x78\xA0\x92\x54\x1D\x4D\x19\x93\x48\x72\x59\x1D\xA6\x10\xC3\x6C\x55\xC6\x91\xA2\xB7\x4D\x9F\x85\x9A\x13\x6D\x85\x86\xE8\x84\x9F\xDB\x91\xA3\xC1\x6D\x8E\x41\xA5\x9B\x7A\x81\x26\xA9\x98\x89\x7F\x87\x46\x9F\x8F\x8F\xA1\x87\x9D\xA3\x83\x88\xA5\x8B\x7F\xF9\x8F\x85\x8B\x8E\xA3\x75\x90\xA4\x91\x88\x5F\x43\xAF\x92\x1A\xA5\x99\x43\x17\x8B\x46\x29\x5E\x9C\x8F\x20\x94\x42\x96\x7A\x40\x8C\x54\xAE\x91\x53\xA2\x8C\x5F\x8A\x8A\x58\xAF\x34\x02\x1A\xA5\xB0\x8C\xA5\x5A\x74\xA4\x5B\xAD\x90\x47\xAD\x9E\x63\xA9\x8B\x14\x2B\x8B\x0F\x18\xA6\x19\x4A\xA6\xC2\x8C\x91\x6B\xA3\x96\x9E\x18\x8C\x64\x84\x97\x73\xA7\x90\xFF\x58\xA7\x75\xAA\xA7\xDD\x53\x8D\xB3\x93\x86\x8C\xA1\x9A\x8E\xA2\x59\x90\xAB\x9B\xED\x5F\x96\x3A\x15\x8E\x71\xA3\x2D\x74\xAC\xA2\x5D\xAD\x95\x3D\x99\x5E\x23\x91\x91\xB5\x75\x25\xF6\x8D\xA6\xA4\x89\xA7\x2A\x37\x1A\xB9\x7B\x11\x86\xAE\xA6\x70\x97\x8E\xA1\xAD\x14\xA3\xA5\xA1\x95\x76\x4C\x9B\xAC\xAB\xA7\x90\xA5\x02\x13\x7B\xF5\x84\x91\xAE\xA2\xA5\xB0\xAB\x42\x1A\x91\x7E\xB5\xAF\xAA\x9E\x1D\xA3\x64\x88\x8E\xFC\x95\xA4\x9C\x96\x87\xA7\xAE\xA7\x24\x9D\xA7\x7B\xA2\x60\x4C\xA8\x13\x82\xAF\x20\x84\xAE\xAC\xDF\xAF\x28\x56\xA8\xAB\xD1\xA5\x97\xD3\xA0\xAB\xD5\xAF\xAB\x91\x96\xA4\x4A\xAC\xA7\x02\x1B\x89\x83\x26\xA6\x4D\xA6\x91\x88\xA1\xAE\xC8\xAD\x71\x1D\x98\xA8\x6F\xA6\xAE\x63\x82\xAD\x07\x9A\x82\x5E\xA6\x9A\x7E\x80\xAF\xCB\x75\xB0\xB1\xA4\x47\xFA\xA7\xA8\x69\xA2\xAC\x0C\xB3\xA8\xC7\xA9\x88\xC7\x85\x97\x73\x98\xAE\x01\xBE\x8C\x03\xB0\xA3\xEE\xA2\x45\x94\xA3\x9A\x15\xB2\xA7\x00\x09\xAE\x91\xA9\x8D\x93\x89\xB1\xD4\xA0\xA6\x51\x8F\x85\xA0\xA7\xAE\x20\xB2\xB2\xBB\x92\xB0\xA6\xAF\xA5\xC1\xAE\x25\xAA\xA4\x7B\x56\x21\xB1\xF9\x8A\xB1\xB8\x77\x21\x12\x1D\xAC\x00\x97\xAB\x04\x9C\xB2\xD3\x2E\xB2\xBC\xA0\xB3\x00\x06\x9D\xEA\xA8\xB2\x4E\x30\xA2\xC3\xAB\x7D\x1D\x2D\xAA\x02\x13\xAE\x50\x1A\xB1\xCA\xA7\x1F\xCC\xA8\xB3\x6C\xA1\x9F\x6B\x91\x28\x84\x9F\x85\x3D\x29\xA1\x3A\xA1\xB6\x01\x96\x10\x72\x91\x26\x97\xA0\xB6\x6A\xA3\x9D\x78\x91\x26\x7A\x92\x58\x51\x85\x75\x1B\xAD\x9A\x69\x17\x1B\xE1\x91\xB6\x3B\xA3\x10\x8A\xA3\x86\x26\xA6\x10\x75\xB8\xA4\x52\x90\x83\x1D\xB9\x8E\x64\x8B\xB7\x02\x1D\xB7\x06\xBF\x6D\x5A\xBA\x13\xB7\x19\x01\x76\xB8\x95\x69\x19\xB7\xF0\x9F\x85\xB7\x1E\x32\x8D\xBA\x96\x3C\xAE\xAF\x1F\xB4\x84\xB7\x19\xA4\x52\x4B\x27\xCF\x71\x88\xF8\x89\xB5\x4C\xBF\xB0\xE0\xA8\xB5\xFC\xA9\x18\x98\xB6\xB6\xA9\xB0\xB2\xF2\xA2\x10\x9D\x80\x80\xF5\xAB\xAF\x0D\xB4\xB3\x51\xAF\xA4\x51\xB1\xBA\xA7\xBA\x13\x70\xAB\xA8\xAB\xBA\x89\x08\xB6\x7F\x81\xA8\xBB\xB3\xB3\xBA\x85\xA6\xBA\xC3\xB3\x8E\x9F\xAD\xBB\x7F\x2C\x9C\x0E\xB4\xAC\x13\x93\x8C\xC2\xB0\xB1\xB0\xAB\xB3\xFD\x86\xBC\x19\x43\xB6\x41\xB6\xA9\xCC\xB4\xBB\x4D\xB2\x91\x4F\xB6\xAC\xB7\xBE\xA4\x39\xB5\xA4\x55\xB0\x25\xD0\xB2\xBE\x17\x92\xB9\x26\xB5\xB9\xC8\xB3\x10\xD0\xA3\x86\x55\x3C\xAE\x70\xBA\xB4\x62\xA1\xAF\x08\xBF\xB9\xB1\xB4\xBA\x8F\x28\xAF\xB6\xBB\xB0\xB6\xAE\x15\xCA\xB8\x9F\xF2\xBF\x8E\x61\xAE\xB7\xF6\xBE\x72\x65\xAD\x80\xDE\xA1\xBD\xA5\xBC\xBD\xFA\xB3\xB5\xD6\xBF\x20\xFD\xA9\xBD\x65\x21\xBF\xEB\xB3\xB2\x67\x95\xC0\x06\xB9\x80\x4E\x85\x21\x88\x42\xB5\xBF\x8E\xB0\xC5\xB1\xBE\xF6\xAA\x47\x13\xB0\xB2\xC3\x90\xB2\x48\xB8\xC1\x4A\xB1\xB8\xAF\x80\x9A\x03\xCC\x9D\x1C\xBD\xBE\x07\x1B\xB2\xF0\xB5\x97\x2B\xCC\xA9\xA8\xAD\xBC\x4E\xBC\xAA\xE0\xBE\xBF\xCE\xAD\x97\xD4\xBA\x1D\x3E\xB2\xB1\x40\xBA\xB9\x61\x26\xC1\x31\xB4\xB0\x0E\x9C\xC3\xDE\xBE\xC3\xE7\xB5\xC2\xD2\xB3\xB2\xE5\xBB\x91\x11\xC4\xAE\x73\xB6\x10\xFE\x2C\xBE\x6E\x98\xBD\x05\x79\xC2\x4B\xBC\x8A\x06\x1D\x81\x34\x8C\xAB\x14\xAC\xC5\x68\xC0\x00",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void JsonLiteral::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonString::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonNumber::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonArray::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObjectField::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObject::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::json;

			IMPL_TYPE_INFO_RENAME(JsonNode, system::JsonNode)
			IMPL_TYPE_INFO_RENAME(JsonLiteral, system::JsonLiteral)
			IMPL_TYPE_INFO_RENAME(JsonLiteral::JsonValue, system::JsonLiteral::JsonValue)
			IMPL_TYPE_INFO_RENAME(JsonString, system::JsonString)
			IMPL_TYPE_INFO_RENAME(JsonNumber, system::JsonNumber)
			IMPL_TYPE_INFO_RENAME(JsonArray, system::JsonArray)
			IMPL_TYPE_INFO_RENAME(JsonObjectField, system::JsonObjectField)
			IMPL_TYPE_INFO_RENAME(JsonObject, system::JsonObject)
			IMPL_TYPE_INFO_RENAME(JsonNode::IVisitor, system::JsonNode::IVisitor)

			BEGIN_CLASS_MEMBER(JsonNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(JsonNode)

			BEGIN_CLASS_MEMBER(JsonLiteral)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonLiteral>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonLiteral)

			BEGIN_ENUM_ITEM(JsonLiteral::JsonValue)
				ENUM_ITEM_NAMESPACE(JsonLiteral::JsonValue)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Null)
			END_ENUM_ITEM(JsonLiteral::JsonValue)

			BEGIN_CLASS_MEMBER(JsonString)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonString>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonString::*)(), [](JsonString* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonString::*)(const vl::WString&), [](JsonString* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonString)

			BEGIN_CLASS_MEMBER(JsonNumber)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonNumber>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonNumber::*)(), [](JsonNumber* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonNumber::*)(const vl::WString&), [](JsonNumber* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonNumber)

			BEGIN_CLASS_MEMBER(JsonArray)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonArray>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(JsonArray)

			BEGIN_CLASS_MEMBER(JsonObjectField)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObjectField>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(JsonObjectField::*)(), [](JsonObjectField* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(JsonObjectField::*)(const vl::WString&), [](JsonObjectField* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonObjectField)

			BEGIN_CLASS_MEMBER(JsonObject)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObject>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(fields)
			END_CLASS_MEMBER(JsonObject)

			BEGIN_CLASS_MEMBER(JsonNode::IVisitor)
				CLASS_MEMBER_BASE(vl::reflection::IDescriptable)
				CLASS_MEMBER_EXTERNALCTOR(Ptr<JsonNode::IVisitor>(Ptr<IValueInterfaceProxy>), {L"proxy"}, &interface_proxy::JsonNode_IVisitor::Create)

				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonString* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonNumber* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonArray* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObjectField* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObject* node))
			END_CLASS_MEMBER(JsonNode)

			class JsonTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::json::JsonNode)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral::JsonValue)
					ADD_TYPE_INFO(vl::parsing::json::JsonString)
					ADD_TYPE_INFO(vl::parsing::json::JsonNumber)
					ADD_TYPE_INFO(vl::parsing::json::JsonArray)
					ADD_TYPE_INFO(vl::parsing::json::JsonObjectField)
					ADD_TYPE_INFO(vl::parsing::json::JsonObject)
					ADD_TYPE_INFO(vl::parsing::json::JsonNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool JsonLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new JsonTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
