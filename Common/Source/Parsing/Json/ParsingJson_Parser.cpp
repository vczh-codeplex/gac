#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4035; // 15032 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 963;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x9F\x71\x02\x80\x01\x7F\x05\x06\x83\x20\x0F\x30\x00\x36\x86\x00\x72\x00\x05\x82\x86\x02\x83\x29\x00\x74\x11\x80\x09\x30\x02\x36\x00\x67\x07\x94\x87\x89\x82\x83\x85\x86\x0F\x8D\x92\x83\x97\x06\x81\x21\x8C\x30\xCE\x00\x01\x30\x05\x34\x01\x32\x22\x86\x88\x8A\x80\x89\x97\x8C\x96\x06\xCB\x37\x80\x09\x38\x03\x3A\x88\x12\xE4\x39\x83\x85\x90\x03\x92\x87\x48\x93\x86\x8D\x92\x82\xA0\x9D\xA2\x47\xAA\x80\x0A\xA4\x82\x9D\xA7\xA7\x3E\xAB\x93\xA1\xA3\xA0\xAD\xA8\xAE\x23\xBB\xA6\x9D\x91\xAB\x90\x04\x83\x42\x10\xB5\x3E\x8B\xAB\x9B\x8D\xA2\x5D\xCC\xBC\x88\x9D\xB6\x83\xB6\x81\x71\x8D\xB3\xBF\x8A\xA4\x9A\x88\xBC\x69\xDF\xAC\xBA\xAE\xB0\xBA\xB8\xBA\x85\xF7\x8B\xA4\x9B\xB8\xA8\xC6\xBF\x8E\x82\xD0\xD6\xB7\xC3\xCA\xB4\xA7\x8B\xBF\x86\x96\x82\x82\x9B\xB8\x9B\x62\x43\x92\x99\xB7\x84\x05\xCB\x8F\x1A\xB8\xB8\x30\x90\xB1\xAA\x82\x00\x54\x80\x0D\xAF\x92\x8A\x88\x9A\xBC\xFF\x41\xF9\xCC\x2C\x88\x98\x9C\xDF\x50\xC1\xC1\xE4\x06\x82\x99\x86\xA5\x38\xCA\xFF\x64\xD0\x06\xD1\x9A\x00\xA9\xC7\xC7\x8A\xE4\xEF\x24\xEC\x00\x6A\x43\xA3\x30\x92\xE9\x82\x80\xEF\xA9\xE1\xF8\x83\xFA\x8E\x21\xE2\x9C\x0F\xDC\x9C\xF7\x80\x9A\x89\x8F\x8F\x21\xD2\xF9\xDB\xDB\x88\xE5\xA3\xA6\x1D\x71\x67\x77\x1C\xDB\x42\x76\x40\x71\x01\xAA\x66\x5F\x43\x4D\x76\x1B\x80\x00\x73\x51\x73\x7D\x69\x10\x97\x79\x77\x46\xB9\x63\x7D\x40\x6C\x43\x5C\x82\x75\x77\xDF\x6A\x70\x00\x7B\x00\x14\x76\x1B\x7B\x50\x4A\x54\x81\x79\x06\x68\x70\x7A\x78\x30\x6E\x7D\x44\x7C\x75\x4C\x72\x43\x47\x34\x76\x48\x4F\x48\xE6\x40\x0E\x8A\x88\x24\xB2\x83\x51\x7C\xBA\x46\x4E\x80\x4D\x0F\x51\x85\x83\x74\xF4\x5A\x46\x7C\x5D\x21\x59\x80\x44\x87\x38\x5C\x87\x6F\x03\x06\x64\x06\x40\x96\xB7\x5D\x9B\x92\x74\x5E\x83\x42\x76\x72\x61\x9F\x94\x99\x98\x63\x8A\x79\x02\x41\x54\x00\x02\x14\x00\x55\x00\x05\x10\x00\x56\x00\x0F\x48\x71\x71\xB3\x96\x8D\x7D\x15\xB8\x47\x6E\x00\x06\x4A\x06\x42\x7B\x77\x80\x08\x47\x9C\x75\x85\xA9\x9D\x91\x02\x67\x88\x90\x00\x04\xBB\x86\x43\x00\x06\x6B\x94\x85\x9C\xC4\x44\x79\xA0\x00\x78\xB2\x90\x03\x9E\x1F\x73\x5F\x43\x43\x80\x82\x4B\x9D\x6E\xDE\x71\x5A\x12\x8F\x00\x10\x1E\xA6\x4C\xA5\x80\x0C\x14\x00\x7B\x00\x04\xA6\x40\x4D\x7F\x5C\xAA\xAA\xA0\x44\x7E\x77\xA1\x00\x31\xA3\xAD\x1F\x9F\xA3\x63\x5A\x40\x2F\x6F\x9F\x9A\x77\xAE\xB3\x90\xAE\x41\xB3\x9B\x1C\xA0\x6E\x98\x48\xBE\x9B\xB5\x0B\x7E\xA6\xA2\xA7\xC2\x80\x0D\x15\x89\xD5\x93\xBB\x42\x77\x4D\x00\x05\xBB\x4B\x23\x6C\x04\xB6\x98\xC1\x4A\x6E\x76\xB6\x32\x63\x4A\x0C\x00\xBA\x9F\x8D\x70\x9C\xE6\x80\x01\x5F\x9C\x6F\x9F\x06\x42\xB4\xB3\xAD\x0E\xB4\x00\x3F\x32\xA5\x5F\x0A\x00\x28\x00\x02\x0B\x06\xCA\x58\xC1\x0A\x04\xC9\xC0\x02\xB4\x38\x73\x9F\xB6\xB4\x08\xC1\xC3\xC1\xC1\xB3\x8E\xC0\x00\xC4\x05\xD6\xA0\x02\xC8\xD4\x58\x4D\x9B\x9B\x49\x15\x70\x03\x11\x00\x1B\x06\x42\x08\x12\xD2\xBE\x16\xC1\xB3\xB0\xCF\xB4\x1F\x34\xD3\xC0\x03\xCC\x73\x77\xC9\xCF\x5C\x1D\xF4\xA0\x00\x0D\x00\x04\xB0\xC6\x0A\x00\x30\xC2\xA2\x40\x4B\xD2\x58\xAC\x7D\xAE\xAF\x4B\x43\x9C\xB7\x86\xC4\x80\xC2\x3D\x92\x7A\x96\x40\xB9\x6B\xAF\x8C\x8C\x1A\x51\x06\x42\xD7\x21\xA0\xDB\xC3\xB5\x0D\x4D\x4A\x44\x46\x1A\x46\x60\x4E\x6B\x02\x4F\x35\x08\x08\x00\x1A\x9C\x0C\x00\x64\xE9\x76\xDA\x0F\xEB\xB8\xDC\xAA\xDE\xEB\x70\x4D\x03\xD8\x7F\xEF\x81\xE2\x46\x0C\xEC\xDC\x64\x4C\x3D\xB7\x20\x00\xDD\x77\xF9\xD6\xE3\x88\x30\x7C\xDD\xD5\xE1\x40\xB0\x42\xCA\xE4\x99\xC8\xE0\x01\x0C\x00\x29\xC2\x41\xE4\x98\xFB\xD0\x03\xBC\x74\xF0\xC5\xAC\xCC\x72\xF4\xD2\xB4\xDD\xAB\x82\x94\x8E\x52\x74\xE8\xE0\x03\x89\x33\xA9\x80\xA7\xE3\x42\xE9\xE0\x02\xBA\x30\xF0\xE0\x02\xEC\xBA\xF5\xEC\xEC\xEE\x43\xB5\x54\x80\xDD\xC4\xB4\xDF\xB6\xEF\xC4\x81\xF6\x5F\xF2\xA5\xC7\xED\xDC\xE7\x66\xDB\xE5\xF4\xE5\x9E\xF2\x01\xEA\x41\xA4\xDF\xD6\xF4\xDF\xB6\xEA\xE9\xD0\xEF\xAF\xFE\xD4\xF0\x91\xC6\xF4\xD8\xF3\xEC\xBB\xF4\xD5\xAE\xEF\xC0\xFC\xE1\xEC\x8A\xEC\xE7\xE7\xF0\xFE\xCA\xFC\xED\xF3\xC0\xD0\x67\x7C\xDD\x34\x24\x7A\xF1\x5C\x78\x00\x72\x74\x3B\xFD\x39\x74\x48\x5D\x4B\x81\x79\x4A\x2C\x60\xE8\x73\x53\x74\xF5\x7C\x7A\x29\xE4\x7C\x76\xC9\x57\x59\x64\x99\x2C\x65\x7D\x74\x39\x47\x50\x2D\x77\x7D\x79\x52\x7B\x55\x75\x4F\x52\x92\x20\x87\x48\xA8\x2B\x83\x7A\xBC\x66\x81\x90\x17\x87\x7B\xED\x64\x44\x4B\x7E\x72\x84\x4C\x0C\x6F\x4D\xB4\x70\x23\x4E\x84\x20\x00\xDC\x75\x60\x01",
"\xF0\x65\x6B\x7C\xBC\x69\x80\xE1\x29\x8E\x85\xA1\x0E\x84\x4E\x0F\x4A\x4A\x04\x80\x0D\x06\xF0\x7E\x6C\x89\x49\x43\x29\x06\xF4\x61\x04\xBF\x7C\x33\x23\xBF\x28\x81\x09\x03\x72\x50\xD2\x58\x8D\x4F\x00\x1B\x88\x00\x5D\x88\x7A\xEB\x72\x6C\x8C\x45\x97\x89\x14\xDA\x8A\x7E\x2E\xBE\x68\x41\xC6\x20\x8C\x54\x72\x6D\x29\x55\x7D\x80\x22\x1A\x37\x73\x1F\xEA\x67\x6C\xD0\x65\x06\x8A\x7E\x90\x20\x21\xEA\x8C\x8C\x1B\xB0\x27\x8D\x00\x05\x8E\xDF\x03\x95\x73\x3A\xAB\x8E\x8B\xFD\x36\x2D\x51\x4A\x82\x21\x07\xB0\x7F\x89\xEB\x75\x2C\xC3\x5E\x74\x83\x38\x9E\x92\x77\x6A\x9B\x80\xCA\x2A\x6F\x82\x4B\xB8\x47\x3A\x38\x3E\x76\x09\xE2\x82\x79\x33\xAF\x86\x76\x2D\x99\x89\x2C\xB0\x84\x6E\x1D\xAD\x3C\x86\x0A\x90\x8A\x0A\xC3\x2E\x01\x25\xB3\x88\x27\x3C\x8A\x93\x0F\x9B\x3D\x46\xBB\x72\x8B\x98\x38\x3C\x6C\xDD\x1C\x96\x82\x06\xB5\x28\x94\x34\x8C\x63\x0C\x7A\x75\x83\x53\x84\x49\x95\x00\x07\x67\xF7\x1E\x8C\x76\xDB\x6F\x92\x47\xBC\x70\x67\x2C\xB5\x97\x99\x72\xBC\x71\x97\x68\x83\x81\xFC\x0E\x9F\x96\x6B\x8A\x2C\x9A\xAB\x5F\x8A\x7F\x74\x54\x70\x7D\x9A\x97\x6C\xDE\x6C\x10\x22\xF6\x49\x93\x30\xAA\x88\x66\xD2\x52\x79\xFA\x28\x8D\x9C\x10\x89\x40\x27\x36\x24\x40\x09\xF3\x77\x7D\xFA\x6C\x98\x9A\xEE\x94\x6F\x43\x83\x4E\x7E\xDE\x4F\x7F\x7C\xDF\x52\x78\x01\xBC\x7E\x9F\x30\xB0\x8C\x74\x25\xA4\x29\x1A\x96\x98\xA0\x01\xBA\x67\xA2\x4D\x9B\x96\xED\x1B\xA1\xA3\x24\xA5\x04\xA2\x30\x76\xA3\x33\xB1\xA9\xA3\xE2\x02\x45\xA6\xCC\x7E\xA1\x3A\x83\x62\xA5\x79\xA9\xA7\x3F\x84\x74\x92\x46\x03\x7D\x92\xB4\x40\x97\x6C\x4A\xBE\x51\x10\xCD\x6E\x99\x44\xBE\x82\x23\xD2\x82\x8F\x13\xF8\x82\x40\xE4\x0F\x25\x69\xAB\x5C\xAA\x82\x0F\x53\x8A\x7D\x03\xA2\xAC\xDA\x2F\x50\x38\xE2\x9D\x83\x95\x7D\xA2\x43\x74\x22\x40\x87\x72\x94\x7A\xC5\x4F\x48\x3F\x62\x87\xA7\x1D\xBE\xA3\xAC\xA8\x2A\x8A\x26\x71\x45\x5F\xBE\x57\x50\x84\xB8\x94\x49\xAE\xBC\x63\xA4\xDD\x56\x38\x34\x05\x50\x92\x92\x61\xBC\xAD\x5A\xFE\xAC\xA5\xDB\x4F\x41\x52\x2E\xAA\xB0\xA7\x12\xBA\x8F\x87\x24\x87\x28\x09\x48\x0C\xEF\x14\xA0\x9F\x17\x95\x8E\x77\xEE\x2F\x50\x66\xD2\x74\x58\xBD\x91\xB3\xA3\x5E\xAB\xA5\xF9\x74\x22\x54\xA8\x05\xAC\x7A\x68\xBD\xB0\x2D\xC6\x2C\xAE\xD1\xB2\x7F\x9D\x0D\xB4\x8B\x50\xD6\x33\x54\x97\xAD\xB1\x92\xA6\x9B\xB0\x6C\x8F\x47\xA0\x3E\x4A\x4F\xB6\xBC\x79\xB5\x6C\x9F\xBD\xB7\xD1\x80\xB8\xA3\x74\x67\xB7\xF9\x6D\x42\x23\xE7\x9D\xA1\x98\x47\xBC\x9D\x53\xE1\xB3\x8B\x39\x5D\x9C\xA0\xBD\x3F\x9D\x73\x89\xAB\xB7\x85\x82\x9C\xA7\x0E\xB9\x8C\x50\xBD\x75\xA2\x97\x8C\xA0\xBB\x96\x94\xA7\x3C\xFF\x7F\xA2\x9B\x59\xB6\xA8\x05\xAA\xA7\xE5\x3E\x93\x64\xC2\x44\xC4\x61\x35\x00\x00\x25\x03\xA4\xC1\xE6\xAB\x70\x7D\xF6\x63\x78\x0D\xA0\x8F\x7C\xDD\x54\x7A\x6E\x38\xBF\x76\x7D\x92\xC6\x9F\x9E\x95\xC4\x48\xD4\x7C\xBF\x50\xD1\x79\xB1\x79\x84\xC6\xB5\xF4\x92\xB7\x50\x8F\xCE\x75\x08\xE1\x94\x76\x96\x9F\xC1\xFF\x13\xA3\xA8\x9D\x9E\x9D\x2E\x14\xD4\x85\x88\xC2\xA1\x80\xE8\xBD\x97\x88\x07\x81\x9B\x8B\x80\x05\x99\xA6\x83\xC9\x99\x57\xB2\xA9\x5D\x4D\x99\xB9\x21\xD9\xA8\x9F\xE8\xBA\x8D\x51\x4F\x84\xBC\x00\x1B\x9E\xBC\xC9\xA1\xBF\x7A\xAE\xAE\xBC\x5B\x83\x29\xBE\x3F\xB3\x9D\x86\xB6\xCF\xBC\x5D\xBD\xA2\xBF\x3B\xCE\x7B\x50\xA1\xA5\xC4\xEA\x61\xB8\xCA\xE1\xB4\xC9\x80\xC5\x2C\x60\xA2\x58\xC8\xA5\x73\xCA\xC6\xEF\x6C\xBD\xC4\x98\xA6\xC8\xCC\x43\x33\xBF\x98\xE7\x74\x85\xFB\xB0\xB9\xBF\xF2\xBB\xBC\x8F\xA0\xAF\xBE\x37\xF9\xCB\xAB\x9C\xB1\xB4\x04\x04\x72\xBB\x07\x48\xCF\xA9\x40\x95\x2C\x53\xC4\x84\x75\x4A\xEA\xAE\xA6\x03\xC0\xC8\x89\x5A\x77\xC0\x2B\xDF\x7F\xBC\x0D\xD5\xB0\x8B\xAF\xA5\x9A\x08\x9E\xC2\xC7\xD6\xB4\x7C\xA1\xF3\x6D\xD4\xF8\x79\xC5\xC3\x69\xC0\x83\xF9\x24\xC4\xAF\x18\xA2\xD0\x26\xE0\xB9\xCD\x91\x98\x99\xBD\x30\x97\xD4\x90\x99\xCA\x28\x93\xF8\xC5\xD8\x95\x8F\xCD\x04\xC1\x9E\xC8\x4E\x13\xDD\xA8\x69\xD0\xAA\x99\x6B\x70\x26\xDB\x1A\x2D\x46\x12\x95\xAD\xCC\x68\x9C\x6D\xB4\xED\x93\x88\x43\xE6\xC9\x71\xDA\xDB\x22\x46\x4D\x6E\x70\xC8\x7B\xA6\xCC\x7C\x70\xD3\x72\x8F\x52\x02\x4A\xD1\xD6\xD2\x4E\xA4\x92\xE2\x5B\xD0\x01\x4D\xDE\xD9\xB9\x9E\xD4\xB2\xBC\xF9\x81\xB7\x61\xEF\xB4\xE0\xF8\xDB\xDE\xBA\xC2\x86\x21\x76\xC0\xE7\xDE\x9F\xC2\xC8\x0D\xD4\xD5\xD6\xDD\x47\xD8\x26\x0A\xF2\x20\xB7\x86\x2F\xDE\xD2\x4E\xC8\x5C\x46\xD4\x85\xB9\x9C\xCE\xD4\x74\xED\x6B\xE1\xEC\xDC\x76\xC7\xB4\x82\xDD\x7E",
"\xB9\xCC\xE2\xF9\x99\xCF\xC5\xD9\xD7\xE4\x8D\xC0\x24\xE3\xB4\xDF\xDA\x96\xA0\xE4\xD8\x29\xCC\xE3\xBC\x32\xFB\x59\xCD\xB0\x29\xE4\x77\xF1\xE5\xD9\x45\x3C\x6D\x1F\xF9\xD0\x26\x1C\x96\xAF\xA9\x33\xE2\xEB\xE2\x6B\xD8\xE6\xBA\x5F\xD9\xAA\x4A\xE9\xA8\xB6\xB7\xED\xA9\xA8\xA6\xE3\xEA\x05\xC2\x22\xC3\xA4\x78\xEB\x1A\x84\xC4\xD4\xBF\xDE\x70\xD1\x22\x79\xB9\x54\xF3\xB3\xD5\xEE\xA3\xCB\xAD\xAE\xD4\x7B\x41\xE7\x84\xE4\xB6\xD1\xC4\xAC\xC1\xAA\xCD\x1E\xED\xCE\xD7\x80\x67\x82\xDC\x03\xED\xAB\x07\x60\xAA\xB9\x08\xE4\xAC\x00\x5E\x76\xAD\xF3\x81\xE7\x21\x6B\xBC\x80\x2B\xEF\xA3\x4B\x3C\xB3\xAC\x97\x52\xF7\xAC\x48\x79\xA8\xB9\x4E\xD0\xE4\xB2\xB6\x60\xB1\xBE\x03\xBF\x4D\xC2\x95\xF2\xAE\x30\x3D\xD7\x62\x95\x4D\xB0\xED\x0F\xB7\xE1\xF3\xC0\xF7\x50\xCE\x48\x8C\x1F\xC8\xF5\xF0\x8F\x54\x6C\x68\xB0\x2E\xB6\xFA\xA5\xB7\xCB\xC2\xBE\x74\x77\xB5\xFD\xA3\xD7\xDE\xF1\xF6\x90\xF5\xB1\xA8\x50\x2F\x20\xDB\xCF\xF4\x77\xBB\xFA\x21\xEF\xA4\xB1\xB8\xED\xB0\x64\xB8\xB6\xA5\xFB\x18\x9D\xFB\xAE\xE4\xFA\xCF\x7C\x8E\x50\x2B\x6A\xFF\xE4\x6F\xE7\xFA\xF5\xBA\xBF\xB4\x6F\xEF\xBB\x96\xFA\x09\xEA\xB3\x28\xAC\xA2\x8E\xC4\x9D\xC8\x9B\x0E\xF5\xCC\x9B\x4D\xCC\xE6\x25\xAA\x93\x9C\xB7\xA0\x87\x9C\xC0\x7A\x4E\x1B\x66\x6D\x2C\x41\x5C\x9A\x54\x60\x43\x60\x67\x8F\x6E\x72\x48\x77\x36\x09\x67\x67\x3D\x7B\x4F\x5B\x6A\x50\x11\x64\x80\x88\x61\x66\x75\x75\x63\x03\x81\x5C\x33\x59\x68\xB9\x6D\x5F\x44\x54\x7E\x51\x6B\x4F\xD4\x41\x6A\x81\x74\x22\x20\x27\x82\x30\x15\x26\xF6\x25\x6D\xED\x4B\x27\xCE\x15\x17\x7E\x26\x10\x16\x0A\x13\xCA\x14\x78\x7D\x5F\x10\x30\x80\x11\xD0\x1D\x25\x18\x06\x83\xC1\x13\x7F\xAE\x6D\x23\x08\x84\x43\xB7\x1A\x01\x40\x8C\x24\x40\x7D\x80\xFC\x1D\x80\xB7\x1C\x01\x49\x8B\x74\x51\x5B\x83\xCF\x13\x14\xB7\x1E\x01\x49\x8C\x01\xA5\x2C\x1A\xFF\x07\x1B\x23\x15\x26\x60\x81\x86\x5E\x2C\x85\xB9\x11\x2B\x62\x87\x86\xB7\x1C\x85\xBA\x25\x35\x68\x89\x86\x69\x13\x6C\x7B\x25\x26\xB1\x2D\x14\x66\x81\x26\x26\x83\x39\x24\x2F\x85\x06\x10\x2A\x76\x18\x4E\xB7\x12\x84\xF0\x3E\x19\x23\x1D\x14\x65\x2A\x87\x5E\x29\x82\x78\x8B\x82\xC7\x29\x43\x69\x77\x10\xB1\x2F\x0F\xB1\x29\x1B\x5E\x86\x10\xFE\x22\x10\x6C\x81\x26\x88\x8D\x39\x5D\x27\x87\x9A\x84\x1D\x95\x80\x86\x9C\x86\x36\x97\x81\x86\x52\x8B\x75\x90\x86\x2C\x5E\x23\x12\x17\x03\x29\x62\x89\x89\x66\x37\x1B\xA1\x86\x3D\xD4\x1B\x8A\x61\x81\x8B\x07\x43\x8A\x60\x83\x6E\x18\x5D\x86\x61\x8C\x85\x43\x4A\x2B\xBC\x8C\x8B\x5C\x83\x12\x22\x37\x86\xFF\x05\x35\xA7\x82\x10\x3D\x23\x89\x02\x15\x6F\x02\x11\x2B\xD4\x1E\x8C\xB9\x86\x4C\x18\x55\x87\x4F\x32\x10\x68\x6D\x25\xC1\x6D\x80\xC9\x8C\x75\x5D\x23\x12\xC3\x60\x8D\x06\x13\x6C\x65\x2A\x8B\x3C\x56\x8D\xD3\x29\x8D\x7F\x8C\x80\x3E\x7D\x8D\x4D\x3C\x8C\xE2\x51\x2C\xA8\x81\x8F\xE5\x84\x8D\x3C\x56\x88\xD3\x2B\x7E\xDA\x84\x38\x43\x68\x86\xC3\x86\x10\x43\x41\x8C\xFE\x89\x16\x7B\x2B\x69\x65\x2B\x27\xB9\x2D\x8A\xFC\x84\x43\x4D\x14\x8B\xD3\x8E\x82\x18\x51\x87\x06\x1D\x20\x2F\x8C\x26\x1B\x1A\x24\x38\x83\x59\x0F\x15\x26\xC3\x1F\x79\x1B\x91\x2E\x07\x78\x7B\xC9\x19\x18\x06\x16\x90\x61\x28\x90\xE1\x25\x8F\x21\x7D\x61\x0D\x9A\x90\x10\x9C\x53\x12\x97\x8D\x00\x0A\x8F\x4D\x19\x5A\xE2\x7E\x44\xF6\x6E\x7D\x1C\x97\x20\x1E\x9D\x25\x19\x9A\x5B\x5C\x84\x1D\x26\x9E\x25\x28\x92\x10\xC0\x88\x89\x0B\x9C\x92\x06\x1E\x90\x2A\x9F\x6E\x68\x41\x93\xF9\x85\x91\x14\x25\x5B\x0F\x1F\x93\xB1\x5B\x93\x02\x1F\x7C\xB7\x16\x95\x0F\x24\x86\x06\x18\x8E\x7F\x23\x91\x29\x98\x94\x2B\x9E\x6A\x2D\x91\x86\xE6\x86\x66\x9E\x12\x32\xE4\x81\x26\x73\x83\x96\x87\x89\x94\x66\x9B\x94\x2E\x9E\x94\x4A\x2A\x13\x69\x1B\x69\x43\x9D\x25\x45\x94\x8F\x64\x95\x71\x44\x27\x96\x0F\x96\x97\x43\x18\x8F\x52\x2B\x21\x96\x7A\x88\x46\x99\x93\x89\x70\x15\x4D\x9C\x58\xDF\x1A\x1D\x5B\x9C\x98\x22\x9F\x10\x5C\x83\x6C\x7B\x97\x1B\x7D\x97\x94\x71\x95\x96\xF0\x32\x98\x4D\x96\x6E\x68\x46\x98\x06\x16\x58\x89\x9A\x11\x93\x9D\x54\x5A\x9F\x97\x76\x55\x1C\x78\x59\x9A\xDD\x7D\x98\x1F\x9D\x86\xFF\x82\x10\x14\x75\x88\x62\x84\x84\x8D\x8D\x8F\xF3\x87\x63\x5C\x1F\x88\xB1\x28\x43\xF0\x84\x01\xAC\x81\x86\xBA\x9A\x82\xF5\x4E\x6A\xEB\x8E\x99\xBA\x34\x1D\xC4\x98\x96\x72\x90\x3F\xE8\x86\x22\xB0\x60\x8B\x06\x6D\x88\xDD\x82\x9C\x06\x13\x12\xB1\x28\x8B\xB7\x17\x9C\x89\x89\x9C\x81\x8D\x9B\x78\x7D\x9C\x5F\x95\x97\xBE\x92\x8F",
"\x9D\x96\x59\xB8\x6B\x89\xD7\x98\x9C\x02\x93\x86\x69\x1D\x34\x62\x34\x9B\x69\x1D\x23\xD2\x81\x9F\x03\x98\x97\x06\x13\x01\xC2\x89\x16\xE2\x89\x8A\x74\x9F\x8C\xF3\x8C\x94\x61\x2C\x95\x8F\x2E\x9D\x7F\x92\x9A\x77\x9F\x9F\x3A\x15\x90\x62\x8D\x97\x6D\x9B\x9E\x47\x7E\x73\xA0\x9B\xA0\xE0\x6A\x24\x50\x94\x91\x11\x96\x91\xDD\x58\x93\xAA\x9D\x93\x58\x97\x7B\x39\x8E\x93\x94\x95\xA2\x5C\x8D\x14\x99\x9B\x87\x62\x92\x10\x13\xAB\x8F\x4B\x86\xA1\x03\xA3\x98\x0C\xA3\x14\x1B\xA6\x24\xED\x45\x93\x97\x50\xA2\xB1\x95\x99\xA0\x8C\x93\x3A\x90\x92\x24\xAA\x91\x9E\x12\x94\x11\xAD\xA2\x44\x68\x9E\x23\x8F\x4F\x17\xA4\xA1\x19\xA6\xA3\x61\x2C\xA1\x30\x97\x2F\x54\x91\x8F\x21\x95\xA2\x23\xAB\x9A\x8B\x91\xA2\xDE\x7E\x95\x04\xA1\x86\x6F\x9E\xA2\x4A\xA1\x5E\x4D\xA0\xA3\x84\x9E\x27\x5C\x8C\x96\x62\x81\xA6\x49\xA0\x9D\x31\xAB\x4F\x65\xAB\x9C\x67\xAE\x19\xF4\x92\x90\x5C\x8A\x97\x47\xA2\x93\x2F\xA2\xA7\x15\xA0\xA7\x33\xA1\x9A\x4F\xA2\x29\x5E\x27\x98\x88\x55\x25\x8A\x96\xA5\x43\xAA\x5B\x8F\x9C\x7A\x91\x9B\x11\xB0\x97\xA5\x44\xA7\x99\x25\x99\xA7\xD3\x2B\xA7\xE4\x94\xA6\x7F\xA8\xA1\xD6\x64\x9A\x02\x16\x9A\xA8\x78\x9A\x42\xAA\xA5\x66\xAD\x9A\xF7\x1B\x79\x8F\xA9\xA8\x57\x98\x26\x69\x1B\x86\x76\xA7\x9F\x06\x1F\x9C\xFA\x9B\x9F\x03\x13\x12\x15\x02\x86\xF8\x87\x1B\x4D\x8E\x73\x7C\xAB\xA4\x61\x4D\x8D\xDD\x82\x89\xDB\x94\x89\xC5\x90\x86\xB9\xAB\x4F\xBB\xA1\x5E\x9E\x83\xA6\x79\x6A\xA0\x5E\x25\x8A\x49\x6D\x8D\xD4\x10\x8F\x0E\x9C\xAC\xD3\x21\x5E\xC7\xA9\x67\xB3\x8A\xAC\x0D\x84\xAD\xBB\xA6\x6D\xC1\x8C\x85\x10\xA1\x86\x7D\x99\x9F\x18\xA8\xA9\x02\x16\xA0\x4E\xA6\x6D\x37\xA2\x10\xFA\x8B\x27\xC3\x78\x91\x27\xA4\xA4\x59\xA2\xA2\xA1\xAD\x93\x29\xA3\xA9\xE2\xA8\xA4\xE4\xAE\xA4\xE6\xA0\x00\xE8\xA6\xA6\x35\xA8\x13\xEB\xA3\x93\x39\xA3\x28\x3B\xA8\x13\x08\xAE\x98\x76\x80\xA4\xB2\x96\xA2\x5C\xAD\xB0\x41\x98\xAF\x60\x83\xAE\xDA\xA2\xA3\xE7\xAA\xA4\xEA\xA1\xA5\x38\xAD\xA1\x53\x9C\x7C\x88\xA2\xAA\xD6\x99\x95\xF4\xAB\xA5\x3D\xA8\xA2\x69\x15\x86\x6B\xAA\xAF\x15\xBE\xA7\x17\xBE\xA6\x73\xAB\x96\xE3\x89\xB2\x32\x9B\xAF\x00\xBC\xAB\x2A\x51\xA7\xE4\x9E\xAD\xB3\xAA\x13\x78\xA9\xAF\x33\xBB\xB2\x4C\xA9\xA9\xE9\xAD\x4E\x9C\xA4\x39\x88\x9F\xA9\x0E\xB5\xB2\xF2\xAF\x97\x90\x97\x21\x12\x17\xAA\xCF\x72\xA9\x02\x1B\xA2\xA6\x2A\xB2\x2E\xBD\xA7\x41\xBD\xB2\x34\xA1\xA8\x4E\x3E\x9E\x9D\xA7\x7A\x1D\x27\xA8\x09\xB3\x9B\xA3\xAC\x27\xA5\xA1\x12\x50\xB3\xB2\xB1\xA2\x9F\x3A\x10\x87\x32\xB3\x2D\xB0\xA3\xA2\x6D\x47\x40\xF8\x8C\x87\x22\x43\x83\x15\x11\x9D\xBA\x3E\xA0\x03\x17\x1B\xFF\xAB\xB6\x5D\x20\xAE\x12\xB5\x26\x55\x38\xB3\x79\xBF\x92\x66\x63\xB0\xED\xAE\xA1\x68\x43\xB6\x3F\xA2\xB2\x41\xA4\xB2\x90\xA0\x94\x24\x93\xB5\x62\x85\xB8\x42\xB5\xB3\x19\xBD\xAC\x1B\xBC\x53\x3A\xAF\x7E\x08\xB1\xAF\x8A\xAB\xB0\x90\xBD\xB0\x69\xBD\xA5\x69\x16\xA4\x61\x88\xB9\x5A\xB0\xA8\x9B\xBD\x25\x52\xA9\xB8\x54\xAE\xB1\x8E\xB3\xAF\x91\xBF\xB1\xF6\xA7\xB2\xE7\x91\x86\x83\x89\xB9\xDD\xAD\x4E\x30\xB2\xA6\xBC\xB8\xA4\x7F\xB9\xB3\xC0\xBB\xB3\x03\x1D\xB3\x60\x8C\xBA\xFE\xA8\xB1\x44\xB4\xBA\x46\xB5\xA8\x88\x57\xBA\xA6\xBC\xB4\x8C\xAE\xB4\x49\xB3\xB9\xB1\x52\xB5\xFD\x67\xB9\xC4\xBE\xBC\x18\x55\xB4\x9E\xA1\xB6\xA0\xA2\xB9\xA8\xAF\x20\x4D\x94\xAA\x50\x29\xBD\xE7\xBF\x28\x5C\x87\x1B\x19\x00\xB8\x62\x82\xB8\x96\xB0\xA6\x2C\xAC\xB9\xEC\xA2\x95\xE1\x47\x91\x3C\xAA\xBD\xE8\xB0\xBD\xA2\xAE\xB8\xF7\xA5\xBF\x60\x81\x2B\x8A\xB5\xB0\x02\x16\x93\x0F\x18\x59\xB5\xB0\xC0\x6A\xB2\xC0\xA9\xB3\xB8\x6E\x97\xBF\xB0\xBD\xB9\xB2\xBD\xB1\xC5\x5D\xC0\x83\xAC\xB0\x3E\xA4\xBD\x1D\xC1\xB8\x79\x92\xC1\x5E\x21\x2B\xE2\xB0\xB6\x86\xA5\xBE\xB8\xB7\xBB\x72\xAD\xB4\x0A\x2E\xC1\x26\xBD\xB6\x22\xCD\x25\x24\xC0\xBD\xE3\xB7\xC2\xEC\xB0\xB2\xF3\x8A\xBE\xAF\x95\xAF\xA8\xBA\x13\xB7\x1E\x32\xF2\xBA\x9F\xDC\xB0\x95\xF0\x85\xB7\x06\x10\x80\x78\xBC\x73\xE9\x9F\xBE\x06\x1D\x01\x41\xC6\x9F\x3A\x1A\xA6\x42\xC9\x16\xB7\x1F\x89\x4F\xCC\x82\xBA\xBF\xA5\x60\x8D\xBB\x02\x16\xC5\x1A\xBD\x75\x5B\x71\xBC\x6D\xAB\xC5\x48\xAE\xC5\xF8\xB3\x49\x61\xC7\xC5\x6A\xC2\x86",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void JsonLiteral::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonString::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonNumber::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonArray::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObjectField::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObject::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::json;

			IMPL_TYPE_INFO_RENAME(JsonNode, system::JsonNode)
			IMPL_TYPE_INFO_RENAME(JsonLiteral, system::JsonLiteral)
			IMPL_TYPE_INFO_RENAME(JsonLiteral::JsonValue, system::JsonLiteral::JsonValue)
			IMPL_TYPE_INFO_RENAME(JsonString, system::JsonString)
			IMPL_TYPE_INFO_RENAME(JsonNumber, system::JsonNumber)
			IMPL_TYPE_INFO_RENAME(JsonArray, system::JsonArray)
			IMPL_TYPE_INFO_RENAME(JsonObjectField, system::JsonObjectField)
			IMPL_TYPE_INFO_RENAME(JsonObject, system::JsonObject)
			IMPL_TYPE_INFO_RENAME(JsonNode::IVisitor, system::JsonNode::IVisitor)

			BEGIN_CLASS_MEMBER(JsonNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(JsonNode)

			BEGIN_CLASS_MEMBER(JsonLiteral)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonLiteral>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonLiteral)

			BEGIN_ENUM_ITEM(JsonLiteral::JsonValue)
				ENUM_ITEM_NAMESPACE(JsonLiteral::JsonValue)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Null)
			END_ENUM_ITEM(JsonLiteral::JsonValue)

			BEGIN_CLASS_MEMBER(JsonString)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonString>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonString::*)(), [](JsonString* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonString::*)(const vl::WString&), [](JsonString* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonString)

			BEGIN_CLASS_MEMBER(JsonNumber)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonNumber>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonNumber::*)(), [](JsonNumber* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonNumber::*)(const vl::WString&), [](JsonNumber* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonNumber)

			BEGIN_CLASS_MEMBER(JsonArray)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonArray>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(JsonArray)

			BEGIN_CLASS_MEMBER(JsonObjectField)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObjectField>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(JsonObjectField::*)(), [](JsonObjectField* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(JsonObjectField::*)(const vl::WString&), [](JsonObjectField* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonObjectField)

			BEGIN_CLASS_MEMBER(JsonObject)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObject>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(fields)
			END_CLASS_MEMBER(JsonObject)

			BEGIN_CLASS_MEMBER(JsonNode::IVisitor)
				CLASS_MEMBER_BASE(vl::reflection::IDescriptable)
				CLASS_MEMBER_EXTERNALCTOR(Ptr<JsonNode::IVisitor>(Ptr<IValueInterfaceProxy>), {L"proxy"}, &interface_proxy::JsonNode_IVisitor::Create)

				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonString* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonNumber* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonArray* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObjectField* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObject* node))
			END_CLASS_MEMBER(JsonNode)

			class JsonTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::json::JsonNode)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral::JsonValue)
					ADD_TYPE_INFO(vl::parsing::json::JsonString)
					ADD_TYPE_INFO(vl::parsing::json::JsonNumber)
					ADD_TYPE_INFO(vl::parsing::json::JsonArray)
					ADD_TYPE_INFO(vl::parsing::json::JsonObjectField)
					ADD_TYPE_INFO(vl::parsing::json::JsonObject)
					ADD_TYPE_INFO(vl::parsing::json::JsonNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool JsonLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new JsonTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
