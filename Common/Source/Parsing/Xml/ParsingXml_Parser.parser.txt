include:"..\Parsing.h"
namespace:vl.parsing.xml
classPrefix:Xml
parser:ParseDocument(XDocument)
parser:ParseElement(XElement)
grammar:

class Node
{
}

class Text : Node
{
	token content;
}

class CData : Node
{
	token content (XmlUnescapeCData);
}

class Attribute : Node
{
	token name;
	token value (XmlUnescapeAttributeValue);
}

class Comment : Node
{
	token content (XmlUnescapeComment);
}

class Element : Node
{
	token name;
	token closingName;
	Attribute[] attributes;
	Node[] subNodes (XmlMergeTextFragment);
}

class Instruction : Node
{
	token name;
	Attribute[] attributes;
}

class Document : Node
{
	Node[] prologs;
	Element rootElement;
}

token INSTRUCTION_OPEN = "/</?";
token INSTRUCTION_CLOSE = "/?/>";
token COMPLEX_ELEMENT_OPEN = "/<//";
token SINGLE_ELEMENT_CLOSE = "///>";
token ELEMENT_OPEN = "/<";
token ELEMENT_CLOSE = "/>";
token EQUAL = "/=";

token NAME = "[a-zA-Z0-9:_/-]+";
token ATTVALUE = """[^""]*""";
token COMMENT = "/</!--([^/->]|-[^/->]|--[^>])*--/>";
token CDATA = "/</!/[CDATA/[([^/]]|/][^/]]|/]/][^>])*/]/]/>";
token TEXT = "([^<>="" /r/n/ta-zA-Z0-9:_/-])+|""";

discardtoken SPACE = "/s+";

rule Attribute XAttribute = NAME:name "=" ATTVALUE:value as Attribute;
rule Text XText = (NAME:content | EQUAL:content | TEXT:content) as Text;
rule CData XCData = CDATA:content as CData;
rule Comment XComment = COMMENT:content as Comment;
rule Element XElement = "<" NAME:name {XAttribute:attributes} ("/>" | ">" {XSubNode:subNodes} "</" NAME:closingName ">") as Element;
rule Node XSubNode = !XText | !XCData | !XComment | !XElement;
rule Instruction XInstruction = "<?" NAME:name {XAttribute:attributes} "?>" as Instruction;
rule Document XDocument = {XInstruction:prologs | XComment:prologs} XElement:rootElement as Document;