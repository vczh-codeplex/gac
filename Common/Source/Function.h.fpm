$$include:Common.fpm

$$define $FUNCTION_DECLARATION($count,$function) $$begin
$(/)***********************************************************************
vl::Func<$FUNCTION_TYPE($count,$function)>
***********************************************************************$(/)
	template<$TYPENAME_LIST($count,$function)>
	class Func<$FUNCTION_TYPE($count,$function)> : public Object
	{
		static const vint BinarySize = sizeof(void*)*8;
	protected:
		class Invoker : public Object
		{
		public:
			virtual $if($function,R,void) Invoke($PARAMETER_LIST($count))=0;
			virtual void RetriveBinary(char* binary)=0;
		};

		class StaticInvoker : public Invoker
		{
		protected:
			$FUNCTION_DECL($count,$function,*function);
		public:
			StaticInvoker($FUNCTION_DECL($count,$function,*_function))
				:function(_function)
			{
			}

			virtual $if($function,R,void) Invoke($PARAMETER_LIST($count))
			{
				$if($function,return, ) function($ARGUMENT_LIST($count));
			}

			virtual void RetriveBinary(char* binary)
			{
				BinaryRetriver<$FUNCTION_DECL($count,$function,*), BinarySize> retriver;
				memset(retriver.binary, 0, BinarySize);
				retriver.t=function;
				memcpy(binary, retriver.binary, BinarySize);
			}
		};

		template<typename C>
		class MemberInvoker : public Invoker
		{
		protected:
			C*			sender;
			$FUNCTION_DECL($count,$function,C::*function);

			struct Content
			{
				C*			sender;
				$FUNCTION_DECL($count,$function,C::*function);
			};
		public:
			MemberInvoker(C* _sender, $FUNCTION_DECL($count,$function,C::*_function))
				:sender(_sender)
				,function(_function)
			{
			}

			virtual $if($function,R,void) Invoke($PARAMETER_LIST($count))
			{
				$if($function,return, ) (sender->*function)($ARGUMENT_LIST($count));
			}

			virtual void RetriveBinary(char* binary)
			{
				BinaryRetriver<Content, BinarySize> retriver;
				memset(retriver.binary, 0, BinarySize);
				retriver.t.sender=sender;
				retriver.t.function=function;
				memcpy(binary, retriver.binary, BinarySize);
			}
		};

		template<typename C>
		class ObjectInvoker : public Invoker
		{
		protected:
			C			function;
		public:
			ObjectInvoker(const C& _function)
				:function(_function)
			{
			}

			virtual $if($function,R,void) Invoke($PARAMETER_LIST($count))
			{
				$if($function,return, ) function($ARGUMENT_LIST($count));
			}

			virtual void RetriveBinary(char* binary)
			{
				BinaryRetriver<void*, BinarySize> retriver;
				memset(retriver.binary, 0, BinarySize);
				retriver.t=this;
				memcpy(binary, retriver.binary, BinarySize);
			}
		};
	protected:
		Ptr<Invoker>			invoker;
	public:
		typedef $if($function,R,void) FunctionType($TYPE_LIST($count));
		typedef $if($function,R,void) ResultType;

		Func()
		{
		}

		Func(const Func<$FUNCTION_TYPE($count,$function)>& function)
		{
			invoker=function.invoker;
		}

		Func($FUNCTION_DECL($count,$function,*function))
		{
			invoker=new StaticInvoker(function);
		}

		template<typename C>
		Func(C* sender, $FUNCTION_DECL($count,$function,C::*function))
		{
			invoker=new MemberInvoker<C>(sender, function);
		}

		template<typename C>
		Func(const C& function)
		{
			invoker=new ObjectInvoker<C>(function);
		}

		$if($function,R,void) operator()($PARAMETER_LIST($count))const
		{
			$if($function,return, ) invoker->Invoke($ARGUMENT_LIST($count));
		}

		bool operator==(const Func<$FUNCTION_TYPE($count,$function)>& function)const
		{
			char a[BinarySize];
			char b[BinarySize];
			invoker->RetriveBinary(a);
			function.invoker->RetriveBinary(b);
			return memcmp(a, b, BinarySize)==0;
		}

		bool operator!=(const Func<$FUNCTION_TYPE($count,$function)>& function)const
		{
			char a[BinarySize];
			char b[BinarySize];
			invoker->RetriveBinary(a);
			function.invoker->RetriveBinary(b);
			return memcmp(a, b, BinarySize)!=0;
		}

		bool operator<(const Func<$FUNCTION_TYPE($count,$function)>& function)const
		{
			char a[BinarySize];
			char b[BinarySize];
			invoker->RetriveBinary(a);
			function.invoker->RetriveBinary(b);
			return memcmp(a, b, BinarySize)<0;
		}

		bool operator<=(const Func<$FUNCTION_TYPE($count,$function)>& function)const
		{
			char a[BinarySize];
			char b[BinarySize];
			invoker->RetriveBinary(a);
			function.invoker->RetriveBinary(b);
			return memcmp(a, b, BinarySize)<=0;
		}

		bool operator>(const Func<$FUNCTION_TYPE($count,$function)>& function)const
		{
			char a[BinarySize];
			char b[BinarySize];
			invoker->RetriveBinary(a);
			function.invoker->RetriveBinary(b);
			return memcmp(a, b, BinarySize)>0;
		}

		bool operator>=(const Func<$FUNCTION_TYPE($count,$function)>& function)const
		{
			char a[BinarySize];
			char b[BinarySize];
			invoker->RetriveBinary(a);
			function.invoker->RetriveBinary(b);
			return memcmp(a, b, BinarySize)>=0;
		}

		operator bool()const
		{
			return invoker;
		}
	};
$$end

$$define $BINDING_DECLARATION($count,$function) $$begin
$(/)***********************************************************************
vl::function_binding::Binding<$FUNCTION_TYPE($count,$function)>
***********************************************************************$(/)
		template<$TYPENAME_LIST($count,$function)>
		struct Binding<$FUNCTION_TYPE($count,$function)>
		{
			typedef $if($function,R,void) FunctionType($TYPE_LIST($count));
			typedef $if($function,R,void) CurriedType($CURRIED_TYPE_LIST($count));
			typedef T0 ParameterType;

			class Binder : public Object
			{
			protected:
				Func<FunctionType>		target;
				typename RCR<T0>::Type	p0;
			public:
				Binder(const Func<FunctionType>& _target, typename CR<T0>::Type _p0)
					:target(_target)
					,p0(_p0)
				{
				}

				$if($function,R,void) operator()($CURRIED_PARAMETER_LIST($count))const
				{
					$if($function,return, ) target($ARGUMENT_LIST($count));
				}
			};

			class Currier : public Object
			{
			protected:
				Func<FunctionType>		target;
			public:
				Currier(const Func<FunctionType>& _target)
					:target(_target)
				{
				}

				Func<CurriedType> operator()(typename CR<T0>::Type argument)const
				{
					return Binder(target, argument);
				}
			};
		};
$$end

$$define $COMBINDING_DECLARATION($count) $$begin
$(/)***********************************************************************
vl::function_combining::Combining<R1($TYPE_LIST($count)), R2($TYPE_LIST($count)), R(R1,R2)>
***********************************************************************$(/)
		template<typename R1, typename R2, $TYPENAME_LIST($count,1)>
		class Combining<R1($TYPE_LIST($count)), R2($TYPE_LIST($count)), R(R1,R2)> : public Object
		{
		protected:
			Func<R1($TYPE_LIST($count))>			function1;
			Func<R2($TYPE_LIST($count))>			function2;
			Func<R(R1,R2)>							converter;
		public:
			typedef R1 FirstFunctionType($TYPE_LIST($count));
			typedef R2 SecondFunctionType($TYPE_LIST($count));
			typedef R ConverterFunctionType(R1,R2);
			typedef R FinalFunctionType($TYPE_LIST($count));

			Combining(const Func<R1($TYPE_LIST($count))>& _function1, const Func<R2($TYPE_LIST($count))>& _function2, const Func<R(R1,R2)>& _converter)
				:function1(_function1)
				,function2(_function2)
				,converter(_converter)
			{
			}

			R operator()($PARAMETER_LIST($count))const
			{
				return converter(function1($ARGUMENT_LIST($count)), function2($ARGUMENT_LIST($count)));
			}
		};
$$end

$$define $LAMBDA_TYPE_RETRIVER_DECLARATION($count) $$begin
$(/)***********************************************************************
vl::Func<$FUNCTION_TYPE($count,1)>
***********************************************************************$(/)
$( )
		template<typename TObject, $TYPENAME_LIST($count,1)>
		struct LambdaRetriveType<R (__thiscall TObject::*)($TYPE_LIST($count))const>
		{
			typedef Func<R($TYPE_LIST($count))> Type;
			typedef $FUNCTION_DECL($count,1,FunctionType);
			typedef R ResultType;
		};
$( )
		template<typename TObject, $TYPENAME_LIST($count,1)>
		struct LambdaRetriveType<R (__thiscall TObject::*)($TYPE_LIST($count))>
		{
			typedef Func<R($TYPE_LIST($count))> Type;
			typedef $FUNCTION_DECL($count,1,FunctionType);
			typedef R ResultType;
		};
$( )
		template<$TYPENAME_LIST($count,1)>
		struct FunctionObjectRetriveType<R(*)($TYPE_LIST($count))>
		{
			typedef Func<R($TYPE_LIST($count))> Type;
			typedef $FUNCTION_DECL($count,1,FunctionType);
			typedef R ResultType;
		};
$( )
$$end

/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Framework::Function

Classes:
	Func<function-type>									：函数对象

Functions:
	Curry :: (A->B) -> A -> B							：参数拆分
	Combine :: (A->B) -> (A->C) -> (B->C->D) -> (A->D)	：函数组合
	
本文件使用Vczh Functional Macro工具自动生成
***********************************************************************/

#ifndef VCZH_FUNCTION
#define VCZH_FUNCTION

#include <memory.h>
#include "Basic.h"
#include "Pointer.h"

namespace vl
{
	template<typename T>
	class Func
	{
	};

$$define $FUNCTION_APPLY($index) $$begin
$( )
$FUNCTION_DECLARATION($index,1)
$( )
$FUNCTION_DECLARATION($index,0)
$( )
$$end
$loop($MAX_FUNCTION_NUMBER(),0,$FUNCTION_APPLY)

	namespace function_lambda
	{
		template<typename T>
		struct LambdaRetriveType
		{
			typedef vint Type;
			typedef vint FunctionType;
			typedef vint ResultType;
		};
$( )
		template<typename T>
		struct FunctionObjectRetriveType
		{
			typedef typename LambdaRetriveType<decltype(&T::operator())>::Type Type;
			typedef typename LambdaRetriveType<decltype(&T::operator())>::FunctionType FunctionType;
			typedef typename LambdaRetriveType<decltype(&T::operator())>::ResultType ResultType;
		};
$( )
$loop($MAX_FUNCTION_NUMBER(),0,$LAMBDA_TYPE_RETRIVER_DECLARATION)
$( )
		template<typename T>
		typename LambdaRetriveType<decltype(&T::operator())>::Type Lambda(T functionObject)
		{
			return functionObject;
		}
		template<typename T>
		typename FunctionObjectRetriveType<T>::Type ConvertToFunction(T functionObject)
		{
			return functionObject;
		}
#define LAMBDA vl::function_lambda::Lambda
#define FUNCTION vl::function_lambda::ConvertToFunction
#define FUNCTION_TYPE(T) typename vl::function_lambda::FunctionObjectRetriveType<T>::Type
#define FUNCTION_RESULT_TYPE(T) typename vl::function_lambda::FunctionObjectRetriveType<T>::ResultType
	}

	namespace function_binding
	{
		template<typename T>
		struct Binding
		{
		};
		$( )
		template<typename T>
		struct CR{typedef const T& Type;};
		template<typename T>
		struct CR<T&>{typedef T& Type;};
		template<typename T>
		struct CR<const T>{typedef const T& Type;};
		template<typename T>
		struct CR<const T&>{typedef const T& Type;};
		$( )
		template<typename T>
		struct RCR{typedef T Type;};
		template<typename T>
		struct RCR<T&>{typedef T& Type;};
		template<typename T>
		struct RCR<const T>{typedef T Type;};
		template<typename T>
		struct RCR<const T&>{typedef T Type;};
		
$$define $BINDING_APPLY($index) $$begin
$( )
$BINDING_DECLARATION($index,1)
$( )
$BINDING_DECLARATION($index,0)
$( )
$$end
$loop($sub($MAX_FUNCTION_NUMBER(),1),1,$BINDING_APPLY)
	}
$( )
	template<typename T>
	Func<Func<typename function_binding::Binding<T>::CurriedType>(typename function_binding::Binding<T>::ParameterType)>
	Curry(T* function)
	{
		return typename function_binding::Binding<T>::Currier(function);
	}
$( )
	template<typename T>
	Func<Func<typename function_binding::Binding<T>::CurriedType>(typename function_binding::Binding<T>::ParameterType)>
	Curry(const Func<T>& function)
	{
		return typename function_binding::Binding<T>::Currier(function);
	}
$( )
	namespace function_combining
	{
		template<typename A, typename B, typename C>
		class Combining
		{
		};
$$define $COMBINDING_APPLY($index) $$begin
$( )
$COMBINDING_DECLARATION($index)
$$end
$loop($MAX_FUNCTION_NUMBER(),0,$COMBINDING_APPLY)
	}

	template<typename F1, typename F2, typename C>
	Func<typename function_combining::Combining<F1, F2, C>::FinalFunctionType>
	Combine(Func<C> converter, Func<F1> function1, Func<F2> function2)
	{
		return function_combining::Combining<F1, F2, C>(function1, function2, converter);
	}

	template<typename T>
	Func<Func<T>(Func<T>,Func<T>)> Combiner(const Func<typename Func<T>::ResultType(typename Func<T>::ResultType,typename Func<T>::ResultType)>& converter)
	{
		typedef typename Func<T>::ResultType R;
		return Curry<Func<T>(Func<R(R,R)>,Func<T>,Func<T>)>(Combine)(converter);
	}
}
#endif