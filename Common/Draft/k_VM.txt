========================================================
VM Instructions
========================================================
type:
	i8/i16/i32/i64				// integral
	u8/u16/u32/u64				// integral
	f32/f64						// numeric
	bool						// bit
	char
	gc_handle/function/pointer
	void						// only for call instructions that indicating there is not return value
	<user-defined-type>

instruction:
	name <immediate_1> <immediate-2> ... (stack_arg_1, stack_arg_2, ...)->stack_result

// all instructions that write data to the stack
// should ensure that the value type of the value
// that pushed into the stack is defined or inferable
// gc_checkpoint should only appear when the stack is empty

========================================================
Data Instructions
========================================================

push <type> <constant>				// push data to stack
pop									// pop data from stack
convert <type>						// convert the top value
address_var <var-name>				// get the address of a variable
address_static_var <var-name>		// get the address of a global variable
address_data						// get the address of the global data buffer
address_const						// get the address of the constant data buffer
ptr_read <type> (pointer)->data
ptr_write (pointer, data)
ptr_move <type> (dst, src)
ptr_copy (dst, src, size)
ptr_alloc (size)->pointer
ptr_free (pointer)

========================================================
Arithmetic Instructions
========================================================

bit: (op1, op2)->result				// type should be the same
	and, or, xor, not
integral: (op1, op2)->result		// type should be the same
	mod, shl, shr
numeric: (op1, op2)->result			// type should be the same
	add, sub, mul, div
pointer: (ptr, int)->result			// int can be any integral type
	inc, dec
compare: (op1, op2)->bool			// type should be the same
	// for numeric/char/pointer
	lt, gt, le, ge, eq, ne

========================================================
Jumping Instructions
========================================================

jump <label>						// only jump to an instruction that has the same stack state (pushed types)
jump_if <label> (bool-value)
call <function> ()->return_value?
call_virtual <return-type> (function)->return_value?

========================================================
GC Instructions
========================================================

// pin and unpin manage a counter

gc_deref (handle)->pointer
gc_deref_array (handle, item-index)->pointer
gc_pin (handle)
gc_unpin (handle)
gc_alloc <table>->handle
gc_alloc_repeat <repeat-type> (repeat-count)->handle
gc_length (handle)->u64
gc_checkpoint

========================================================
Structure
========================================================

struct UserDefinedType
	field : <type>
	field2 : <type>
end

repeat UserDefinedType
	header : <type>
	repeat : <type>
end

var GlobalVariable : <type>

func UserDefinedFunction : <type>
	arg1 : <type>
	arg2 : <type>
var
	var1 : <type>
	var2 : <type>
begin
	<instruction>
end