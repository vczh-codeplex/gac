========================================================
Computation Knowledge Graph
========================================================

========================================================
Keywords
========================================================
int, uint, float, char, string, bool
ref, data
external, storage, query, in, out
var
requires:, index:, unique:, hash:, group:, ordered:

========================================================
Types
========================================================

int, uint, float, char, string, bool (all in highest precision)

[ref] data <type-name> [: <parent-type>]
{
	<field-name> : <type>;
}

// ref data automatically contains "identifier : int"
// comparing ref data only cares about identifier
// [ref] data is immutable
// data constructor: Person{"vczh"}, Person{name:"vczh"}
// ref data constructor: ref Person{name:"vczh"}

========================================================
External Functions
========================================================

external MarryWith(husband : Person, wife : Person);
external Square(in number : int, squared : int);
external Sqrt(int number: int, sqrt : int)

========================================================
Queries
========================================================

storage Father(child : Person, father : Person);

// variable defined in one ":-" cannot be used in another
// variable defined after "," cannot be used before ","
// in: input argument only

query Ancestor(person : Person, ancestor : Person)
	:- Father(person, ancestor) 
	:- Father(person, out father), Ancestor(father, ancestor)
	;

query Ancestor(person : Person, ancestor : Person)
	:- Father(person, ancestor) or Father(person, var father) and Ancestor(var father, ancestor)
	;

query Square(in number : float, out squared : float)
	:- squared == number * number
	;

query VectorLength(in v : vector<float>, length : float)
	:- Square(v.x, var x2), Square(v.y, var y2), Sqrt(x2+y2, length)
	:- var x2 == Square(v.x), var y2 == Square(v.y), length == Sqrt(x2+y2)
	:- Sqrt(Square(v.x) + Square(v.y), length)
	:- length == Sqrt(v.x * v.x + v.y * v.y)
	;

========================================================
Storages
========================================================

storage Fibonacci(in index : int, number : int)
	requires:
		index >= 1,
		unique:(index)
	index:
		ordered:(index)
	:- index >= 3, Fibonacci(index-1, var a), Fibonacci(index-2, var b), a + b == number
	;

store Fibonacci(1, 1);
store Fibonacci(2, 1);

========================================================
Indices
========================================================

storage Test(test : int, string : name)
	requires:
		test >= 0,
		unique:(test),
		unique:(name),
	index:
		hash:(test),
		hash:(name)
	;

storage Student(student : int, string : name)
	requires:
		unique:(student)
	index:
		hash:(student),
		hash:(name)
	;

storage Score(student : int, test : int, score : int)
	requires:
		test >= 0,
		unique:(student, test)
	index
		hash:(student),
		hash:(test),
		group:(student, test, ordered:(score)),
	;

========================================================
Collections
========================================================

========================================================
Pattern Matching
========================================================

========================================================
Graph Nodes
========================================================

========================================================
Example (Expression Evaluation)
========================================================

========================================================
Example (Actors and Couples)
========================================================

========================================================
Example (Pascal)
========================================================