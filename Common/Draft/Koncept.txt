========================================================
Primitive Types
========================================================

object				system.Object		null
void				system.Void			<>
uint8				system.UInt8		0
uint16				system.UInt16		0
uint32	(uint)		system.UInt32		0
uint64				system.UInt64		0
int8				system.Int8			0
int16				system.Int16		0
int32	(int)		system.Int32		0
int64				system.Int64		0
float				system.Single		0.0
double				system.Double		0.0
bool				system.Boolean		false
char				system.Char			'\0'
string				system.String		""

========================================================
Custom Types
========================================================

data PointI
{
	x : int;
	y : int;
}
// default value : {x : default(int), y : default(int)}

data<T> Point
{
	x : T;
	y : T;
}

// {x : 10, y : 20} : Point<int>

data Derived : Base1, Base2
{
}

========================================================
Composite Types
========================================================

data<T, U> Pair
{
	first : T;
	second : U;
}

T..U				Pair<T, U>			default(T)..default(U)					// right associative
<T, U, V>			T..U..V..void		<default(T), default(U), default(V)
T?										null	// T can be all types except X? and object. All acceptable types T satisfies concept NotNull<T>

========================================================
Interfaces
========================================================

interface<T> Enumerator
{
	prop Current : T {get;}
	func MoveNext() : bool;
}

interface<T> Enumerable
{
	func CreateEnumerator() : Enumerator<T>;
}

interface<T> Disposable
{
	func Dispose();
}

interface<T> Observer
{
	func OnNext(value : T);
	func OnError(error : Exception);
	func OnComplete();
}

interface<T> Observable
{
	func Subscribe(observer : Observer<T>) : Disposable
}

// default value for an interface does not exists
// except the concept DefaultValue is implemented

instance<T> DefaultValue<Enumerable<T>>
{
	func Default() = new Enumerable<T>
	{
		func CreateEnumerator() = new Enumerator<T>
		{
			prop Current : T { get { throw InvalidOperationException{}; } }
			func MoveNext() : bool = false;
		};
	};
}

interface<TReturn, TArguments> Delegate
	where Tuple<TArgs>
{
	func Invoke(arguments : TArguments) : TReturn;
}

x=>x+1
(x,y)=>x+y
func (x : int, y : int) : int = x + y
func (x : int, y : int) : int { return x + y; }

// equivalent to the lambda expression above
new Delegate<int, <int, int>>
{
	func Invoke(<x, y> : <int, int>) : int
	{
		return x + y;
	}
}

========================================================
Container Interfaces
========================================================

========================================================
Concepts
========================================================

concept<T> Addable
{
	prop Zero : T {get;}
	func operator+ (x : T) : T;
	func operator- (x : T) : T;
	func operator+ (x : T, y : T) : T;
	func operator- (x : T, y : T) : T;
}

concept<T, TDiff> Differentiable
{
	prop Zero : TDiff {get;}
	func operator+ (x : T, y : TDiff) : T;
	func operator+ (x : TDiff, y : T) : T;
	func operator- (x : T, y : T) : TDiff;
}

========================================================
Predefined Concepts
========================================================

DefaultValue<T>
Tuple<T>
NotNull<T>
Interface<T>
Convertable<TFrom, TTo>
ImplicitConvertable<TFrom, TTo>

========================================================
Patterns
========================================================

========================================================
Expressions
========================================================

========================================================
Statements
========================================================

========================================================
Functions
========================================================

========================================================
Predefined Convertions
========================================================

========================================================
Continuations
========================================================